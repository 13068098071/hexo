{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/img/reward/1.jpg","path":"img/reward/1.jpg","modified":0,"renderable":0},{"_id":"source/img/reward/2.png","path":"img/reward/2.png","modified":0,"renderable":0},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/live2d-widget/LICENSE","path":"live2d-widget/LICENSE","modified":0,"renderable":1},{"_id":"themes/butterfly/source/live2d-widget/README.md","path":"live2d-widget/README.md","modified":0,"renderable":1},{"_id":"themes/butterfly/source/live2d-widget/autoload.js","path":"live2d-widget/autoload.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/live2d-widget/live2d.min.js","path":"live2d-widget/live2d.min.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/live2d-widget/waifu-tips.js","path":"live2d-widget/waifu-tips.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/live2d-widget/waifu-tips.json","path":"live2d-widget/waifu-tips.json","modified":0,"renderable":1},{"_id":"themes/butterfly/source/live2d-widget/waifu.css","path":"live2d-widget/waifu.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/live2d-widget/assets/screenshot-1.png","path":"live2d-widget/assets/screenshot-1.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/live2d-widget/assets/screenshot-2.png","path":"live2d-widget/assets/screenshot-2.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/live2d-widget/assets/screenshot-3.png","path":"live2d-widget/assets/screenshot-3.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/live2d-widget/demo/demo.html","path":"live2d-widget/demo/demo.html","modified":0,"renderable":1},{"_id":"themes/butterfly/source/live2d-widget/demo/login.html","path":"live2d-widget/demo/login.html","modified":0,"renderable":1}],"Cache":[{"_id":"source/_data/link.yml","hash":"80576ac894f882f25903e2ab824427b8d11988cd","modified":1640157895714},{"_id":"source/_posts/ArrayList.md","hash":"1e3ce9c0989fa4b995b3ae42bdcc478ac2cf7d74","modified":1640337944195},{"_id":"source/_posts/HashMap.md","hash":"324c256c4471e8bf23e6cd8d559807ad1ccfc940","modified":1640335183951},{"_id":"source/_posts/LinkedList.md","hash":"e454fdcdd04798117a8ce3e81c14ad2957ba1668","modified":1640328738277},{"_id":"source/_posts/Shell.md","hash":"fe3796aec7743ff1649dd93edb5de9c321b986a9","modified":1640340484587},{"_id":"source/_posts/hexo-electric-clock.md","hash":"5e6f6a2dbc0aa700986a6cc316efe0a3da72318e","modified":1640340498362},{"_id":"source/categories/index.md","hash":"afda5b5449c73295f3b0e6f29c79e84769eaac76","modified":1640341113361},{"_id":"source/link/index.md","hash":"ea40b555e93e535c1fd20b42c84e744a09e34b7d","modified":1640341191415},{"_id":"source/tags/index.md","hash":"7e3e664f334924fd4cf654ae5b91c9d615786efa","modified":1640341196433},{"_id":"source/img/reward/1.jpg","hash":"a71c06809691e96bbc1df8e430dde6a3a113fa2d","modified":1640163088743},{"_id":"source/img/reward/2.png","hash":"ec7db2bbf5dd57eb728593352ceb349aad0b6450","modified":1640163092418},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1640156936809},{"_id":"themes/butterfly/README.md","hash":"cedd13fcd8c75a68742265dd8eced4087e940ffd","modified":1640156936809},{"_id":"themes/butterfly/README_CN.md","hash":"459d6f3200863021bee1fe72a719aef236fb4090","modified":1640156936809},{"_id":"themes/butterfly/_config.yml","hash":"63d1a594969b7b5b97e1babebc7b85ef07c02e4f","modified":1640156936809},{"_id":"themes/butterfly/package.json","hash":"333603963b3d2cedb643def8a9955f6d540f5d95","modified":1640156936813},{"_id":"themes/butterfly/.github/stale.yml","hash":"05a55a87fa7f122c59683e41c8b2e37e79f688f0","modified":1640156936808},{"_id":"themes/butterfly/languages/default.yml","hash":"7ca673fb629ea74f5ba5e75b4f0f95248cfb5090","modified":1640156936809},{"_id":"themes/butterfly/languages/en.yml","hash":"cd333235ff1648a6bf58dfafc81f2c57672a15a5","modified":1640156936809},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"741e522b2387f94764a73844e7b084cc7e927c54","modified":1640156936809},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"79a50c40d9f5463f1fa42aa870ac6b8b84540412","modified":1640156936809},{"_id":"themes/butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1640156936809},{"_id":"themes/butterfly/layout/category.pug","hash":"60c1b795b6e227b5dd81963b51d29d1b81d0bf49","modified":1640156936809},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1640156936813},{"_id":"themes/butterfly/layout/page.pug","hash":"82aa988527a11835e7ac86ce4f23b8cd20014dfa","modified":1640156936813},{"_id":"themes/butterfly/layout/post.pug","hash":"8d398c8925182699d9f2b9f1b727f06228488312","modified":1640156936813},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1640156936813},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"476802922b774b679225102ac30a9d9183394701","modified":1640156936808},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"eff495eb1584cf4586e33c76e8b2fa6a469a179b","modified":1640156936808},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f6867a2f0417fe89a0f2008730ee19dd38422021","modified":1640156936808},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1640156936809},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"7d378e328a53cc99d5acc9682dce53f5eb61537d","modified":1640156936809},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"4156224c47bfc2482281ac4e4df701c30476ff00","modified":1640156936809},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1640156936810},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"1377952022ee0a9eaa7a2fd1098f1571efc468d9","modified":1640156936810},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"6f2608c4d93d3d10ae6b2cd7f8918f303f024321","modified":1640156936810},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1640156936810},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"2d0453adf92a3fd3466cf0793f14685d17b8b51d","modified":1640156936811},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"8dafc2dcd8c33f70a546fee443f0b6d80b3cd243","modified":1640156936811},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1640156936813},{"_id":"themes/butterfly/scripts/events/init.js","hash":"018aa446265fe627301b1d53d7cba4f4ff1960ac","modified":1640156936813},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"d575137c8779e50422c2416f4d0832fdea346ee6","modified":1640156936813},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"4cc2d517195c8779471d326ada09f9371cbad4dd","modified":1640156936813},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"9821872007cf57efae4b728dc575ef9d004547bb","modified":1640156936813},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1640156936813},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1640156936813},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"65f2442e04c4defd16e7c1e67701d3bb41d9577a","modified":1640156936813},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c6611d97087c51845cb1ab4821696a62fa33daeb","modified":1640156936813},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"21556f9cb412ddc500ad12ecfd419f3ea6c9f663","modified":1640156936813},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"b816ded1451f28c7c54151ffe6c259b110253ae3","modified":1640156936813},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"94826ea6bcc4d2304199adae12c4e2b272caf529","modified":1640156936813},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"f33858ffb9e88191e644796e11d2f901eb332308","modified":1640156936813},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1640156936813},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1640156936814},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"35f073021db93699fcac9ef351e26c59c31aadf7","modified":1640156936814},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"c16c6eb058af2b36bcd583b2591076c7ebdd51ad","modified":1640156936814},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1640156936814},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1640156936816},{"_id":"themes/butterfly/source/css/var.styl","hash":"40c3f64422205a24e68ce1ad8fe8163f24fdd525","modified":1640156936816},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1640156936816},{"_id":"themes/butterfly/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1640156936816},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1640156936816},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1640156936817},{"_id":"themes/butterfly/source/js/main.js","hash":"b244f28124a46d7f1e8ef76ba6e925289691f93b","modified":1640156936817},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1640156936818},{"_id":"themes/butterfly/source/js/utils.js","hash":"8319b59c26ce8cd2b0ae7d030c4912215148fa92","modified":1640156936818},{"_id":"themes/butterfly/source/live2d-widget/autoload.js","hash":"be79121ed4ed1cd6ee53ffa0c791362789a0699a","modified":1640310464972},{"_id":"themes/butterfly/source/live2d-widget/LICENSE","hash":"31a3d460bb3c7d98845187c716a30db81c44b615","modified":1640310387290},{"_id":"themes/butterfly/source/live2d-widget/waifu-tips.js","hash":"f8bdc91fa1e51d46dc18e04174c63034d68299bf","modified":1640310387295},{"_id":"themes/butterfly/source/live2d-widget/README.md","hash":"cee888d08bc5af46e6b0e9fa6a9afe11abb5cdca","modified":1640310387290},{"_id":"themes/butterfly/source/live2d-widget/waifu-tips.json","hash":"e0c159ebcaa0f729f15a86f4712d3296246bb2e8","modified":1640310387295},{"_id":"themes/butterfly/source/live2d-widget/waifu.css","hash":"419e5c1eb38eb7a477a32cc62b48d701fcee930d","modified":1640340071314},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"6c41f49a3e682067533dd9384e6e4511fc3a1349","modified":1640156936810},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"90d01b88d0f406d00184960b1afe9230aec2ebe6","modified":1640156936810},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"4def0aab9e2172ad1f29abd1535d8e08ff23aa0b","modified":1640156936810},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"889ef16fa34a39e5533bc170e62f20f3450cc522","modified":1640156936810},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1640156936810},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1640156936810},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"e55f8bdb876d5429a908498db1307b94094c0d06","modified":1640156936810},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1640156936810},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1640156936810},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"65fa23680af0daf64930a399c2f2ca37809a8149","modified":1640156936810},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"24370508ee87f14418e8f06e9d79ad8c52a342c4","modified":1640156936810},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"c205b9fd72b2fe19e6d15c5b5ab0fb38c653032e","modified":1640156936810},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"92f81a437c9db49f7ebcf608bc09488ecdb55a21","modified":1640156936810},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1640156936810},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"4cfcf0100e37ce91864703cd44f1cb99cb5493ea","modified":1640156936810},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1640156936810},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1640312919608},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"4c3c5cb69b3aead8c232cb0fbc251929f28aad75","modified":1640156936810},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"1f30952fed73dec21b42e2e30b7fe2e84618d2e4","modified":1640156936810},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"dbec869c62135695495703a29ad7655e9965d461","modified":1640156936810},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"b53a2d4f9c37b375a4446d2273dcfb7712d91b3e","modified":1640156936810},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"93d4ebc7dc8228c7a10ddeb5a553d0dcdabbe145","modified":1640156936810},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"88e3b611b03149665e4113cfa39595c1a3fca7e5","modified":1640156936810},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"5b404356f311d2ee36478291ca3553210867b738","modified":1640156936811},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"292646dfab135973b09f0fa9e3931e83da2ed30e","modified":1640156936811},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"b9d54a01d7c2a7a183cb7209e99430ce7fea1fe3","modified":1640156936811},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"d5fec7dedc52ab23865fb4db002755e9bdaadc9f","modified":1640156936812},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"933cb710d2dbcea25c6426a57c6f49d2f48b792c","modified":1640156936812},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"1fbecfd299068f90d727f0c8c65e2a792fa6e3e2","modified":1640156936812},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"d50e5c22cd6bc3c378bc581918136746cfa3447f","modified":1640156936812},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1640156936812},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"3d8e3706a056389176f55dd21956aabc78046761","modified":1640156936812},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1640156936812},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"0366c658cdcff839aa1df2e2d252a03a53fd427e","modified":1640259301038},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1640156936812},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1640156936812},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"27afd2274bd5f2cbbf1bad9f0afe2b2b72c213ca","modified":1640156936812},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"ae9336bf31cdad08ff586ead4295912a96563c76","modified":1640156936813},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1640156936813},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1640156936813},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1640156936813},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"0612aaee878f33ea8d3da0293c7dc3b6cd871466","modified":1640156936813},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"b5525891f6affd02c1ea3b2327c026882efe428b","modified":1640259297326},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"eda47f3e807a466ba8275627ea936c5100c43818","modified":1640156936814},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"e211efbd1952d4b1b881287aa43423133c1d166e","modified":1640156936814},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"85e72c70a0cef29e40be1968f5d23b06c6f8e3aa","modified":1640156936814},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"fa4b87e7b29bdd1f09eb1a30e06ba74b224f0ba2","modified":1640156936814},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"7feb755ca7c22da36bbad11e74ecd95fdcf3b879","modified":1640156936814},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1640156936814},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"f1b63892baafa48ab872bc79671d57aafd511f6c","modified":1640156936814},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"1a452b5f6aad384fab820c4f9463d0464263cedc","modified":1640253271271},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"98235fcda3b87ad6f7e91eafbed94d0d6ae847ca","modified":1640156936814},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"7d18a7be9cfea65091de3ef00014063d2d649912","modified":1640156936815},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"90fe01c968696a9f791cb2b84fca621cbbb56f47","modified":1640156936815},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"d748951d9fbcd04dda839085af78b01b8fa04cba","modified":1640156936815},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"0551c5893d1589a3d17ce161e50ecb1d724cc6e8","modified":1640156936815},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"ea1ba40dd5954c2ed718a126336fb7f94da4e66f","modified":1640156936815},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"7a072589e6097dbe942783131964f2372fdf1eb6","modified":1640156936815},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"2c5fb77c448ce0a734040c8ce532b28fed688899","modified":1640156936815},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"978c397d0966eaf9e6e2afd13866f8f4900b509f","modified":1640156936815},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"4e629f510b73f998ab208b739c5bd7dcd168d1a7","modified":1640156936815},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"f59a9a0059d5261251bdd6de45aa97dd2d11e633","modified":1640156936815},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"b0488ceacde74af139d66c8db5cb36cc21737b9b","modified":1640156936815},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"6874adc2e276443f354bbe50d0072e9bec37243c","modified":1640156936815},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"e554549f0a0ae85362f0b0e8687981741f486f6b","modified":1640156936815},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"97fec1e814f88237862f4d800a35362b802f6625","modified":1640156936815},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"2cc49d3f6a6beb9f7bff93e292f88aa5681da1d0","modified":1640156936815},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"7c4152162a03aa8331a783df5695e4ebbb816a8c","modified":1640156936815},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9a881c031f463c486bd25248c2814fd09f97892b","modified":1640156936815},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"917e0e399e117217184ca63d3eb5c4843bcccf7b","modified":1640156936816},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"f168f5c669978f633abe118cdcc4a12cfc883c01","modified":1640156936816},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"6befe4c51b86d0c1de130beeecad9e28d6442713","modified":1640156936816},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"1c3f9d7efc3b9dfcfa8926a1132d0c44ffc7d4b2","modified":1640156936816},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"53ecae272e16223a436c497abbf25dd5f0fc4aaa","modified":1640156936816},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d0386ba6d8d63afc72b9673e8f3e89df6446ffc2","modified":1640156936816},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"21964fdd6d74ffbea519418bab65024aee5f3736","modified":1640156936816},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1640156936816},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"f741e85295ce15c70a6027ec15a542636dd5dcca","modified":1640156936816},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"86fee274a62f7f034547342930f445c47378eb55","modified":1640156936816},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"1756791581c0ec51cb03353a09dac4778d944349","modified":1640156936816},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1640156936816},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1640156936817},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"b1429e9f80ef6b9a77434819ffb87d90bdad25e8","modified":1640156936818},{"_id":"themes/butterfly/source/live2d-widget/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1640310387285},{"_id":"themes/butterfly/source/live2d-widget/.git/config","hash":"a9a17571a0e8f37ed433d87e34fbbfff6c66d85c","modified":1640310387286},{"_id":"themes/butterfly/source/live2d-widget/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1640310385310},{"_id":"themes/butterfly/source/live2d-widget/.git/index","hash":"43e832dd744625eeae3159b322a45f2044768dc4","modified":1640340072477},{"_id":"themes/butterfly/source/live2d-widget/.git/packed-refs","hash":"5403ae992357866442b2dc6469ddd8f7b7e2c23a","modified":1640310387283},{"_id":"themes/butterfly/source/live2d-widget/assets/screenshot-1.png","hash":"4bd4d97a1fcaa5deb3cea1c0a102a895a15af32f","modified":1640310387290},{"_id":"themes/butterfly/source/live2d-widget/demo/demo.html","hash":"fc20491be05a34e1944521df196d5992167a5c85","modified":1640310387294},{"_id":"themes/butterfly/source/live2d-widget/demo/login.html","hash":"4c2ed008b3f52e9cbea2d39260b928a500668aa5","modified":1640310387294},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1640156936811},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"7848ec58c6ec03243abf80a3b22b4dc10f3edf53","modified":1640156936811},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"e3bf847553515174f6085df982f0623e9783db7a","modified":1640156936811},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"ef1b2b5b980d6aeaa5d06b97d1afc9644b155a16","modified":1640156936811},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"bba9871f446c10ffcc8fa9023f5a2eb701a86bae","modified":1640156936811},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"400ce038548d6f9ddb486150c724c87b6923a88b","modified":1640156936811},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1640156936811},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1640156936811},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1640156936811},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1640156936811},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":1640156936811},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1640156936811},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"a111407fdcafcf1099e26ffa69786f8822c5d9fb","modified":1640156936811},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"2e52c64e89f16267596a8465841dd46f51820982","modified":1640156936811},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"c46a932257212f82e4a9974fbbc5de8878c8b383","modified":1640156936811},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0b7571919e8ad51285deda56a1868fccf8c563d7","modified":1640156936811},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"da9813f8dc0d388869c15413cf056012cfb69e1a","modified":1640156936811},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"bafb3d5710824caa59a56017afb058fd2b4eac65","modified":1640156936811},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1640156936811},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"16378d8646ea3f4ac99c18f0296dd85b13f9d775","modified":1640156936811},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"b871ea208e36398b4d668db9a9a0b61c79415381","modified":1640156936811},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"2b45fe09d5b591dca156b76dae99981f8d8e1c61","modified":1640156936811},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"36f3c603d2a2ecddaa6d2675a89d76ad94968f72","modified":1640156936811},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1640156936811},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f9b00ead54573ba6e6eb33481588af144aab648d","modified":1640156936812},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"a47d8f9f593091cc91192c0c49deaa2c0d2317fd","modified":1640156936812},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"3f3a3cd8bea2103dedd754f767aca5cb84d5f586","modified":1640156936812},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"b443d6b16baf3ea250041342cc0361a42a412b7f","modified":1640156936812},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"34088a15655704d12e9b1807b47b3f6a860c9eec","modified":1640156936812},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f6506ccfd1ce994b9e53aa95588d0b6dbad11411","modified":1640156936812},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"cb38ffe911023092a90a28f2ba8317a92b22cd0c","modified":1640156936812},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"59b4c26a827ace5a54855881d199977103ff6f50","modified":1640156936812},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"a2bc2601b7e0ae5caf1fc51a07390562d928620a","modified":1640156936812},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"d8f59e94eafc669c49349561dc5bbea3915aecb7","modified":1640156936812},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1640156936812},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"613280d61b8ab9612014ec016ae3d3698d36fd1a","modified":1640156936812},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1640156936812},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"309f51bc5302e72fc469d54c577fbcfe57fb07a8","modified":1640156936812},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1640156936812},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"006acc91ce25fc7c7d778ca043e970f57dc46b83","modified":1640156936812},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"8c0726fb8d9a497d2f900b0be2845efaa68e3d87","modified":1640156936814},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"89cbcc8e087788ecec18b5fa58710afacdb7d080","modified":1640156936814},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1640156936814},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"e0e7065124ef0d99f8322a47bc47838982e04ad0","modified":1640156936814},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1640156936814},{"_id":"themes/butterfly/source/live2d-widget/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1640310385310},{"_id":"themes/butterfly/source/live2d-widget/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1640310385310},{"_id":"themes/butterfly/source/live2d-widget/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1640310385310},{"_id":"themes/butterfly/source/live2d-widget/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1640310385310},{"_id":"themes/butterfly/source/live2d-widget/.git/hooks/pre-commit.sample","hash":"e6c9fe47f7506171be08ed90baaf91d49bc7fe0c","modified":1640310385310},{"_id":"themes/butterfly/source/live2d-widget/.git/hooks/pre-push.sample","hash":"503c3d2cd9066c2329ae84309c03a4c274f6d90e","modified":1640310385310},{"_id":"themes/butterfly/source/live2d-widget/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1640310385310},{"_id":"themes/butterfly/source/live2d-widget/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1640310385310},{"_id":"themes/butterfly/source/live2d-widget/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1640310385310},{"_id":"themes/butterfly/source/live2d-widget/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1640310385310},{"_id":"themes/butterfly/source/live2d-widget/.git/logs/HEAD","hash":"2ee8c3df05ef9f94319144385de2b2bc708a9f55","modified":1640310387286},{"_id":"themes/butterfly/source/live2d-widget/.git/objects/pack/pack-80e6de142c1bab8cd87977211a2727d175c1807a.idx","hash":"9e42d1ff36b4a989f3d83c7b44c699cbc6f93e36","modified":1640310387269},{"_id":"themes/butterfly/source/live2d-widget/.git/refs/heads/master","hash":"e2e031c5d5135b477ed9f57d434d46485f348d4c","modified":1640310387285},{"_id":"themes/butterfly/source/live2d-widget/.git/logs/refs/heads/master","hash":"2ee8c3df05ef9f94319144385de2b2bc708a9f55","modified":1640310387286},{"_id":"themes/butterfly/source/live2d-widget/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1640310387285},{"_id":"themes/butterfly/source/live2d-widget/.git/logs/refs/remotes/origin/HEAD","hash":"2ee8c3df05ef9f94319144385de2b2bc708a9f55","modified":1640310387285},{"_id":"themes/butterfly/source/live2d-widget/live2d.min.js","hash":"94383fb61de815c3f806ae3f11026bbcfe384082","modified":1640310387295},{"_id":"themes/butterfly/source/live2d-widget/assets/screenshot-3.png","hash":"f89c6fdf44008e7d3c7a1aafe65dc39b212edb6c","modified":1640310387293},{"_id":"themes/butterfly/source/live2d-widget/assets/screenshot-2.png","hash":"76b844653136184c573b3632e12296e008a7ff5c","modified":1640310387292},{"_id":"themes/butterfly/source/live2d-widget/.git/objects/pack/pack-80e6de142c1bab8cd87977211a2727d175c1807a.pack","hash":"7a10af1d0081fad44e9057afdf337244b98fa204","modified":1640310387269},{"_id":"public/search.xml","hash":"854c8b2df3bada3f67b20b8f2c39577fe2013bf9","modified":1640341299612},{"_id":"public/categories/index.html","hash":"7fc4c7c77392cee40b1b22264fe189837f4dc4e4","modified":1640341299612},{"_id":"public/link/index.html","hash":"d3758e4d3e55393892dd96dc510fab07f4d47d55","modified":1640341299612},{"_id":"public/tags/index.html","hash":"9aa6afda01cbd6ac4104bee56a357455f12d3b17","modified":1640341299612},{"_id":"public/2021/12/24/ArrayList/index.html","hash":"76444b216cdaf89672968f63dedbe66b9b93b836","modified":1640341299612},{"_id":"public/2021/12/24/HashMap/index.html","hash":"3454acd904c96d189b0c4b1cf5c4861530365234","modified":1640341299612},{"_id":"public/2021/12/24/LinkedList/index.html","hash":"75089142034c2eddbad8c9693e1125998f4035ee","modified":1640341299612},{"_id":"public/2021/12/23/hexo-electric-clock/index.html","hash":"4f62edcc227408f5f7e91077937f06c5d6e12135","modified":1640341299612},{"_id":"public/2021/12/22/Shell/index.html","hash":"602e9ae3688fadfa27f3dfda86fdbca36d2ad912","modified":1640341299612},{"_id":"public/archives/index.html","hash":"ce010baad1c051d45b99b683cbb93aba01d89819","modified":1640341299612},{"_id":"public/archives/2021/index.html","hash":"7575c2162cab5f88a9b30a773d02ae5de193a654","modified":1640341299612},{"_id":"public/archives/2021/12/index.html","hash":"63f0729d73689af1a4d244872c3e71f125daacae","modified":1640341299612},{"_id":"public/categories/集合/index.html","hash":"eec7b381f7de6bba16a6af6a4c9ff9d81c06276d","modified":1640341299612},{"_id":"public/categories/linux/index.html","hash":"57a38660b75ed80fec238da914cddce46d33d418","modified":1640341299612},{"_id":"public/categories/hexo/index.html","hash":"d374b361c791475ee1c4a1c5ded13715d6363b3f","modified":1640341299612},{"_id":"public/index.html","hash":"ed8fc72410778cfec31c5c6622c7ca5a70f89279","modified":1640341299612},{"_id":"public/tags/List/index.html","hash":"cf655f6f7431160ca28847ef47f2e9e1bbcbbb79","modified":1640341299612},{"_id":"public/tags/Map/index.html","hash":"c82e5d6af0786c084368f208991ee02c38c51445","modified":1640341299612},{"_id":"public/tags/linux/index.html","hash":"d9e75332eea5ff0faa741aa0ed2fd4e794f60e03","modified":1640341299612},{"_id":"public/tags/butterfly/index.html","hash":"9d302914758a48b8fe3b42e964f550af56af1501","modified":1640341299612},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1640341299612},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1640341299612},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1640341299612},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1640341299612},{"_id":"public/live2d-widget/LICENSE","hash":"31a3d460bb3c7d98845187c716a30db81c44b615","modified":1640341299612},{"_id":"public/live2d-widget/assets/screenshot-1.png","hash":"4bd4d97a1fcaa5deb3cea1c0a102a895a15af32f","modified":1640341299612},{"_id":"public/img/reward/1.jpg","hash":"a71c06809691e96bbc1df8e430dde6a3a113fa2d","modified":1640341299612},{"_id":"public/img/reward/2.png","hash":"ec7db2bbf5dd57eb728593352ceb349aad0b6450","modified":1640341299612},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1640341299612},{"_id":"public/js/utils.js","hash":"8319b59c26ce8cd2b0ae7d030c4912215148fa92","modified":1640341299612},{"_id":"public/live2d-widget/README.html","hash":"14bf6e59a0e12863572bb4e46ff3f82020a0155d","modified":1640341299612},{"_id":"public/live2d-widget/autoload.js","hash":"be79121ed4ed1cd6ee53ffa0c791362789a0699a","modified":1640341299612},{"_id":"public/live2d-widget/waifu-tips.js","hash":"f8bdc91fa1e51d46dc18e04174c63034d68299bf","modified":1640341299612},{"_id":"public/live2d-widget/waifu-tips.json","hash":"a3f9d4d832cd0948cd21385e7e8c62db377ba7d4","modified":1640341299612},{"_id":"public/live2d-widget/waifu.css","hash":"419e5c1eb38eb7a477a32cc62b48d701fcee930d","modified":1640341299612},{"_id":"public/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1640341299612},{"_id":"public/js/search/local-search.js","hash":"b1429e9f80ef6b9a77434819ffb87d90bdad25e8","modified":1640341299612},{"_id":"public/live2d-widget/demo/demo.html","hash":"fc20491be05a34e1944521df196d5992167a5c85","modified":1640341299612},{"_id":"public/live2d-widget/demo/login.html","hash":"4c2ed008b3f52e9cbea2d39260b928a500668aa5","modified":1640341299612},{"_id":"public/css/index.css","hash":"6ea646629ee7d95eaf771a2bf0e13035f556fef0","modified":1640341299612},{"_id":"public/js/main.js","hash":"b244f28124a46d7f1e8ef76ba6e925289691f93b","modified":1640341299612},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1640341299612},{"_id":"public/live2d-widget/live2d.min.js","hash":"94383fb61de815c3f806ae3f11026bbcfe384082","modified":1640341299612},{"_id":"public/live2d-widget/assets/screenshot-3.png","hash":"f89c6fdf44008e7d3c7a1aafe65dc39b212edb6c","modified":1640341299612},{"_id":"public/live2d-widget/assets/screenshot-2.png","hash":"76b844653136184c573b3632e12296e008a7ff5c","modified":1640341299612}],"Category":[{"name":"集合","_id":"ckxk8uw0f0004virjhdwgcq1v"},{"name":"linux","_id":"ckxk8uw10000hvirjduf23yfl"},{"name":"hexo","_id":"ckxk8uw13000mvirj6k1c5aur"}],"Data":[{"_id":"link","data":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}],"Page":[{"title":"我的分类","date":"2021-12-22T07:22:36.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 我的分类\ndate: 2021-12-22 15:22:36\ntype: categories\n---\n","updated":"2021-12-24T10:18:33.361Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckxk8uvzw0000virj9i49glod","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg3.png","excerpt":"","more":""},{"title":"我的链接","date":"2021-12-22T07:22:44.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: 我的链接\ndate: 2021-12-22 15:22:44\ntype: link\n---\n","updated":"2021-12-24T10:19:51.415Z","path":"link/index.html","comments":1,"layout":"page","_id":"ckxk8uw090002virjaxtg1syg","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg3.png","excerpt":"","more":""},{"title":"我的标签","date":"2021-12-22T07:22:26.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 我的标签\ndate: 2021-12-22 15:22:26\ntype: tags\n---\n","updated":"2021-12-24T10:19:56.433Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckxk8uw0k0006virjf3qc9t9m","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg2.png","excerpt":"","more":""}],"Post":[{"title":"ArrayList","date":"2021-12-23T16:00:00.000Z","description":"ArrayList集合笔记","cover":"https://s2.loli.net/2021/12/23/TNY612AUy38Dfk7.jpg","_content":"\n\n## ArrayList\n\n### 类图\n\n![类图](https://raw.githubusercontent.com/13068098071/picode/main/img/image-20211224105430699.png)\n\n`ArrayList`继承于 `AbstractList`，实现了 `List`, `RandomAccess`, `Cloneable`, `java.io.Serializable` 这些接口。\n\n- `RandomAccess`是一个标志接口，表明实现这个这个接口的 `List`集合是支持快速随机访问的\n- 实现 `Cloneable`接口并覆盖了方法`clone()`，能被克隆\n- 实现了java.io.Serializable 接口，这意味着`ArrayList`支持序列化，能通过序列化去传输\n\n### 源码分析\n\n#### 成员变量\n\n```java\nprivate int size;  // 实际元素个数\ntransient Object[] elementData; //真正保存元素的数组\nprivate static final int DEFAULT_CAPACITY = 10;//默认的初始容量大小\n```\n\n#### 构造方法\n\n无参数直接初始化、指定大小初始化、指定初始数据初始化\n\n```java\n//1、无参数直接初始化，数组大小为空\npublic ArrayList() {\n    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n}\n//2、指定初始数据初始化\npublic ArrayList(Collection<? extends E> c){\n    //elementData是保存数组的容器，默认为null\n    elementData=c.toArray();\n    //如果给定的集合（c)数据有值\n    if((size=elementData.length)!=0){\n      \t//c.toArray might(incorrectly)not return Object[](see 6260652)\n      \t//如果集合元素类型不是Object类型，我们会转成Object\n\t    if(elementData.getClass()!=Object[].class){\n\t        elementData=Arrays.copyOf(elementData,size,Object].class);\n\t    }\n  \t}else{\n    \t//给定集合（c)无值，则默认空数组\n    \tthis.elementData=EMPTY_ELEMENTDATA\n  \t}\n}\n//3、指定初始容量\npublic ArrayList(int initialCapacity) {\n\t//指定的初始容量大于0，将elementData初始化为指定大小的数组\n   if (initialCapacity > 0) {\n        this.elementData = new Object[initialCapacity];\n    } else if (initialCapacity == 0) {\n    \t//否则初始化成一个空数组\n        this.elementData = EMPTY_ELEMENTDATA;\n    }\n}\n```\n\n>补充\n\n- `ArrayList`无参构造器初始化时，默认大小是空数组，并不是大家常说的10,10是在第一次`add`的时候扩容的数组值\n\n- 使用方式二进行创建对象时，如果入参容器保存的对象不是`Object`，则转换为`Object`\n\n- DEFAULTCAPACITY_EMPTY_ELEMENTDATA`和`EMPTY_ELEMENTDATA是啥：它其实是定义在成员变量的两个空数组\n\n  ```java\n  private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\n  private static final Object[] EMPTY_ELEMENTDATA = {};\n  ```\n\n#### 新增和扩容实现\n\n新增时就是给数组中添加元素，主要分为两步走：\n\n- 判断是否需要扩容，如果需要扩容执行扩容操作\n- 直接赋值\n\n>新增源码\n\n```java\npublic boolean add(E e) {\n\t//确保数组大小是否足够，不够执行扩容，size为当前数组元素个数，判断size+1是因为后面还要size++\n    ensureCapacityInternal(size + 1);  //1\n    elementData[size++] = e;//2\n    return true;\n}\n```\n\n>扩容部分源码\n\n```java\nprivate void ensureCapacityInternal(int minCapacity) {\n\t//先调用calculateCapacity计算容量\n  \tensureExplicitCapacity(calculateCapacity(elementData, minCapacity));\n}\nprivate static int calculateCapacity(Object[] elementData, int minCapacity) {\n  //如果当前数组还是个空数组，也就是他用过无参构造去初始化的\n  //那么直接返回DEFAULT_CAPACITY，即10\n  if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n        return Math.max(DEFAULT_CAPACITY, minCapacity);\n    }\n    return minCapacity;\n}\n\nprivate void ensureExplicitCapacity(int minCapacity) {\n    modCount++;\n\n    // 如果当前容量已经大于当前数组的长度了，说明需要去扩容了\n    if (minCapacity - elementData.length > 0)\n        //扩容\n        grow(minCapacity);\n}\n\nprivate void grow(int minCapacity){\n  int oldCapacity = elementData.length;\n  //oldCapacity>>1是把oldCapacity除以2的意思\n  int newCapacity=oldCapacity+(oldCapacity>>1);\n  //如果扩容后的值<我们的期望值，扩容后的值就等于我们的期望值\n  if(newCapacity-minCapacity<0)\n    newCapacity = minCapacity;\n  //如果扩容后的值>jvm所能分配的数组的最大值，那么就用Integer的最大值\n  if(newCapacity-MAX_ARRAY_SIZE>0)\n    elementData=Arrays.copyOf(elementData,newCapacity);\n}\n```\n\n>注意\n\n- 新增时，没有对值进行校验，所以新增值可以为`null`，且没有做重复值判断，所以元素可以`重复`\n- ArrayList中的数组的最大值是`Integer.MAX_VALUE`，超过这个值，`JVM`就不会给数组分配内存空间了\n- 扩容是原来容量大小+容量大小的一半，简单说就是扩容后的大小是原来容量的1.5倍\n- 扩容完成之后，就是简单的赋值了，赋值时并没有加锁，所以是线程`不安全`的\n\n#### 扩容的本质\n\n在`grow`方法的最后，扩容是通过`Arrays.copyOf(elementData,newCapacity);`这行代码实现的。这个方法实际上调用的方法是我们经常使用的`System.arraycopy`：\n\n```java\n/**\n*@param src 被拷贝的数组\n*@param srcPos 从数组那里开始\n*@param dest 目标数组\n*@param destPos从目标数组那个索引位置开始拷贝\n*@param length 拷贝的长度\n*此方法是没有返回值的，通过dest的引用进行传值\n*/\npublic static native void arraycopy(Object src, int srcPos,Object dest, int destPos,int length);\n```\n\n这个方法是一个native方法，虽然不能看到方法内部的具体实现，但通过参数也可以管中窥豹。这个方法会移动元素。所以说数组如果要扩容，需要重新分配一块更大的空间，再把数据全部复制过去，时间复杂度 O(N)；而且你如果想在数组中间进行插入和删除，每次必须搬移后面的所有数据以保持连续，时间复杂度 O(N)。由于数组又是一块连续的内存空间，能够根据索引快速访问元素。\n上面也就解释了一开始那个问题：ArrayList为什么插入慢，查询快。\n\n#### 删除\n\n`ArrayList`有多种删除方法，这里以根据值删除的方式进行说明(其他原理类似)\n\n```java\npublic boolean remove(Object o) {\n  //如果要删除的值是null,删除第一个是null的值\n  if(o==null){\n    for(int index=0;index<size;index++)\n      if(elementData[index]==null){\n        fastRemove(index)\n        return true;\n      }\n  }else{\n    //如果要删除的值不为null,找到第一个和要删除的值相等的删除\n    for(int index=0;index<size;index++)\n      //这里是根据 equals来判断值相等的，相等后再根据索引位置进行删除\n      //所以根据对象删除时，一般来说，如果你确定要删除的是某一类的业务对象，则需要重写equals\n      if(o.equals(elementData[index]){\n        fastRemove(index)\n        return true;\n      }\n  }\n  return false\n}\n```\n\n核心其实是`fastRemove`方法\n\n```java\nprivate void fastRemove(int index){\n  //记录数组的结构要发生变动了\n  nodCount++;\n  //numMoved表示删除index位置的元素后，需要从index后移动多少个元素到前面去\n  //减1的原因，是因为size从1开始算起，index从0开始算起\n  int numMoved=size-index-1;\n  if(numMoved>0)\n    //从index+1位置开始被拷贝，拷贝的起始位置是index,长度是numMoved\n    System.arraycopy(elementData, index+1, elementData, index, numMoved);\n  //数组最后一个位置赋值null,帮助GC(没有引用则自动回收了)\n  elementData[--size] = null;\n}\n```\n\n从源码中，我们可以看出，某一个元素被删除后，为了维护数组结构，我们都会把数组后面的元素往前移动，同时释放最后一个引用，便于回收。\n\n### 迭代器iterator\n\n在用 for 遍历集合的时候是不可以对集合进行 remove操作的，因为 remove 操作会改变集合的大小。从而容易造成结果不准确甚至数组下标越界，更严重者还会抛出 ConcurrentModificationException。\n\n#### 并发修改异常\n\n```java\npackage com.ma.collection.arraylist;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author 马志超\n * @title: TestArrayList01\n * @projectName login\n * @description: TODO\n * @date 2021/12/24 11:18\n */\npublic class TestArrayList01 {\n    public static void main(String[] args) {\n        List<String> list = new ArrayList<>();\n        list.add(\"a\");\n        list.add(\"b\");\n        list.add(\"c\");\n        list.add(\"d\");\n        list.add(\"e\");\n        for (String s : list) {\n            if(\"a\".equals(s)){\n                list.remove(s);\n            }\n        }\n    }\n}\n```\n\n![并发修改异常](https://raw.githubusercontent.com/13068098071/picode/main/img/image-20211224112032656.png)\n\n产生这样的异常的原因是：对集合元素进行一次修改时，对应的modCount的值就会加一，导致expectedModCount 与 modCount 不相等，然后抛出ConcurrentModificationException 。调用迭代器的删除方法，会将修改后的modCount的值赋值给expectedModCount\n\n#### 迭代器的源码\n\n```java\nprivate class Itr implements Iterator<E> {\n\tint cursor;       // 代表下一个要访问的元素下标\n\tint lastRet = -1; // 代表上一个要访问的元素下标\n\tint expectedModCount = modCount; //代表对 ArrayList 修改次数的期望值，初始值为 modCount\n\t\n    //如果下一个元素的下标等于集合的大小 ，就证明到最后了。\n\tpublic boolean hasNext() {\n\t\treturn cursor != size;\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic E next() {\n        //首先判断 expectedModCount 和 modCount 是否相等\n\t\tcheckForComodification();\n\t\tint i = cursor;\n        //看是否超过集合大小和数组长度\n\t\tif (i >= size)\n\t\t\tthrow new NoSuchElementException();\n\t\tObject[] elementData = ArrayList.this.elementData;\n\t\tif (i >= elementData.length)\n\t\t\tthrow new ConcurrentModificationException();\n        //将 cursor 自增 1\n\t\tcursor = i + 1;\n\t\treturn (E) elementData[lastRet = i];\n\t}\n\n\tpublic void remove() {\n\t\tif (lastRet < 0)\n\t\t\tthrow new IllegalStateException();\n\t\tcheckForComodification();\n\n\t\ttry {\n\t\t\tArrayList.this.remove(lastRet);\n\t\t\tcursor = lastRet;\n\t\t\tlastRet = -1;\n\t\t\texpectedModCount = modCount;\n\t\t} catch (IndexOutOfBoundsException ex) {\n\t\t\tthrow new ConcurrentModificationException();\n\t\t}\n\t}\n\n\tfinal void checkForComodification() {\n\t\tif (modCount != expectedModCount)\n\t\t\tthrow new ConcurrentModificationException();\n\t}\n}\n```\n\n>hasNext\n\n如果下一个元素的下标等于集合的大小 ，就证明到最后了\n\n>next\n\n首先判断 `expectedModCount` 和 `modCount` 是否相等。然后对 `cursor` 进行判断，看是否超过集合大小和数组长度。然后将 `cursor` 赋值给 `lastRet` ，并返回下标为 lastRet 的元素。最后将 cursor 自增 1。开始时，`cursor = 0，lastRet = -1`；每调用一次 next 方法， cursor 和 lastRet 都会自增 1\n\n>remove\n\n首先会判断 `lastRet` 的值是否小于 0，然后在检查 `expectedModCount` 和 `modCount` 是否相等。接下来是关键，直接调用 ArrayList 的 `remove` 方法删除下标为 `lastRet` 的元素。然后将 `lastRet` 赋值给 cursor ，将 `lastRet` 重新赋值为 -1，并将 `modCount` 重新赋值给 `expectedModCount`\n\n>异常解决\n\n```java\nIterator<String> iterator = list.iterator();\nwhile (iterator.hasNext()) {\n    String value = iterator.next();\n    if (\"a\".equals(value)) {\n        iterator.remove();\n    }\n}\n```\n\n直接调用 iterator.remove() 即可。因为在该方法中增加了 expectedModCount = modCount 操作\n\n>弊端\n\n- 只能进行remove操作，add、clear 等 Itr 中没有\n- 调用 remove 之前必须先调用 next。因为 remove 开始就对 lastRet 做了校验。而 lastRet 初始化时为 -1\n- next 之后只可以调用一次 remove。因为 remove 会将 lastRet 重新初始化为 -1\n\n### 总结\n\n- ArrayList 底层基于数组实现容量大小动态可变。\n-  扩容机制为首先扩容为原始容量的 1.5 倍。如果1.5倍太小的话，则将我们所需的容量大小赋值给 newCapacity，如果1.5倍太大或者我们需要的容量太大，那就直接拿 `newCapacity = (minCapacity > MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE` 来扩容。 扩容之后是通过数组的拷贝来确保元素的准确性的，所以尽可能减少扩容操作。 \n- ArrayList 的最大存储能力：Integer.MAX_VALUE。 \n- size 为集合中存储的元素的个数。\n- elementData.length 为数组长度，表示最多可以存储多少个元素。 \n- 如果需要边遍历边 remove ，必须使用 iterator。且 remove 之前必须先 next，next 之后只能用一次 remove。","source":"_posts/ArrayList.md","raw":"---\ntitle: ArrayList\ndate: 2021-12-24\ndescription: ArrayList集合笔记\ncover: https://s2.loli.net/2021/12/23/TNY612AUy38Dfk7.jpg\ntags: List\ncategories: 集合\n---\n\n\n## ArrayList\n\n### 类图\n\n![类图](https://raw.githubusercontent.com/13068098071/picode/main/img/image-20211224105430699.png)\n\n`ArrayList`继承于 `AbstractList`，实现了 `List`, `RandomAccess`, `Cloneable`, `java.io.Serializable` 这些接口。\n\n- `RandomAccess`是一个标志接口，表明实现这个这个接口的 `List`集合是支持快速随机访问的\n- 实现 `Cloneable`接口并覆盖了方法`clone()`，能被克隆\n- 实现了java.io.Serializable 接口，这意味着`ArrayList`支持序列化，能通过序列化去传输\n\n### 源码分析\n\n#### 成员变量\n\n```java\nprivate int size;  // 实际元素个数\ntransient Object[] elementData; //真正保存元素的数组\nprivate static final int DEFAULT_CAPACITY = 10;//默认的初始容量大小\n```\n\n#### 构造方法\n\n无参数直接初始化、指定大小初始化、指定初始数据初始化\n\n```java\n//1、无参数直接初始化，数组大小为空\npublic ArrayList() {\n    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n}\n//2、指定初始数据初始化\npublic ArrayList(Collection<? extends E> c){\n    //elementData是保存数组的容器，默认为null\n    elementData=c.toArray();\n    //如果给定的集合（c)数据有值\n    if((size=elementData.length)!=0){\n      \t//c.toArray might(incorrectly)not return Object[](see 6260652)\n      \t//如果集合元素类型不是Object类型，我们会转成Object\n\t    if(elementData.getClass()!=Object[].class){\n\t        elementData=Arrays.copyOf(elementData,size,Object].class);\n\t    }\n  \t}else{\n    \t//给定集合（c)无值，则默认空数组\n    \tthis.elementData=EMPTY_ELEMENTDATA\n  \t}\n}\n//3、指定初始容量\npublic ArrayList(int initialCapacity) {\n\t//指定的初始容量大于0，将elementData初始化为指定大小的数组\n   if (initialCapacity > 0) {\n        this.elementData = new Object[initialCapacity];\n    } else if (initialCapacity == 0) {\n    \t//否则初始化成一个空数组\n        this.elementData = EMPTY_ELEMENTDATA;\n    }\n}\n```\n\n>补充\n\n- `ArrayList`无参构造器初始化时，默认大小是空数组，并不是大家常说的10,10是在第一次`add`的时候扩容的数组值\n\n- 使用方式二进行创建对象时，如果入参容器保存的对象不是`Object`，则转换为`Object`\n\n- DEFAULTCAPACITY_EMPTY_ELEMENTDATA`和`EMPTY_ELEMENTDATA是啥：它其实是定义在成员变量的两个空数组\n\n  ```java\n  private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\n  private static final Object[] EMPTY_ELEMENTDATA = {};\n  ```\n\n#### 新增和扩容实现\n\n新增时就是给数组中添加元素，主要分为两步走：\n\n- 判断是否需要扩容，如果需要扩容执行扩容操作\n- 直接赋值\n\n>新增源码\n\n```java\npublic boolean add(E e) {\n\t//确保数组大小是否足够，不够执行扩容，size为当前数组元素个数，判断size+1是因为后面还要size++\n    ensureCapacityInternal(size + 1);  //1\n    elementData[size++] = e;//2\n    return true;\n}\n```\n\n>扩容部分源码\n\n```java\nprivate void ensureCapacityInternal(int minCapacity) {\n\t//先调用calculateCapacity计算容量\n  \tensureExplicitCapacity(calculateCapacity(elementData, minCapacity));\n}\nprivate static int calculateCapacity(Object[] elementData, int minCapacity) {\n  //如果当前数组还是个空数组，也就是他用过无参构造去初始化的\n  //那么直接返回DEFAULT_CAPACITY，即10\n  if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n        return Math.max(DEFAULT_CAPACITY, minCapacity);\n    }\n    return minCapacity;\n}\n\nprivate void ensureExplicitCapacity(int minCapacity) {\n    modCount++;\n\n    // 如果当前容量已经大于当前数组的长度了，说明需要去扩容了\n    if (minCapacity - elementData.length > 0)\n        //扩容\n        grow(minCapacity);\n}\n\nprivate void grow(int minCapacity){\n  int oldCapacity = elementData.length;\n  //oldCapacity>>1是把oldCapacity除以2的意思\n  int newCapacity=oldCapacity+(oldCapacity>>1);\n  //如果扩容后的值<我们的期望值，扩容后的值就等于我们的期望值\n  if(newCapacity-minCapacity<0)\n    newCapacity = minCapacity;\n  //如果扩容后的值>jvm所能分配的数组的最大值，那么就用Integer的最大值\n  if(newCapacity-MAX_ARRAY_SIZE>0)\n    elementData=Arrays.copyOf(elementData,newCapacity);\n}\n```\n\n>注意\n\n- 新增时，没有对值进行校验，所以新增值可以为`null`，且没有做重复值判断，所以元素可以`重复`\n- ArrayList中的数组的最大值是`Integer.MAX_VALUE`，超过这个值，`JVM`就不会给数组分配内存空间了\n- 扩容是原来容量大小+容量大小的一半，简单说就是扩容后的大小是原来容量的1.5倍\n- 扩容完成之后，就是简单的赋值了，赋值时并没有加锁，所以是线程`不安全`的\n\n#### 扩容的本质\n\n在`grow`方法的最后，扩容是通过`Arrays.copyOf(elementData,newCapacity);`这行代码实现的。这个方法实际上调用的方法是我们经常使用的`System.arraycopy`：\n\n```java\n/**\n*@param src 被拷贝的数组\n*@param srcPos 从数组那里开始\n*@param dest 目标数组\n*@param destPos从目标数组那个索引位置开始拷贝\n*@param length 拷贝的长度\n*此方法是没有返回值的，通过dest的引用进行传值\n*/\npublic static native void arraycopy(Object src, int srcPos,Object dest, int destPos,int length);\n```\n\n这个方法是一个native方法，虽然不能看到方法内部的具体实现，但通过参数也可以管中窥豹。这个方法会移动元素。所以说数组如果要扩容，需要重新分配一块更大的空间，再把数据全部复制过去，时间复杂度 O(N)；而且你如果想在数组中间进行插入和删除，每次必须搬移后面的所有数据以保持连续，时间复杂度 O(N)。由于数组又是一块连续的内存空间，能够根据索引快速访问元素。\n上面也就解释了一开始那个问题：ArrayList为什么插入慢，查询快。\n\n#### 删除\n\n`ArrayList`有多种删除方法，这里以根据值删除的方式进行说明(其他原理类似)\n\n```java\npublic boolean remove(Object o) {\n  //如果要删除的值是null,删除第一个是null的值\n  if(o==null){\n    for(int index=0;index<size;index++)\n      if(elementData[index]==null){\n        fastRemove(index)\n        return true;\n      }\n  }else{\n    //如果要删除的值不为null,找到第一个和要删除的值相等的删除\n    for(int index=0;index<size;index++)\n      //这里是根据 equals来判断值相等的，相等后再根据索引位置进行删除\n      //所以根据对象删除时，一般来说，如果你确定要删除的是某一类的业务对象，则需要重写equals\n      if(o.equals(elementData[index]){\n        fastRemove(index)\n        return true;\n      }\n  }\n  return false\n}\n```\n\n核心其实是`fastRemove`方法\n\n```java\nprivate void fastRemove(int index){\n  //记录数组的结构要发生变动了\n  nodCount++;\n  //numMoved表示删除index位置的元素后，需要从index后移动多少个元素到前面去\n  //减1的原因，是因为size从1开始算起，index从0开始算起\n  int numMoved=size-index-1;\n  if(numMoved>0)\n    //从index+1位置开始被拷贝，拷贝的起始位置是index,长度是numMoved\n    System.arraycopy(elementData, index+1, elementData, index, numMoved);\n  //数组最后一个位置赋值null,帮助GC(没有引用则自动回收了)\n  elementData[--size] = null;\n}\n```\n\n从源码中，我们可以看出，某一个元素被删除后，为了维护数组结构，我们都会把数组后面的元素往前移动，同时释放最后一个引用，便于回收。\n\n### 迭代器iterator\n\n在用 for 遍历集合的时候是不可以对集合进行 remove操作的，因为 remove 操作会改变集合的大小。从而容易造成结果不准确甚至数组下标越界，更严重者还会抛出 ConcurrentModificationException。\n\n#### 并发修改异常\n\n```java\npackage com.ma.collection.arraylist;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author 马志超\n * @title: TestArrayList01\n * @projectName login\n * @description: TODO\n * @date 2021/12/24 11:18\n */\npublic class TestArrayList01 {\n    public static void main(String[] args) {\n        List<String> list = new ArrayList<>();\n        list.add(\"a\");\n        list.add(\"b\");\n        list.add(\"c\");\n        list.add(\"d\");\n        list.add(\"e\");\n        for (String s : list) {\n            if(\"a\".equals(s)){\n                list.remove(s);\n            }\n        }\n    }\n}\n```\n\n![并发修改异常](https://raw.githubusercontent.com/13068098071/picode/main/img/image-20211224112032656.png)\n\n产生这样的异常的原因是：对集合元素进行一次修改时，对应的modCount的值就会加一，导致expectedModCount 与 modCount 不相等，然后抛出ConcurrentModificationException 。调用迭代器的删除方法，会将修改后的modCount的值赋值给expectedModCount\n\n#### 迭代器的源码\n\n```java\nprivate class Itr implements Iterator<E> {\n\tint cursor;       // 代表下一个要访问的元素下标\n\tint lastRet = -1; // 代表上一个要访问的元素下标\n\tint expectedModCount = modCount; //代表对 ArrayList 修改次数的期望值，初始值为 modCount\n\t\n    //如果下一个元素的下标等于集合的大小 ，就证明到最后了。\n\tpublic boolean hasNext() {\n\t\treturn cursor != size;\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic E next() {\n        //首先判断 expectedModCount 和 modCount 是否相等\n\t\tcheckForComodification();\n\t\tint i = cursor;\n        //看是否超过集合大小和数组长度\n\t\tif (i >= size)\n\t\t\tthrow new NoSuchElementException();\n\t\tObject[] elementData = ArrayList.this.elementData;\n\t\tif (i >= elementData.length)\n\t\t\tthrow new ConcurrentModificationException();\n        //将 cursor 自增 1\n\t\tcursor = i + 1;\n\t\treturn (E) elementData[lastRet = i];\n\t}\n\n\tpublic void remove() {\n\t\tif (lastRet < 0)\n\t\t\tthrow new IllegalStateException();\n\t\tcheckForComodification();\n\n\t\ttry {\n\t\t\tArrayList.this.remove(lastRet);\n\t\t\tcursor = lastRet;\n\t\t\tlastRet = -1;\n\t\t\texpectedModCount = modCount;\n\t\t} catch (IndexOutOfBoundsException ex) {\n\t\t\tthrow new ConcurrentModificationException();\n\t\t}\n\t}\n\n\tfinal void checkForComodification() {\n\t\tif (modCount != expectedModCount)\n\t\t\tthrow new ConcurrentModificationException();\n\t}\n}\n```\n\n>hasNext\n\n如果下一个元素的下标等于集合的大小 ，就证明到最后了\n\n>next\n\n首先判断 `expectedModCount` 和 `modCount` 是否相等。然后对 `cursor` 进行判断，看是否超过集合大小和数组长度。然后将 `cursor` 赋值给 `lastRet` ，并返回下标为 lastRet 的元素。最后将 cursor 自增 1。开始时，`cursor = 0，lastRet = -1`；每调用一次 next 方法， cursor 和 lastRet 都会自增 1\n\n>remove\n\n首先会判断 `lastRet` 的值是否小于 0，然后在检查 `expectedModCount` 和 `modCount` 是否相等。接下来是关键，直接调用 ArrayList 的 `remove` 方法删除下标为 `lastRet` 的元素。然后将 `lastRet` 赋值给 cursor ，将 `lastRet` 重新赋值为 -1，并将 `modCount` 重新赋值给 `expectedModCount`\n\n>异常解决\n\n```java\nIterator<String> iterator = list.iterator();\nwhile (iterator.hasNext()) {\n    String value = iterator.next();\n    if (\"a\".equals(value)) {\n        iterator.remove();\n    }\n}\n```\n\n直接调用 iterator.remove() 即可。因为在该方法中增加了 expectedModCount = modCount 操作\n\n>弊端\n\n- 只能进行remove操作，add、clear 等 Itr 中没有\n- 调用 remove 之前必须先调用 next。因为 remove 开始就对 lastRet 做了校验。而 lastRet 初始化时为 -1\n- next 之后只可以调用一次 remove。因为 remove 会将 lastRet 重新初始化为 -1\n\n### 总结\n\n- ArrayList 底层基于数组实现容量大小动态可变。\n-  扩容机制为首先扩容为原始容量的 1.5 倍。如果1.5倍太小的话，则将我们所需的容量大小赋值给 newCapacity，如果1.5倍太大或者我们需要的容量太大，那就直接拿 `newCapacity = (minCapacity > MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE` 来扩容。 扩容之后是通过数组的拷贝来确保元素的准确性的，所以尽可能减少扩容操作。 \n- ArrayList 的最大存储能力：Integer.MAX_VALUE。 \n- size 为集合中存储的元素的个数。\n- elementData.length 为数组长度，表示最多可以存储多少个元素。 \n- 如果需要边遍历边 remove ，必须使用 iterator。且 remove 之前必须先 next，next 之后只能用一次 remove。","slug":"ArrayList","published":1,"updated":"2021-12-24T09:25:44.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxk8uw020001virj061e2ap3","content":"<h2 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h2><h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"https://raw.githubusercontent.com/13068098071/picode/main/img/image-20211224105430699.png\" alt=\"类图\"></p>\n<p><code>ArrayList</code>继承于 <code>AbstractList</code>，实现了 <code>List</code>, <code>RandomAccess</code>, <code>Cloneable</code>, <code>java.io.Serializable</code> 这些接口。</p>\n<ul>\n<li><code>RandomAccess</code>是一个标志接口，表明实现这个这个接口的 <code>List</code>集合是支持快速随机访问的</li>\n<li>实现 <code>Cloneable</code>接口并覆盖了方法<code>clone()</code>，能被克隆</li>\n<li>实现了java.io.Serializable 接口，这意味着<code>ArrayList</code>支持序列化，能通过序列化去传输</li>\n</ul>\n<h3 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h3><h4 id=\"成员变量\"><a href=\"#成员变量\" class=\"headerlink\" title=\"成员变量\"></a>成员变量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;  <span class=\"comment\">// 实际元素个数</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> Object[] elementData; <span class=\"comment\">//真正保存元素的数组</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAPACITY = <span class=\"number\">10</span>;<span class=\"comment\">//默认的初始容量大小</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h4><p>无参数直接初始化、指定大小初始化、指定初始数据初始化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1、无参数直接初始化，数组大小为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2、指定初始数据初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//elementData是保存数组的容器，默认为null</span></span><br><span class=\"line\">    elementData=c.toArray();</span><br><span class=\"line\">    <span class=\"comment\">//如果给定的集合（c)数据有值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>((size=elementData.length)!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      \t<span class=\"comment\">//c.toArray might(incorrectly)not return Object[](see 6260652)</span></span><br><span class=\"line\">      \t<span class=\"comment\">//如果集合元素类型不是Object类型，我们会转成Object</span></span><br><span class=\"line\">\t    <span class=\"keyword\">if</span>(elementData.getClass()!=Object[].class)&#123;</span><br><span class=\"line\">\t        elementData=Arrays.copyOf(elementData,size,Object].class);</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">  \t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//给定集合（c)无值，则默认空数组</span></span><br><span class=\"line\">    \t<span class=\"keyword\">this</span>.elementData=EMPTY_ELEMENTDATA</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//3、指定初始容量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//指定的初始容量大于0，将elementData初始化为指定大小的数组</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (initialCapacity &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.elementData = <span class=\"keyword\">new</span> Object[initialCapacity];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (initialCapacity == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//否则初始化成一个空数组</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>补充</p>\n</blockquote>\n<ul>\n<li><p><code>ArrayList</code>无参构造器初始化时，默认大小是空数组，并不是大家常说的10,10是在第一次<code>add</code>的时候扩容的数组值</p>\n</li>\n<li><p>使用方式二进行创建对象时，如果入参容器保存的对象不是<code>Object</code>，则转换为<code>Object</code></p>\n</li>\n<li><p>DEFAULTCAPACITY_EMPTY_ELEMENTDATA<code>和</code>EMPTY_ELEMENTDATA是啥：它其实是定义在成员变量的两个空数组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"新增和扩容实现\"><a href=\"#新增和扩容实现\" class=\"headerlink\" title=\"新增和扩容实现\"></a>新增和扩容实现</h4><p>新增时就是给数组中添加元素，主要分为两步走：</p>\n<ul>\n<li>判断是否需要扩容，如果需要扩容执行扩容操作</li>\n<li>直接赋值</li>\n</ul>\n<blockquote>\n<p>新增源码</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//确保数组大小是否足够，不够执行扩容，size为当前数组元素个数，判断size+1是因为后面还要size++</span></span><br><span class=\"line\">    ensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">//1</span></span><br><span class=\"line\">    elementData[size++] = e;<span class=\"comment\">//2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>扩容部分源码</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//先调用calculateCapacity计算容量</span></span><br><span class=\"line\">  \tensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calculateCapacity</span><span class=\"params\">(Object[] elementData, <span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//如果当前数组还是个空数组，也就是他用过无参构造去初始化的</span></span><br><span class=\"line\">  <span class=\"comment\">//那么直接返回DEFAULT_CAPACITY，即10</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> minCapacity;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureExplicitCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果当前容量已经大于当前数组的长度了，说明需要去扩容了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\">//扩容</span></span><br><span class=\"line\">        grow(minCapacity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> oldCapacity = elementData.length;</span><br><span class=\"line\">  <span class=\"comment\">//oldCapacity&gt;&gt;1是把oldCapacity除以2的意思</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> newCapacity=oldCapacity+(oldCapacity&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"comment\">//如果扩容后的值&lt;我们的期望值，扩容后的值就等于我们的期望值</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(newCapacity-minCapacity&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">    newCapacity = minCapacity;</span><br><span class=\"line\">  <span class=\"comment\">//如果扩容后的值&gt;jvm所能分配的数组的最大值，那么就用Integer的最大值</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(newCapacity-MAX_ARRAY_SIZE&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">    elementData=Arrays.copyOf(elementData,newCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意</p>\n</blockquote>\n<ul>\n<li>新增时，没有对值进行校验，所以新增值可以为<code>null</code>，且没有做重复值判断，所以元素可以<code>重复</code></li>\n<li>ArrayList中的数组的最大值是<code>Integer.MAX_VALUE</code>，超过这个值，<code>JVM</code>就不会给数组分配内存空间了</li>\n<li>扩容是原来容量大小+容量大小的一半，简单说就是扩容后的大小是原来容量的1.5倍</li>\n<li>扩容完成之后，就是简单的赋值了，赋值时并没有加锁，所以是线程<code>不安全</code>的</li>\n</ul>\n<h4 id=\"扩容的本质\"><a href=\"#扩容的本质\" class=\"headerlink\" title=\"扩容的本质\"></a>扩容的本质</h4><p>在<code>grow</code>方法的最后，扩容是通过<code>Arrays.copyOf(elementData,newCapacity);</code>这行代码实现的。这个方法实际上调用的方法是我们经常使用的<code>System.arraycopy</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*<span class=\"doctag\">@param</span> src 被拷贝的数组</span></span><br><span class=\"line\"><span class=\"comment\">*<span class=\"doctag\">@param</span> srcPos 从数组那里开始</span></span><br><span class=\"line\"><span class=\"comment\">*<span class=\"doctag\">@param</span> dest 目标数组</span></span><br><span class=\"line\"><span class=\"comment\">*<span class=\"doctag\">@param</span> destPos从目标数组那个索引位置开始拷贝</span></span><br><span class=\"line\"><span class=\"comment\">*<span class=\"doctag\">@param</span> length 拷贝的长度</span></span><br><span class=\"line\"><span class=\"comment\">*此方法是没有返回值的，通过dest的引用进行传值</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">arraycopy</span><span class=\"params\">(Object src, <span class=\"keyword\">int</span> srcPos,Object dest, <span class=\"keyword\">int</span> destPos,<span class=\"keyword\">int</span> length)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法是一个native方法，虽然不能看到方法内部的具体实现，但通过参数也可以管中窥豹。这个方法会移动元素。所以说数组如果要扩容，需要重新分配一块更大的空间，再把数据全部复制过去，时间复杂度 O(N)；而且你如果想在数组中间进行插入和删除，每次必须搬移后面的所有数据以保持连续，时间复杂度 O(N)。由于数组又是一块连续的内存空间，能够根据索引快速访问元素。<br>上面也就解释了一开始那个问题：ArrayList为什么插入慢，查询快。</p>\n<h4 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h4><p><code>ArrayList</code>有多种删除方法，这里以根据值删除的方式进行说明(其他原理类似)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//如果要删除的值是null,删除第一个是null的值</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(o==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> index=<span class=\"number\">0</span>;index&lt;size;index++)</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(elementData[index]==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        fastRemove(index)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果要删除的值不为null,找到第一个和要删除的值相等的删除</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> index=<span class=\"number\">0</span>;index&lt;size;index++)</span><br><span class=\"line\">      <span class=\"comment\">//这里是根据 equals来判断值相等的，相等后再根据索引位置进行删除</span></span><br><span class=\"line\">      <span class=\"comment\">//所以根据对象删除时，一般来说，如果你确定要删除的是某一类的业务对象，则需要重写equals</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(o.equals(elementData[index])&#123;</span><br><span class=\"line\">        fastRemove(index)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>核心其实是<code>fastRemove</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">fastRemove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//记录数组的结构要发生变动了</span></span><br><span class=\"line\">  nodCount++;</span><br><span class=\"line\">  <span class=\"comment\">//numMoved表示删除index位置的元素后，需要从index后移动多少个元素到前面去</span></span><br><span class=\"line\">  <span class=\"comment\">//减1的原因，是因为size从1开始算起，index从0开始算起</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> numMoved=size-index-<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(numMoved&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"comment\">//从index+1位置开始被拷贝，拷贝的起始位置是index,长度是numMoved</span></span><br><span class=\"line\">    System.arraycopy(elementData, index+<span class=\"number\">1</span>, elementData, index, numMoved);</span><br><span class=\"line\">  <span class=\"comment\">//数组最后一个位置赋值null,帮助GC(没有引用则自动回收了)</span></span><br><span class=\"line\">  elementData[--size] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从源码中，我们可以看出，某一个元素被删除后，为了维护数组结构，我们都会把数组后面的元素往前移动，同时释放最后一个引用，便于回收。</p>\n<h3 id=\"迭代器iterator\"><a href=\"#迭代器iterator\" class=\"headerlink\" title=\"迭代器iterator\"></a>迭代器iterator</h3><p>在用 for 遍历集合的时候是不可以对集合进行 remove操作的，因为 remove 操作会改变集合的大小。从而容易造成结果不准确甚至数组下标越界，更严重者还会抛出 ConcurrentModificationException。</p>\n<h4 id=\"并发修改异常\"><a href=\"#并发修改异常\" class=\"headerlink\" title=\"并发修改异常\"></a>并发修改异常</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ma.collection.arraylist;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 马志超</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@title</span>: TestArrayList01</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@projectName</span> login</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: TODO</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/12/24 11:18</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestArrayList01</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;d&quot;</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;e&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String s : list) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"string\">&quot;a&quot;</span>.equals(s))&#123;</span><br><span class=\"line\">                list.remove(s);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/13068098071/picode/main/img/image-20211224112032656.png\" alt=\"并发修改异常\"></p>\n<p>产生这样的异常的原因是：对集合元素进行一次修改时，对应的modCount的值就会加一，导致expectedModCount 与 modCount 不相等，然后抛出ConcurrentModificationException 。调用迭代器的删除方法，会将修改后的modCount的值赋值给expectedModCount</p>\n<h4 id=\"迭代器的源码\"><a href=\"#迭代器的源码\" class=\"headerlink\" title=\"迭代器的源码\"></a>迭代器的源码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Itr</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> cursor;       <span class=\"comment\">// 代表下一个要访问的元素下标</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> lastRet = -<span class=\"number\">1</span>; <span class=\"comment\">// 代表上一个要访问的元素下标</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> expectedModCount = modCount; <span class=\"comment\">//代表对 ArrayList 修改次数的期望值，初始值为 modCount</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">//如果下一个元素的下标等于集合的大小 ，就证明到最后了。</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> cursor != size;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//首先判断 expectedModCount 和 modCount 是否相等</span></span><br><span class=\"line\">\t\tcheckForComodification();</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = cursor;</span><br><span class=\"line\">        <span class=\"comment\">//看是否超过集合大小和数组长度</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i &gt;= size)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">\t\tObject[] elementData = ArrayList.<span class=\"keyword\">this</span>.elementData;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i &gt;= elementData.length)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">        <span class=\"comment\">//将 cursor 自增 1</span></span><br><span class=\"line\">\t\tcursor = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (E) elementData[lastRet = i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (lastRet &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException();</span><br><span class=\"line\">\t\tcheckForComodification();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tArrayList.<span class=\"keyword\">this</span>.remove(lastRet);</span><br><span class=\"line\">\t\t\tcursor = lastRet;</span><br><span class=\"line\">\t\t\tlastRet = -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\texpectedModCount = modCount;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">checkForComodification</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (modCount != expectedModCount)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>hasNext</p>\n</blockquote>\n<p>如果下一个元素的下标等于集合的大小 ，就证明到最后了</p>\n<blockquote>\n<p>next</p>\n</blockquote>\n<p>首先判断 <code>expectedModCount</code> 和 <code>modCount</code> 是否相等。然后对 <code>cursor</code> 进行判断，看是否超过集合大小和数组长度。然后将 <code>cursor</code> 赋值给 <code>lastRet</code> ，并返回下标为 lastRet 的元素。最后将 cursor 自增 1。开始时，<code>cursor = 0，lastRet = -1</code>；每调用一次 next 方法， cursor 和 lastRet 都会自增 1</p>\n<blockquote>\n<p>remove</p>\n</blockquote>\n<p>首先会判断 <code>lastRet</code> 的值是否小于 0，然后在检查 <code>expectedModCount</code> 和 <code>modCount</code> 是否相等。接下来是关键，直接调用 ArrayList 的 <code>remove</code> 方法删除下标为 <code>lastRet</code> 的元素。然后将 <code>lastRet</code> 赋值给 cursor ，将 <code>lastRet</code> 重新赋值为 -1，并将 <code>modCount</code> 重新赋值给 <code>expectedModCount</code></p>\n<blockquote>\n<p>异常解决</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">    String value = iterator.next();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">&quot;a&quot;</span>.equals(value)) &#123;</span><br><span class=\"line\">        iterator.remove();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>直接调用 iterator.remove() 即可。因为在该方法中增加了 expectedModCount = modCount 操作</p>\n<blockquote>\n<p>弊端</p>\n</blockquote>\n<ul>\n<li>只能进行remove操作，add、clear 等 Itr 中没有</li>\n<li>调用 remove 之前必须先调用 next。因为 remove 开始就对 lastRet 做了校验。而 lastRet 初始化时为 -1</li>\n<li>next 之后只可以调用一次 remove。因为 remove 会将 lastRet 重新初始化为 -1</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>ArrayList 底层基于数组实现容量大小动态可变。</li>\n<li> 扩容机制为首先扩容为原始容量的 1.5 倍。如果1.5倍太小的话，则将我们所需的容量大小赋值给 newCapacity，如果1.5倍太大或者我们需要的容量太大，那就直接拿 <code>newCapacity = (minCapacity &gt; MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE</code> 来扩容。 扩容之后是通过数组的拷贝来确保元素的准确性的，所以尽可能减少扩容操作。 </li>\n<li>ArrayList 的最大存储能力：Integer.MAX_VALUE。 </li>\n<li>size 为集合中存储的元素的个数。</li>\n<li>elementData.length 为数组长度，表示最多可以存储多少个元素。 </li>\n<li>如果需要边遍历边 remove ，必须使用 iterator。且 remove 之前必须先 next，next 之后只能用一次 remove。</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h2 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h2><h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"https://raw.githubusercontent.com/13068098071/picode/main/img/image-20211224105430699.png\" alt=\"类图\"></p>\n<p><code>ArrayList</code>继承于 <code>AbstractList</code>，实现了 <code>List</code>, <code>RandomAccess</code>, <code>Cloneable</code>, <code>java.io.Serializable</code> 这些接口。</p>\n<ul>\n<li><code>RandomAccess</code>是一个标志接口，表明实现这个这个接口的 <code>List</code>集合是支持快速随机访问的</li>\n<li>实现 <code>Cloneable</code>接口并覆盖了方法<code>clone()</code>，能被克隆</li>\n<li>实现了java.io.Serializable 接口，这意味着<code>ArrayList</code>支持序列化，能通过序列化去传输</li>\n</ul>\n<h3 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h3><h4 id=\"成员变量\"><a href=\"#成员变量\" class=\"headerlink\" title=\"成员变量\"></a>成员变量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;  <span class=\"comment\">// 实际元素个数</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> Object[] elementData; <span class=\"comment\">//真正保存元素的数组</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAPACITY = <span class=\"number\">10</span>;<span class=\"comment\">//默认的初始容量大小</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h4><p>无参数直接初始化、指定大小初始化、指定初始数据初始化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1、无参数直接初始化，数组大小为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2、指定初始数据初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//elementData是保存数组的容器，默认为null</span></span><br><span class=\"line\">    elementData=c.toArray();</span><br><span class=\"line\">    <span class=\"comment\">//如果给定的集合（c)数据有值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>((size=elementData.length)!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      \t<span class=\"comment\">//c.toArray might(incorrectly)not return Object[](see 6260652)</span></span><br><span class=\"line\">      \t<span class=\"comment\">//如果集合元素类型不是Object类型，我们会转成Object</span></span><br><span class=\"line\">\t    <span class=\"keyword\">if</span>(elementData.getClass()!=Object[].class)&#123;</span><br><span class=\"line\">\t        elementData=Arrays.copyOf(elementData,size,Object].class);</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">  \t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//给定集合（c)无值，则默认空数组</span></span><br><span class=\"line\">    \t<span class=\"keyword\">this</span>.elementData=EMPTY_ELEMENTDATA</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//3、指定初始容量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//指定的初始容量大于0，将elementData初始化为指定大小的数组</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (initialCapacity &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.elementData = <span class=\"keyword\">new</span> Object[initialCapacity];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (initialCapacity == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//否则初始化成一个空数组</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>补充</p>\n</blockquote>\n<ul>\n<li><p><code>ArrayList</code>无参构造器初始化时，默认大小是空数组，并不是大家常说的10,10是在第一次<code>add</code>的时候扩容的数组值</p>\n</li>\n<li><p>使用方式二进行创建对象时，如果入参容器保存的对象不是<code>Object</code>，则转换为<code>Object</code></p>\n</li>\n<li><p>DEFAULTCAPACITY_EMPTY_ELEMENTDATA<code>和</code>EMPTY_ELEMENTDATA是啥：它其实是定义在成员变量的两个空数组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"新增和扩容实现\"><a href=\"#新增和扩容实现\" class=\"headerlink\" title=\"新增和扩容实现\"></a>新增和扩容实现</h4><p>新增时就是给数组中添加元素，主要分为两步走：</p>\n<ul>\n<li>判断是否需要扩容，如果需要扩容执行扩容操作</li>\n<li>直接赋值</li>\n</ul>\n<blockquote>\n<p>新增源码</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//确保数组大小是否足够，不够执行扩容，size为当前数组元素个数，判断size+1是因为后面还要size++</span></span><br><span class=\"line\">    ensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">//1</span></span><br><span class=\"line\">    elementData[size++] = e;<span class=\"comment\">//2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>扩容部分源码</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//先调用calculateCapacity计算容量</span></span><br><span class=\"line\">  \tensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calculateCapacity</span><span class=\"params\">(Object[] elementData, <span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//如果当前数组还是个空数组，也就是他用过无参构造去初始化的</span></span><br><span class=\"line\">  <span class=\"comment\">//那么直接返回DEFAULT_CAPACITY，即10</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> minCapacity;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureExplicitCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果当前容量已经大于当前数组的长度了，说明需要去扩容了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\">//扩容</span></span><br><span class=\"line\">        grow(minCapacity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> oldCapacity = elementData.length;</span><br><span class=\"line\">  <span class=\"comment\">//oldCapacity&gt;&gt;1是把oldCapacity除以2的意思</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> newCapacity=oldCapacity+(oldCapacity&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"comment\">//如果扩容后的值&lt;我们的期望值，扩容后的值就等于我们的期望值</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(newCapacity-minCapacity&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">    newCapacity = minCapacity;</span><br><span class=\"line\">  <span class=\"comment\">//如果扩容后的值&gt;jvm所能分配的数组的最大值，那么就用Integer的最大值</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(newCapacity-MAX_ARRAY_SIZE&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">    elementData=Arrays.copyOf(elementData,newCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意</p>\n</blockquote>\n<ul>\n<li>新增时，没有对值进行校验，所以新增值可以为<code>null</code>，且没有做重复值判断，所以元素可以<code>重复</code></li>\n<li>ArrayList中的数组的最大值是<code>Integer.MAX_VALUE</code>，超过这个值，<code>JVM</code>就不会给数组分配内存空间了</li>\n<li>扩容是原来容量大小+容量大小的一半，简单说就是扩容后的大小是原来容量的1.5倍</li>\n<li>扩容完成之后，就是简单的赋值了，赋值时并没有加锁，所以是线程<code>不安全</code>的</li>\n</ul>\n<h4 id=\"扩容的本质\"><a href=\"#扩容的本质\" class=\"headerlink\" title=\"扩容的本质\"></a>扩容的本质</h4><p>在<code>grow</code>方法的最后，扩容是通过<code>Arrays.copyOf(elementData,newCapacity);</code>这行代码实现的。这个方法实际上调用的方法是我们经常使用的<code>System.arraycopy</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*<span class=\"doctag\">@param</span> src 被拷贝的数组</span></span><br><span class=\"line\"><span class=\"comment\">*<span class=\"doctag\">@param</span> srcPos 从数组那里开始</span></span><br><span class=\"line\"><span class=\"comment\">*<span class=\"doctag\">@param</span> dest 目标数组</span></span><br><span class=\"line\"><span class=\"comment\">*<span class=\"doctag\">@param</span> destPos从目标数组那个索引位置开始拷贝</span></span><br><span class=\"line\"><span class=\"comment\">*<span class=\"doctag\">@param</span> length 拷贝的长度</span></span><br><span class=\"line\"><span class=\"comment\">*此方法是没有返回值的，通过dest的引用进行传值</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">arraycopy</span><span class=\"params\">(Object src, <span class=\"keyword\">int</span> srcPos,Object dest, <span class=\"keyword\">int</span> destPos,<span class=\"keyword\">int</span> length)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法是一个native方法，虽然不能看到方法内部的具体实现，但通过参数也可以管中窥豹。这个方法会移动元素。所以说数组如果要扩容，需要重新分配一块更大的空间，再把数据全部复制过去，时间复杂度 O(N)；而且你如果想在数组中间进行插入和删除，每次必须搬移后面的所有数据以保持连续，时间复杂度 O(N)。由于数组又是一块连续的内存空间，能够根据索引快速访问元素。<br>上面也就解释了一开始那个问题：ArrayList为什么插入慢，查询快。</p>\n<h4 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h4><p><code>ArrayList</code>有多种删除方法，这里以根据值删除的方式进行说明(其他原理类似)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//如果要删除的值是null,删除第一个是null的值</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(o==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> index=<span class=\"number\">0</span>;index&lt;size;index++)</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(elementData[index]==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        fastRemove(index)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果要删除的值不为null,找到第一个和要删除的值相等的删除</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> index=<span class=\"number\">0</span>;index&lt;size;index++)</span><br><span class=\"line\">      <span class=\"comment\">//这里是根据 equals来判断值相等的，相等后再根据索引位置进行删除</span></span><br><span class=\"line\">      <span class=\"comment\">//所以根据对象删除时，一般来说，如果你确定要删除的是某一类的业务对象，则需要重写equals</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(o.equals(elementData[index])&#123;</span><br><span class=\"line\">        fastRemove(index)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>核心其实是<code>fastRemove</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">fastRemove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//记录数组的结构要发生变动了</span></span><br><span class=\"line\">  nodCount++;</span><br><span class=\"line\">  <span class=\"comment\">//numMoved表示删除index位置的元素后，需要从index后移动多少个元素到前面去</span></span><br><span class=\"line\">  <span class=\"comment\">//减1的原因，是因为size从1开始算起，index从0开始算起</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> numMoved=size-index-<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(numMoved&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"comment\">//从index+1位置开始被拷贝，拷贝的起始位置是index,长度是numMoved</span></span><br><span class=\"line\">    System.arraycopy(elementData, index+<span class=\"number\">1</span>, elementData, index, numMoved);</span><br><span class=\"line\">  <span class=\"comment\">//数组最后一个位置赋值null,帮助GC(没有引用则自动回收了)</span></span><br><span class=\"line\">  elementData[--size] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从源码中，我们可以看出，某一个元素被删除后，为了维护数组结构，我们都会把数组后面的元素往前移动，同时释放最后一个引用，便于回收。</p>\n<h3 id=\"迭代器iterator\"><a href=\"#迭代器iterator\" class=\"headerlink\" title=\"迭代器iterator\"></a>迭代器iterator</h3><p>在用 for 遍历集合的时候是不可以对集合进行 remove操作的，因为 remove 操作会改变集合的大小。从而容易造成结果不准确甚至数组下标越界，更严重者还会抛出 ConcurrentModificationException。</p>\n<h4 id=\"并发修改异常\"><a href=\"#并发修改异常\" class=\"headerlink\" title=\"并发修改异常\"></a>并发修改异常</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ma.collection.arraylist;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 马志超</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@title</span>: TestArrayList01</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@projectName</span> login</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: TODO</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/12/24 11:18</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestArrayList01</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;d&quot;</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;e&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String s : list) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"string\">&quot;a&quot;</span>.equals(s))&#123;</span><br><span class=\"line\">                list.remove(s);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/13068098071/picode/main/img/image-20211224112032656.png\" alt=\"并发修改异常\"></p>\n<p>产生这样的异常的原因是：对集合元素进行一次修改时，对应的modCount的值就会加一，导致expectedModCount 与 modCount 不相等，然后抛出ConcurrentModificationException 。调用迭代器的删除方法，会将修改后的modCount的值赋值给expectedModCount</p>\n<h4 id=\"迭代器的源码\"><a href=\"#迭代器的源码\" class=\"headerlink\" title=\"迭代器的源码\"></a>迭代器的源码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Itr</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> cursor;       <span class=\"comment\">// 代表下一个要访问的元素下标</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> lastRet = -<span class=\"number\">1</span>; <span class=\"comment\">// 代表上一个要访问的元素下标</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> expectedModCount = modCount; <span class=\"comment\">//代表对 ArrayList 修改次数的期望值，初始值为 modCount</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">//如果下一个元素的下标等于集合的大小 ，就证明到最后了。</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> cursor != size;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//首先判断 expectedModCount 和 modCount 是否相等</span></span><br><span class=\"line\">\t\tcheckForComodification();</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = cursor;</span><br><span class=\"line\">        <span class=\"comment\">//看是否超过集合大小和数组长度</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i &gt;= size)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">\t\tObject[] elementData = ArrayList.<span class=\"keyword\">this</span>.elementData;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i &gt;= elementData.length)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">        <span class=\"comment\">//将 cursor 自增 1</span></span><br><span class=\"line\">\t\tcursor = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (E) elementData[lastRet = i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (lastRet &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException();</span><br><span class=\"line\">\t\tcheckForComodification();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tArrayList.<span class=\"keyword\">this</span>.remove(lastRet);</span><br><span class=\"line\">\t\t\tcursor = lastRet;</span><br><span class=\"line\">\t\t\tlastRet = -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\texpectedModCount = modCount;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">checkForComodification</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (modCount != expectedModCount)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>hasNext</p>\n</blockquote>\n<p>如果下一个元素的下标等于集合的大小 ，就证明到最后了</p>\n<blockquote>\n<p>next</p>\n</blockquote>\n<p>首先判断 <code>expectedModCount</code> 和 <code>modCount</code> 是否相等。然后对 <code>cursor</code> 进行判断，看是否超过集合大小和数组长度。然后将 <code>cursor</code> 赋值给 <code>lastRet</code> ，并返回下标为 lastRet 的元素。最后将 cursor 自增 1。开始时，<code>cursor = 0，lastRet = -1</code>；每调用一次 next 方法， cursor 和 lastRet 都会自增 1</p>\n<blockquote>\n<p>remove</p>\n</blockquote>\n<p>首先会判断 <code>lastRet</code> 的值是否小于 0，然后在检查 <code>expectedModCount</code> 和 <code>modCount</code> 是否相等。接下来是关键，直接调用 ArrayList 的 <code>remove</code> 方法删除下标为 <code>lastRet</code> 的元素。然后将 <code>lastRet</code> 赋值给 cursor ，将 <code>lastRet</code> 重新赋值为 -1，并将 <code>modCount</code> 重新赋值给 <code>expectedModCount</code></p>\n<blockquote>\n<p>异常解决</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">    String value = iterator.next();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">&quot;a&quot;</span>.equals(value)) &#123;</span><br><span class=\"line\">        iterator.remove();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>直接调用 iterator.remove() 即可。因为在该方法中增加了 expectedModCount = modCount 操作</p>\n<blockquote>\n<p>弊端</p>\n</blockquote>\n<ul>\n<li>只能进行remove操作，add、clear 等 Itr 中没有</li>\n<li>调用 remove 之前必须先调用 next。因为 remove 开始就对 lastRet 做了校验。而 lastRet 初始化时为 -1</li>\n<li>next 之后只可以调用一次 remove。因为 remove 会将 lastRet 重新初始化为 -1</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>ArrayList 底层基于数组实现容量大小动态可变。</li>\n<li> 扩容机制为首先扩容为原始容量的 1.5 倍。如果1.5倍太小的话，则将我们所需的容量大小赋值给 newCapacity，如果1.5倍太大或者我们需要的容量太大，那就直接拿 <code>newCapacity = (minCapacity &gt; MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE</code> 来扩容。 扩容之后是通过数组的拷贝来确保元素的准确性的，所以尽可能减少扩容操作。 </li>\n<li>ArrayList 的最大存储能力：Integer.MAX_VALUE。 </li>\n<li>size 为集合中存储的元素的个数。</li>\n<li>elementData.length 为数组长度，表示最多可以存储多少个元素。 </li>\n<li>如果需要边遍历边 remove ，必须使用 iterator。且 remove 之前必须先 next，next 之后只能用一次 remove。</li>\n</ul>\n"},{"title":"HashMap","date":"2021-12-23T16:00:00.000Z","description":"hashMap集合笔记","cover":"https://s2.loli.net/2021/12/23/TNY612AUy38Dfk7.jpg","_content":"## HashMap\n\n### 数据结构\n\n 在`JDK1.7`中HashMap的数据结构是`数组 + 链表` , 而在`JDK1.8`中则演化成了`数组 + 链表 + 红黑树`的结构 , 这也是1.8中最大的更新 , 下面我们来探究一下为何要演化为`数组 + 链表 + 红黑树`这样的数据结构\n\n我们知道在1.7中当产生了`hash碰撞`时便会将当前`Entry`变成链表 , 单向链表查找除了`head`节点外的时间复杂度都是`O(n)` , 如果频繁的发生了`hash碰撞`每次查找元素都是非常耗费时间的 , 所以为了避免这一现象1.8中引入了红黑树\n\n红黑树的插入、查找的时间复杂度都是`O(log n)` , 假如你的红黑树里面有256个数据 , 此时只需要8次就能找到目标数据 , 即使是65536个数据也只需要16次即可 , 效率相比链表而言提升的非常大\n\nHashMap转为红黑树后存储的数据结构图\n\n![1.8HashMap存储](https://raw.githubusercontent.com/13068098071/picode/main/img/image-20211224152017394.png)\n\n### 源码解析\n\n#### 核心参数\n\n```java\n//默认初始化table数组容量16\nstatic final int DEFAULT_INITIAL_CAPACITY = 1 << 4; // aka 16\n  \t\t\t\n//table最大容量1073741824\nstatic final int MAXIMUM_CAPACITY = 1 << 30;\n\n//默认加载因子, 即当现有数组长度达到容量的75%时会进行扩容操作\nstatic final float DEFAULT_LOAD_FACTOR = 0.75f;\n  \n//1.8新增 当链表的长度 >=8 - 1 时会转换为红黑树, 关于为什么要定义为8的详细解读在下面↓\nstatic final int TREEIFY_THRESHOLD = 8;\n  \n//1.8新增 当红黑树的长度 <=6 时会转换为链表, 关于为什么红黑树 → 链表的阈值是6的详细解读在下面↓\nstatic final int UNTREEIFY_THRESHOLD = 6;\n  \n//1.8新增 红黑树的最小容量\nstatic final int MIN_TREEIFY_CAPACITY = 64;\n  \n//定义一个类型为Node<K,V>的table数组\ntransient Node<K,V>[] table;\n  \n//table数组的长度\ntransient int size;\n\n//实际的扩容的阈值 threshold = 容量 * 加载因子\n//在构造器中会被初始化为DEFAULT_INITIAL_CAPACITY的值16\n//在第一次存储数据时会在inflateTable()方法中再次赋值threshold = (int) Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + 1);\nint threshold;\n\n//实际的加载因子, 在构造器中进行初始化\n//如果创建HashMap时没有指定loadFactor的大小则会初始化为DEFAULT_INITIAL_CAPACITY的值\nfinal float loadFactor;\n\n//HashMap更改的次数\n//用来作为并发下判断是否有其它线程修改了该HashMap,抛出ConcurrentModificationException\ntransient int modCount;\n\n//在初始化时指定初始长度及加载因子的构造器\npublic HashMap(int initialCapacity, float loadFactor) {\n   ...\n}\n\n//在初始化时指定初始长度的构造器\npublic HashMap(int initialCapacity) {\n  \t//这里调用的其实还是上面的构造器\n    this(initialCapacity, DEFAULT_LOAD_FACTOR);\n}\n\n//什么也不指定的构造器 , 这里不像1.7中还是去调用了有参构造器 , 具体原因下面会有分析\npublic HashMap() {\n    this.loadFactor = DEFAULT_LOAD_FACTOR;\n}\n```\n\n>##### `TREEIFY_THRESHOLD`\n\n这个参数是链表转换成红黑树的阈值，TREEIFY_THRESHOLD = 8\n\n1. 为什么不在一开始就使用红黑树来替代链表\n\n   相同数据量下红黑树(TreeNode)占用的空间是链表(Node)的俩倍 , 考虑到时间和空间的权衡 , 只有当链表的长度达到阈值时才会将其转成红黑树\n\n2. 为什么链表 → 红黑树的阈值是8呢?\n\n   ```java\n   * In usages with well-distributed user hashCodes, tree bins are\n   * rarely used.  Ideally, under random hashCodes, the frequency of\n   * nodes in bins follows a Poisson distribution\n   * (http://en.wikipedia.org/wiki/Poisson_distribution) with a\n   * parameter of about 0.5 on average for the default resizing\n   * threshold of 0.75, although with a large variance because of\n   * resizing granularity. Ignoring variance, the expected\n   * occurrences of list size k are (exp(-0.5) * pow(0.5, k) /\n   * factorial(k)). The first values are:\n   *\n   * 0:    0.60653066\n   * 1:    0.30326533\n   * 2:    0.07581633\n   * 3:    0.01263606\n   * 4:    0.00157952\n   * 5:    0.00015795\n   * 6:    0.00001316\n   * 7:    0.00000094\n   * 8:    0.00000006\n   * more: less than 1 in ten million\n   ```\n\n   HashMap的作者认为在理想的情况下随机hashCode算法下所有节点的分布频率会遵循[泊松分布(Poisson distribution)](http://en.wikipedia.org/wiki/Poisson_distribution) , 上面也列举了链表长度达到8的概率是0.00000006,也就是说我们几乎不可能会使用到红黑树 , 所以作者使用8作为一个分水岭\n\n>UNTREEIFY_THRESHOLD\n\n为何链表 → 红黑树的阈值，UNTREEIFY_THRESHOLD = 6\n\n1. 为何链表 → 红黑树的阈值是6\n\n   假设UNTREEIFY_THRESHOLD的 = 7 , 当我们有频繁的添加和删除操作时 , hash碰撞产生的节点数量 一旦在7附件徘徊就会造成红黑树和链表的频繁转换 , 此时我们大多数的性能就都耗费在了链表 → 红黑树和红黑树 → 链表` ,这样反而就得不偿失了 , 所以作者将长度为7作为一个缓存地段从而选取了6作为红黑树 → 链表的阈值\n\n>loadFactor\n\n- 加载因子并不是越大越好的 , 虽然加载因子越大就意味着HashMap的实际容量越大 , 扩容的次数越少 , 但是因为实际存储的数据大了 , 俩个相同容量的HashMap加载因子越大的那个读取的速度更慢 , 所以我们需要根据自己的实际使用情况来进行判断 , 是要存储更多的数据呢 , 还是要更快的读取速度\n- 加载因子是会影响到扩容的次数的 , 如果加载因子太小的话HashMap会频繁的进行扩容 , 导致在存储的时候性能下降\n- 如果我们在创建HashMap时就已经知道了要存储的数据量 , 那么我们完全可以通过实际存储数量 ÷ 0.75来计算出我们初始化的HashMap容量 , 这样可以避免HashMap再进行扩容操作 , 提升代码效率\n\n>modCount\n\nHashMap不是线程安全的 , 也就是说你在操作的同时可能会有其它的线程也在操作该map,那样会造成脏数据 , 所以为了避免这种情况发生HashMap、ArrayList等使用了fail-fast策略 , 用modCount来记录修改集合修改次数\n\n我们在边迭代边删除集合元素时会碰到一个异常ConcurrentModificationException , 原因是不管你使用entrySet()方法也好 , keySet()方法也好 , 其实在for循环的时候还是会使用该集合内置的Iterator迭代器中的nextEntry()方法 , 如果你没有使用Iterator内置的remove()方法 , 那么迭代器内部的记录更改次数的值便不会被同步 , 当你下一次循环时调用nextEntry()方法便会抛出异常\n\n#### put方法\n\n![HashMap的put](https://raw.githubusercontent.com/13068098071/picode/main/img/image-20211224153116502.png)\n\n```java\n public V put(K key, V value) {\n     return putVal(hash(key) ,  key, value, false, true);\n }\n \n //关于onlyIfAbsent,evict的讲解在下面↓\n final V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                  boolean evict) {\n     Node<K,V>[] tab; \n     Node<K,V> p; \n     int n, i;\n     // 判断数组是否为空 , 为空则调用resize()方法进行初始化,resize()方法源码在下面↓\n     if ((tab = table) == null || (n = tab.length) == 0)\n          n = (tab = resize()).length;\n\n \t  // 如果当前数组索引位置的元素为null则直接创建新的节点并存到该索引位置的数组中\n \t  // 和JDK1.7的对比\n \t  //1. 其实这里的(n - 1) & hash就是JDK1.7中的indexFor()方法体中的(length - 1) & h,只不过在1.8中做了简化处理\n      if ((p = tab[i = (n - 1) & hash]) == null)\n          //2. tab[i] = newNode(hash, key, value, null);在JDK1.7中时在createEntry()方法中完成创建Entry的 , 在1.8中该方法也被删除了\n          tab[i] = newNode(hash, key, value, null);\n\t\t\t\n\t  // 走到这个else代码块中说明当前key已经在数组中存在了 || 发生了hash碰撞\n      else {\n          Node<K,V> e; K k;\n          // 判断当前key在数组中是否存在, 存在则不进行存储操作\n          // 有朋友好奇这里的p是在哪里初始化的, 其实在上一个if里面就被初始化了\n          if (p.hash == hash &&\n              ((k = p.key) == key || (key != null && key.equals(k))))\n              e = p;\n        \n          // 判断当前节点类型是否是红黑树节点\n          else if (p instanceof TreeNode)\n              // 将key、value存储到红黑树节点中 , 如果key已经存在 , 则返回之前的节点 , 源码解析在下面↓\n              e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n        \n          // 代码进入到这个else代码块就说明发生了hash碰撞\n          else {\n              // 该代码块中的e的初始化会有俩种情况\n              // ① e是最后一个节点的next元素,e == null\n              // ② e是和key相同的那个node\n              for (int binCount = 0; ; ++binCount) {\n                  // 判断当前节点是否是链表的最后一个节\n                  // ①\n                  if ((e = p.next) == null) {\n                      // 直接将当前要存储的key、value存储到上一个节点的next元素中\n                      // 在JDK1.7中的会先将之前存储的节点取出来, 然后将之前的节点作为新节点的next元素存储到数组中\n                      // 而在JDK1.8中会直接将新的节点放到之前存储节点的next元素中\n                      // 也就是说JDK1.7中的链表插入顺序是从头部开始插入, 而在1.8中时从尾部开始插入\n                      p.next = newNode(hash, key, value, null);\n                      // 因为这个循环是迭代链表的, 所以binCount代表着链表的长度, 如果链表长度超过阈值则会转换为红黑树\n                      if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                          // 转换红黑树的源码解析在下面↓\n                          treeifyBin(tab, hash);\n                      break;\n                  }\n                \n                  // 当前节点不是最后一个节点, 判断当前节点的key与要存储的key是否相同\n                  // ②\n                  if (e.hash == hash &&\n                      ((k = e.key) == key || (key != null && key.equals(k))))\n                      break;\n                  p = e;\n              }\n          }\n        \n  \t\t  // e在只有当前key已经存在时才会完成初始化], 这里是统一处理, 返回key之前对应的value, 并判断是否要替换value,默认是替换\n          if (e != null) { // existing mapping for key\n              V oldValue = e.value;\n              if (!onlyIfAbsent || oldValue == null)\n                  e.value = value;\n              // 这里是个空方法体\n              afterNodeAccess(e);\n              return oldValue;\n          }\n      }\n      ++modCount;\n \t  // 在JDK1.7中扩容操作是在存储数据之前发生的\n \t  // 在JDK1.8中扩容操作是在存储数据之后发生的\n      if (++size > threshold)\n          resize();\n\t  // 这里是个空方法体\n      afterNodeInsertion(evict);\n      return null;\n}\n```\n\n- 首先会判断哈希表Node<k,v>[] table是否为空或者null，是则进行resize()方法进行扩容，否则进入下一个阶段；\n- 根据key计算的hash值，hash值&（length-1）得到数组所在的存储位置table[i]，如果存储位置没有元素存放，则直接创建一个新Node；\n- 如果存储位置有元素存放，则接下来会判断该位置元素的hash值和key值是否和当前操作元素一致，如果一致，说明是修改value操作，直接进行覆盖；\n- 当前存储位置有元素，又不和当前操作元素一致，说明发生了hash冲突，在这里他又有两种方式，分别是链表和红黑树，区别就在于他们的头结点，如果头结点是treeNode，则说明此位置结构是红黑树方式插入；\n- 如果不是红黑树，则说明是单链表，将新增节点插入至链表的最后位置，但是这里还有一个判断点，判断当前链表长度是否大于等于8.如果是则将链表转化为红黑树，遍历过程如果key存在，则直接覆盖；\n- 最后就是判断当前存储键值对的数量，如果大于阈值值，则扩容；\n\n>onlyIfAbsent\n\nonlyIfAbsent：如果为true，则不更改现有值 , 也就是说不会用新的value来替换旧的value\n\n>##### `hash()`\n\n```java\nstatic final int hash(Object key) {\n    int h;\n    //高16位和低16位进行异或运算，增散列程度，减少hash碰撞发生的概率\n    return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n}\n```\n\n>**为什么HashMap的容量一定要是2的非零次方幂而且还要进行`hash & (length - 1)`的操作**\n\n如果容量是2的次方 , 那么length - 1得到的二进制的除了补位外都是1,根据&运算符的规则 , 0&0=0; 0&1=0; 1&1=1;那么也就意味着不论hash的值是什么 , 只要length - 1的二进制码是这样规律的 , 那么就可以保证hash的值只有和length - 1的同位参与了运算 , 例如二进制码A(10101011)&B(00001111)的结果就是C(00001011) , C的结果只会受到B二进制码后四位的影响 , 因为b的补位都是0 , 也就是说h & (length - 1)得到的索引不会大于length,也就不会越界\n\n#### resize方法\n\n```java\nfinal Node<K,V>[] resize() {\n   Node<K,V>[] oldTab = table;\n   int oldCap = (oldTab == null) ? 0 : oldTab.length;\n   int oldThr = threshold;\n   int newCap, newThr = 0;\n   // 进入到这个if代码块中说明此时table数组已经完成过初始化\n   if (oldCap > 0) {\n       // 判断当前容量是否已达到最大值\n       if (oldCap >= MAXIMUM_CAPACITY) {\n           threshold = Integer.MAX_VALUE;\n           return oldTab;\n       }\n     \n       // 将新数组的容量设置为旧容量的2倍\n       else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                oldCap >= DEFAULT_INITIAL_CAPACITY)\n           // 这一步的操作等同于 oldThr * 2\n           newThr = oldThr << 1; // double threshold\n   }\n\n   // 进入到这个代码块说明在创建HashMap时使用的有参构造器\n   // 在翻阅代码后我们发现threshold的值会在有参构造器中被初始化 , 此时被初始化了就会使用指定的容量来完成table数组的初始化\n   else if (oldThr > 0) // initial capacity was placed in threshold\n       newCap = oldThr;\n\n   // 进入到这个else代码块中说明数组还未完成初始化 , 进行初始化操作\n   else {               \n       newCap = DEFAULT_INITIAL_CAPACITY;\n       newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n   }\n \t\t\n   // 只有调用有参构造器才让newThr == 0,至于为什么不放到上面的else if中 , 可能是为以后扩展做铺垫吧\n   if (newThr == 0) {\n       float ft = (float)newCap * loadFactor;\n       newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                 (int)ft : Integer.MAX_VALUE);\n   }\n   threshold = newThr;\n   @SuppressWarnings({\"rawtypes\" , \"unchecked\"})\n   // 初始化新数组\n   Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n   table = newTab;\n   if (oldTab != null) {\n       for (int j = 0; j < oldCap; ++j) {\n           Node<K,V> e;\n           if ((e = oldTab[j]) != null) {\n               oldTab[j] = null;\n               // 如果当前不是链表则会直接将当前元素放到新数组中旧元素所在索引位置\n               // 至于为什么 , 在下面会有详细讲解↓\n               if (e.next == null)\n                   newTab[e.hash & (newCap - 1)] = e;\n             \t\n               // 如果当前元素是红黑树的节点\n               else if (e instanceof TreeNode)\n                   ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n             \n               // 进入这个代码块中说明当前数组元素是链表\n               else {\n                   // loHead和loTail存储的是转移数据后仍然存储在当前索引位置的元素\n                   Node<K,V> loHead = null, loTail = null;\n                   // hiHead和hiTail存储的是转移数据后存储到[j + oldCap]索引位置的元素\n                   // 这里看不懂没事 , 接着往下看就明白了\n                   Node<K,V> hiHead = null, hiTail = null;\n                   Node<K,V> next;\n                 e = 1 e.next = 2 e.next.next = 3\n\n                   do {\n                       // 为了方便讲明白这个循环里面的源码,我们来举个例子,假设此时链表有3个元素a,b,c\n                       // 第一次循环进入到① | ②\n                       // tail元素肯定为null,所以会将当前e赋值给head元素,并且为tail赋值,以便下次循环\n                       // 此时head元素会含有e的链表关系即next元素指针,此时就是e=a  head=a  tail=a\n                       \n                       // 第二次循环进入① | ②\n                       // 还是会通过第一次进入时的索引判断 , 所以此时tail元素不会为null,\n                       // 此时就是 e=b  head=a  head.next=b  tail=b  tail.next=b\n                       // 因为在第一次进入的时候head和tail是同时指向e的\n                       // 所以此时tail.next=b也就意味着head.next=b,所以才会先在else代码块中完成tail.next的初始化\n                       // 再完成tail的初始化\n                       \n                   \t   // 第三次循环进入① | ② 就是 e=c  head=a  tail=c  tail.next=c  head.next.next=c\n                   \t   // 以此类推....\n                       next = e.next;\n                       // 这里会根据(e.hash & oldCap) == 0来将链表划分为俩部分 , 一部分仍然存储在旧链表的索引位置 , 另一部分存储到新数组的[j + oldCap]索引位置\n                       if ((e.hash & oldCap) == 0) {\n                           // ①\n                           if (loTail == null)\n                               loHead = e;\n                           // ②\n                           else\n                               loTail.next = e;\n                           loTail = e;\n                       }\n                       else {\n                           // ①\n                           if (hiTail == null)\n                               hiHead = e;\n                           // ②\n                           else\n                               hiTail.next = e;\n                           hiTail = e;\n                       }\n                   } while ((e = next) != null);\n                   // 将loHead存储到新数组的旧索引位置\n                   if (loTail != null) {\n                       loTail.next = null;\n                       newTab[j] = loHead;\n                   }\n                   // 将hiHead存储到新数组的[j + oldCap]索引位置\n                   if (hiTail != null) {\n                       hiTail.next = null;\n                       newTab[j + oldCap] = hiHead;\n                   }\n               }\n           }\n       }\n   }\n   return newTab;\n}\n```\n\n#### get方法\n\n![HashMap的get](https://raw.githubusercontent.com/13068098071/picode/main/img/image-20211224154248251.png)\n\n```java\npublic V get(Object key) {\n    Node<K,V> e;\n    return (e = getNode(hash(key) ,  key)) == null ? null : e.value;\n}\n\nfinal Node<K,V> getNode(int hash, Object key) {\n    Node<K,V>[] tab; Node<K,V> first, e; int n; K k;\n    // 计算索引位置并判断当前索引位置是否存在元素\n    if ((tab = table) != null && (n = tab.length) > 0 &&\n        (first = tab[(n - 1) & hash]) != null) {\n        // 判断当前元素是否与要取得值相等\n        if (first.hash == hash && // always check first node\n            ((k = first.key) == key || (key != null && key.equals(k))))\n            return first;\n        // 判断当前元素是否有next元素\n        if ((e = first.next) != null) {\n            // 判断当前元素是否是红黑树节点\n            if (first instanceof TreeNode)\n                // 寻找红黑树中与要取值相等的节点\n                return ((TreeNode<K,V>)first).getTreeNode(hash, key);\n            // 迭代链表\n            do {\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    return e;\n            } while ((e = e.next) != null);\n        }\n    }\n    return null;\n}\n```\n\n### 1.7和1.8对比\n\n|              | 1.7                            | 1.8                               |\n| ------------ | ------------------------------ | --------------------------------- |\n| 数据结构     | 数组 + 链表                    | 数组 + 链表 + 红黑树              |\n| 节点         | Entry                          | Node TreeNode                     |\n| Hash算法     | 较为复杂                       | 异或hash右移16位                  |\n| 对Null的处理 | 单独写一个putForNull()方法处理 | 作为以一个Hash值为0的普通节点处理 |\n| 初始化       | 赋值给一个空数组，put时初始化  | 没有赋值，懒加载，put时初始化     |\n| 扩容         | 插入前扩容                     | 插入后，初始化，树化时扩容        |\n| 节点插入     | 头插法                         | 尾插法                            |\n\n参看文档：https://blog.csdn.net/weixin_44141495/article/details/108402128\n\n### 常见问题\n\n>**什么时候扩容**\n\n1. 当前容量超过阈值\n2. 当链表中元素个数超过默认设定（8个），当数组的大小还未超过64的时候，此时进行数组的扩容，如果超过则将链表转化成红黑树\n\n>**什么时候链表转化为红黑树**\n\n当数组大小已经超过64并且链表中的元素个数超过默认设定（8个）时，将链表转化为红黑树\n\n> **为什么HashMap的初始容量是16，扩容时一定要是2的n次方**\n\nindex = HashCode（key） & (length-1)\n\n以值为“book”的Key来演示：\n\n1. 计算book的hashcode，结果为十进制的3029737，二进制的101110001110101110 1001。\n2. 假定HashMap长度是默认的16，计算Length-1的结果为十进制的15，二进制的1111。\n3. 把以上两个结果做与运算，101110001110101110 1001 & 1111 = 1001，十进制是9，所以 index=9。\n\n**Hash算法最终得到的index结果，完全取决于Key的Hashcode值的最后几位**\n\n假设HashMap的长度是10，重复刚才的运算步骤：\n\n![img](https://img-blog.csdnimg.cn/20190109165033757.jpg)\n\n单独看这个结果，表面上并没有问题。我们再来尝试一个新的HashCode 101110001110101110 **1011** ：\n\n![img](https://img-blog.csdnimg.cn/20190109165144678.jpg)\n\n虽然HashCode的倒数第二第三位从0变成了1，但是运算的结果都是1001。也就是说，当HashMap长度为10的时候，有些index结果的出现几率会更大，而有些index结果永远不会出现.这样，显然不符合Hash算法均匀分布的原则。\n\n反观长度16或者其他2的幂，Length-1的值是所有二进制位全为1，这种情况下，index的结果等同于HashCode后几位的值。只要输入的HashCode本身分布均匀，Hash算法的结果就是均匀的。\n\n**总结**\n\n- 取模运算效率很低，为了实现高效的Hash算法，HashMap的采用了位运算的方式\n- 为了Hash算法的结果就是均匀的\n\n> 深入理解HashMap线程不安全的体现\n\nhttps://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653192000&idx=1&sn=118cee6d1c67e7b8e4f762af3e61643e&chksm=8c990d9abbee848c739aeaf25893ae4382eca90642f65fc9b8eb76d58d6e7adebe65da03f80d&scene=21#wechat_redirect\n\n> 如何处理hash冲突\n\n- 开发定址法：既然当前位置容不下冲突的元素了，那就再找一个空的位置存储 Hash 冲突的值（当前 index 冲突了，那么将冲突的元素放在 index+1)。\n\n- 再散列法：换一个 Hash 算法再计算一个 hash 值，如果不冲突了就存储值（例如第一个算法是名字的首字母的 Hash 值，如果冲突了，计算名字的第二个字母的 Hash 值，如果冲突解决了则将值放入数组中）。\n\n- 链地址法：每个数组中都存有一个单链表，发生 Hash 冲突时，只是将冲突的 value 当作新节点插入到链表（HashMap 解决冲突的办法）。\n\n- 公共溢出区法：将冲突的 value 都存到另外一个顺序表中，查找时如果当前表没有对应值，则去溢出区进行顺序查找。\n  ","source":"_posts/HashMap.md","raw":"---\ntitle: HashMap\ndate: 2021-12-24\ndescription: hashMap集合笔记\ncover: https://s2.loli.net/2021/12/23/TNY612AUy38Dfk7.jpg\ntags: Map\ncategories: 集合\n---\n## HashMap\n\n### 数据结构\n\n 在`JDK1.7`中HashMap的数据结构是`数组 + 链表` , 而在`JDK1.8`中则演化成了`数组 + 链表 + 红黑树`的结构 , 这也是1.8中最大的更新 , 下面我们来探究一下为何要演化为`数组 + 链表 + 红黑树`这样的数据结构\n\n我们知道在1.7中当产生了`hash碰撞`时便会将当前`Entry`变成链表 , 单向链表查找除了`head`节点外的时间复杂度都是`O(n)` , 如果频繁的发生了`hash碰撞`每次查找元素都是非常耗费时间的 , 所以为了避免这一现象1.8中引入了红黑树\n\n红黑树的插入、查找的时间复杂度都是`O(log n)` , 假如你的红黑树里面有256个数据 , 此时只需要8次就能找到目标数据 , 即使是65536个数据也只需要16次即可 , 效率相比链表而言提升的非常大\n\nHashMap转为红黑树后存储的数据结构图\n\n![1.8HashMap存储](https://raw.githubusercontent.com/13068098071/picode/main/img/image-20211224152017394.png)\n\n### 源码解析\n\n#### 核心参数\n\n```java\n//默认初始化table数组容量16\nstatic final int DEFAULT_INITIAL_CAPACITY = 1 << 4; // aka 16\n  \t\t\t\n//table最大容量1073741824\nstatic final int MAXIMUM_CAPACITY = 1 << 30;\n\n//默认加载因子, 即当现有数组长度达到容量的75%时会进行扩容操作\nstatic final float DEFAULT_LOAD_FACTOR = 0.75f;\n  \n//1.8新增 当链表的长度 >=8 - 1 时会转换为红黑树, 关于为什么要定义为8的详细解读在下面↓\nstatic final int TREEIFY_THRESHOLD = 8;\n  \n//1.8新增 当红黑树的长度 <=6 时会转换为链表, 关于为什么红黑树 → 链表的阈值是6的详细解读在下面↓\nstatic final int UNTREEIFY_THRESHOLD = 6;\n  \n//1.8新增 红黑树的最小容量\nstatic final int MIN_TREEIFY_CAPACITY = 64;\n  \n//定义一个类型为Node<K,V>的table数组\ntransient Node<K,V>[] table;\n  \n//table数组的长度\ntransient int size;\n\n//实际的扩容的阈值 threshold = 容量 * 加载因子\n//在构造器中会被初始化为DEFAULT_INITIAL_CAPACITY的值16\n//在第一次存储数据时会在inflateTable()方法中再次赋值threshold = (int) Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + 1);\nint threshold;\n\n//实际的加载因子, 在构造器中进行初始化\n//如果创建HashMap时没有指定loadFactor的大小则会初始化为DEFAULT_INITIAL_CAPACITY的值\nfinal float loadFactor;\n\n//HashMap更改的次数\n//用来作为并发下判断是否有其它线程修改了该HashMap,抛出ConcurrentModificationException\ntransient int modCount;\n\n//在初始化时指定初始长度及加载因子的构造器\npublic HashMap(int initialCapacity, float loadFactor) {\n   ...\n}\n\n//在初始化时指定初始长度的构造器\npublic HashMap(int initialCapacity) {\n  \t//这里调用的其实还是上面的构造器\n    this(initialCapacity, DEFAULT_LOAD_FACTOR);\n}\n\n//什么也不指定的构造器 , 这里不像1.7中还是去调用了有参构造器 , 具体原因下面会有分析\npublic HashMap() {\n    this.loadFactor = DEFAULT_LOAD_FACTOR;\n}\n```\n\n>##### `TREEIFY_THRESHOLD`\n\n这个参数是链表转换成红黑树的阈值，TREEIFY_THRESHOLD = 8\n\n1. 为什么不在一开始就使用红黑树来替代链表\n\n   相同数据量下红黑树(TreeNode)占用的空间是链表(Node)的俩倍 , 考虑到时间和空间的权衡 , 只有当链表的长度达到阈值时才会将其转成红黑树\n\n2. 为什么链表 → 红黑树的阈值是8呢?\n\n   ```java\n   * In usages with well-distributed user hashCodes, tree bins are\n   * rarely used.  Ideally, under random hashCodes, the frequency of\n   * nodes in bins follows a Poisson distribution\n   * (http://en.wikipedia.org/wiki/Poisson_distribution) with a\n   * parameter of about 0.5 on average for the default resizing\n   * threshold of 0.75, although with a large variance because of\n   * resizing granularity. Ignoring variance, the expected\n   * occurrences of list size k are (exp(-0.5) * pow(0.5, k) /\n   * factorial(k)). The first values are:\n   *\n   * 0:    0.60653066\n   * 1:    0.30326533\n   * 2:    0.07581633\n   * 3:    0.01263606\n   * 4:    0.00157952\n   * 5:    0.00015795\n   * 6:    0.00001316\n   * 7:    0.00000094\n   * 8:    0.00000006\n   * more: less than 1 in ten million\n   ```\n\n   HashMap的作者认为在理想的情况下随机hashCode算法下所有节点的分布频率会遵循[泊松分布(Poisson distribution)](http://en.wikipedia.org/wiki/Poisson_distribution) , 上面也列举了链表长度达到8的概率是0.00000006,也就是说我们几乎不可能会使用到红黑树 , 所以作者使用8作为一个分水岭\n\n>UNTREEIFY_THRESHOLD\n\n为何链表 → 红黑树的阈值，UNTREEIFY_THRESHOLD = 6\n\n1. 为何链表 → 红黑树的阈值是6\n\n   假设UNTREEIFY_THRESHOLD的 = 7 , 当我们有频繁的添加和删除操作时 , hash碰撞产生的节点数量 一旦在7附件徘徊就会造成红黑树和链表的频繁转换 , 此时我们大多数的性能就都耗费在了链表 → 红黑树和红黑树 → 链表` ,这样反而就得不偿失了 , 所以作者将长度为7作为一个缓存地段从而选取了6作为红黑树 → 链表的阈值\n\n>loadFactor\n\n- 加载因子并不是越大越好的 , 虽然加载因子越大就意味着HashMap的实际容量越大 , 扩容的次数越少 , 但是因为实际存储的数据大了 , 俩个相同容量的HashMap加载因子越大的那个读取的速度更慢 , 所以我们需要根据自己的实际使用情况来进行判断 , 是要存储更多的数据呢 , 还是要更快的读取速度\n- 加载因子是会影响到扩容的次数的 , 如果加载因子太小的话HashMap会频繁的进行扩容 , 导致在存储的时候性能下降\n- 如果我们在创建HashMap时就已经知道了要存储的数据量 , 那么我们完全可以通过实际存储数量 ÷ 0.75来计算出我们初始化的HashMap容量 , 这样可以避免HashMap再进行扩容操作 , 提升代码效率\n\n>modCount\n\nHashMap不是线程安全的 , 也就是说你在操作的同时可能会有其它的线程也在操作该map,那样会造成脏数据 , 所以为了避免这种情况发生HashMap、ArrayList等使用了fail-fast策略 , 用modCount来记录修改集合修改次数\n\n我们在边迭代边删除集合元素时会碰到一个异常ConcurrentModificationException , 原因是不管你使用entrySet()方法也好 , keySet()方法也好 , 其实在for循环的时候还是会使用该集合内置的Iterator迭代器中的nextEntry()方法 , 如果你没有使用Iterator内置的remove()方法 , 那么迭代器内部的记录更改次数的值便不会被同步 , 当你下一次循环时调用nextEntry()方法便会抛出异常\n\n#### put方法\n\n![HashMap的put](https://raw.githubusercontent.com/13068098071/picode/main/img/image-20211224153116502.png)\n\n```java\n public V put(K key, V value) {\n     return putVal(hash(key) ,  key, value, false, true);\n }\n \n //关于onlyIfAbsent,evict的讲解在下面↓\n final V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                  boolean evict) {\n     Node<K,V>[] tab; \n     Node<K,V> p; \n     int n, i;\n     // 判断数组是否为空 , 为空则调用resize()方法进行初始化,resize()方法源码在下面↓\n     if ((tab = table) == null || (n = tab.length) == 0)\n          n = (tab = resize()).length;\n\n \t  // 如果当前数组索引位置的元素为null则直接创建新的节点并存到该索引位置的数组中\n \t  // 和JDK1.7的对比\n \t  //1. 其实这里的(n - 1) & hash就是JDK1.7中的indexFor()方法体中的(length - 1) & h,只不过在1.8中做了简化处理\n      if ((p = tab[i = (n - 1) & hash]) == null)\n          //2. tab[i] = newNode(hash, key, value, null);在JDK1.7中时在createEntry()方法中完成创建Entry的 , 在1.8中该方法也被删除了\n          tab[i] = newNode(hash, key, value, null);\n\t\t\t\n\t  // 走到这个else代码块中说明当前key已经在数组中存在了 || 发生了hash碰撞\n      else {\n          Node<K,V> e; K k;\n          // 判断当前key在数组中是否存在, 存在则不进行存储操作\n          // 有朋友好奇这里的p是在哪里初始化的, 其实在上一个if里面就被初始化了\n          if (p.hash == hash &&\n              ((k = p.key) == key || (key != null && key.equals(k))))\n              e = p;\n        \n          // 判断当前节点类型是否是红黑树节点\n          else if (p instanceof TreeNode)\n              // 将key、value存储到红黑树节点中 , 如果key已经存在 , 则返回之前的节点 , 源码解析在下面↓\n              e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n        \n          // 代码进入到这个else代码块就说明发生了hash碰撞\n          else {\n              // 该代码块中的e的初始化会有俩种情况\n              // ① e是最后一个节点的next元素,e == null\n              // ② e是和key相同的那个node\n              for (int binCount = 0; ; ++binCount) {\n                  // 判断当前节点是否是链表的最后一个节\n                  // ①\n                  if ((e = p.next) == null) {\n                      // 直接将当前要存储的key、value存储到上一个节点的next元素中\n                      // 在JDK1.7中的会先将之前存储的节点取出来, 然后将之前的节点作为新节点的next元素存储到数组中\n                      // 而在JDK1.8中会直接将新的节点放到之前存储节点的next元素中\n                      // 也就是说JDK1.7中的链表插入顺序是从头部开始插入, 而在1.8中时从尾部开始插入\n                      p.next = newNode(hash, key, value, null);\n                      // 因为这个循环是迭代链表的, 所以binCount代表着链表的长度, 如果链表长度超过阈值则会转换为红黑树\n                      if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                          // 转换红黑树的源码解析在下面↓\n                          treeifyBin(tab, hash);\n                      break;\n                  }\n                \n                  // 当前节点不是最后一个节点, 判断当前节点的key与要存储的key是否相同\n                  // ②\n                  if (e.hash == hash &&\n                      ((k = e.key) == key || (key != null && key.equals(k))))\n                      break;\n                  p = e;\n              }\n          }\n        \n  \t\t  // e在只有当前key已经存在时才会完成初始化], 这里是统一处理, 返回key之前对应的value, 并判断是否要替换value,默认是替换\n          if (e != null) { // existing mapping for key\n              V oldValue = e.value;\n              if (!onlyIfAbsent || oldValue == null)\n                  e.value = value;\n              // 这里是个空方法体\n              afterNodeAccess(e);\n              return oldValue;\n          }\n      }\n      ++modCount;\n \t  // 在JDK1.7中扩容操作是在存储数据之前发生的\n \t  // 在JDK1.8中扩容操作是在存储数据之后发生的\n      if (++size > threshold)\n          resize();\n\t  // 这里是个空方法体\n      afterNodeInsertion(evict);\n      return null;\n}\n```\n\n- 首先会判断哈希表Node<k,v>[] table是否为空或者null，是则进行resize()方法进行扩容，否则进入下一个阶段；\n- 根据key计算的hash值，hash值&（length-1）得到数组所在的存储位置table[i]，如果存储位置没有元素存放，则直接创建一个新Node；\n- 如果存储位置有元素存放，则接下来会判断该位置元素的hash值和key值是否和当前操作元素一致，如果一致，说明是修改value操作，直接进行覆盖；\n- 当前存储位置有元素，又不和当前操作元素一致，说明发生了hash冲突，在这里他又有两种方式，分别是链表和红黑树，区别就在于他们的头结点，如果头结点是treeNode，则说明此位置结构是红黑树方式插入；\n- 如果不是红黑树，则说明是单链表，将新增节点插入至链表的最后位置，但是这里还有一个判断点，判断当前链表长度是否大于等于8.如果是则将链表转化为红黑树，遍历过程如果key存在，则直接覆盖；\n- 最后就是判断当前存储键值对的数量，如果大于阈值值，则扩容；\n\n>onlyIfAbsent\n\nonlyIfAbsent：如果为true，则不更改现有值 , 也就是说不会用新的value来替换旧的value\n\n>##### `hash()`\n\n```java\nstatic final int hash(Object key) {\n    int h;\n    //高16位和低16位进行异或运算，增散列程度，减少hash碰撞发生的概率\n    return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n}\n```\n\n>**为什么HashMap的容量一定要是2的非零次方幂而且还要进行`hash & (length - 1)`的操作**\n\n如果容量是2的次方 , 那么length - 1得到的二进制的除了补位外都是1,根据&运算符的规则 , 0&0=0; 0&1=0; 1&1=1;那么也就意味着不论hash的值是什么 , 只要length - 1的二进制码是这样规律的 , 那么就可以保证hash的值只有和length - 1的同位参与了运算 , 例如二进制码A(10101011)&B(00001111)的结果就是C(00001011) , C的结果只会受到B二进制码后四位的影响 , 因为b的补位都是0 , 也就是说h & (length - 1)得到的索引不会大于length,也就不会越界\n\n#### resize方法\n\n```java\nfinal Node<K,V>[] resize() {\n   Node<K,V>[] oldTab = table;\n   int oldCap = (oldTab == null) ? 0 : oldTab.length;\n   int oldThr = threshold;\n   int newCap, newThr = 0;\n   // 进入到这个if代码块中说明此时table数组已经完成过初始化\n   if (oldCap > 0) {\n       // 判断当前容量是否已达到最大值\n       if (oldCap >= MAXIMUM_CAPACITY) {\n           threshold = Integer.MAX_VALUE;\n           return oldTab;\n       }\n     \n       // 将新数组的容量设置为旧容量的2倍\n       else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                oldCap >= DEFAULT_INITIAL_CAPACITY)\n           // 这一步的操作等同于 oldThr * 2\n           newThr = oldThr << 1; // double threshold\n   }\n\n   // 进入到这个代码块说明在创建HashMap时使用的有参构造器\n   // 在翻阅代码后我们发现threshold的值会在有参构造器中被初始化 , 此时被初始化了就会使用指定的容量来完成table数组的初始化\n   else if (oldThr > 0) // initial capacity was placed in threshold\n       newCap = oldThr;\n\n   // 进入到这个else代码块中说明数组还未完成初始化 , 进行初始化操作\n   else {               \n       newCap = DEFAULT_INITIAL_CAPACITY;\n       newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n   }\n \t\t\n   // 只有调用有参构造器才让newThr == 0,至于为什么不放到上面的else if中 , 可能是为以后扩展做铺垫吧\n   if (newThr == 0) {\n       float ft = (float)newCap * loadFactor;\n       newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                 (int)ft : Integer.MAX_VALUE);\n   }\n   threshold = newThr;\n   @SuppressWarnings({\"rawtypes\" , \"unchecked\"})\n   // 初始化新数组\n   Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n   table = newTab;\n   if (oldTab != null) {\n       for (int j = 0; j < oldCap; ++j) {\n           Node<K,V> e;\n           if ((e = oldTab[j]) != null) {\n               oldTab[j] = null;\n               // 如果当前不是链表则会直接将当前元素放到新数组中旧元素所在索引位置\n               // 至于为什么 , 在下面会有详细讲解↓\n               if (e.next == null)\n                   newTab[e.hash & (newCap - 1)] = e;\n             \t\n               // 如果当前元素是红黑树的节点\n               else if (e instanceof TreeNode)\n                   ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n             \n               // 进入这个代码块中说明当前数组元素是链表\n               else {\n                   // loHead和loTail存储的是转移数据后仍然存储在当前索引位置的元素\n                   Node<K,V> loHead = null, loTail = null;\n                   // hiHead和hiTail存储的是转移数据后存储到[j + oldCap]索引位置的元素\n                   // 这里看不懂没事 , 接着往下看就明白了\n                   Node<K,V> hiHead = null, hiTail = null;\n                   Node<K,V> next;\n                 e = 1 e.next = 2 e.next.next = 3\n\n                   do {\n                       // 为了方便讲明白这个循环里面的源码,我们来举个例子,假设此时链表有3个元素a,b,c\n                       // 第一次循环进入到① | ②\n                       // tail元素肯定为null,所以会将当前e赋值给head元素,并且为tail赋值,以便下次循环\n                       // 此时head元素会含有e的链表关系即next元素指针,此时就是e=a  head=a  tail=a\n                       \n                       // 第二次循环进入① | ②\n                       // 还是会通过第一次进入时的索引判断 , 所以此时tail元素不会为null,\n                       // 此时就是 e=b  head=a  head.next=b  tail=b  tail.next=b\n                       // 因为在第一次进入的时候head和tail是同时指向e的\n                       // 所以此时tail.next=b也就意味着head.next=b,所以才会先在else代码块中完成tail.next的初始化\n                       // 再完成tail的初始化\n                       \n                   \t   // 第三次循环进入① | ② 就是 e=c  head=a  tail=c  tail.next=c  head.next.next=c\n                   \t   // 以此类推....\n                       next = e.next;\n                       // 这里会根据(e.hash & oldCap) == 0来将链表划分为俩部分 , 一部分仍然存储在旧链表的索引位置 , 另一部分存储到新数组的[j + oldCap]索引位置\n                       if ((e.hash & oldCap) == 0) {\n                           // ①\n                           if (loTail == null)\n                               loHead = e;\n                           // ②\n                           else\n                               loTail.next = e;\n                           loTail = e;\n                       }\n                       else {\n                           // ①\n                           if (hiTail == null)\n                               hiHead = e;\n                           // ②\n                           else\n                               hiTail.next = e;\n                           hiTail = e;\n                       }\n                   } while ((e = next) != null);\n                   // 将loHead存储到新数组的旧索引位置\n                   if (loTail != null) {\n                       loTail.next = null;\n                       newTab[j] = loHead;\n                   }\n                   // 将hiHead存储到新数组的[j + oldCap]索引位置\n                   if (hiTail != null) {\n                       hiTail.next = null;\n                       newTab[j + oldCap] = hiHead;\n                   }\n               }\n           }\n       }\n   }\n   return newTab;\n}\n```\n\n#### get方法\n\n![HashMap的get](https://raw.githubusercontent.com/13068098071/picode/main/img/image-20211224154248251.png)\n\n```java\npublic V get(Object key) {\n    Node<K,V> e;\n    return (e = getNode(hash(key) ,  key)) == null ? null : e.value;\n}\n\nfinal Node<K,V> getNode(int hash, Object key) {\n    Node<K,V>[] tab; Node<K,V> first, e; int n; K k;\n    // 计算索引位置并判断当前索引位置是否存在元素\n    if ((tab = table) != null && (n = tab.length) > 0 &&\n        (first = tab[(n - 1) & hash]) != null) {\n        // 判断当前元素是否与要取得值相等\n        if (first.hash == hash && // always check first node\n            ((k = first.key) == key || (key != null && key.equals(k))))\n            return first;\n        // 判断当前元素是否有next元素\n        if ((e = first.next) != null) {\n            // 判断当前元素是否是红黑树节点\n            if (first instanceof TreeNode)\n                // 寻找红黑树中与要取值相等的节点\n                return ((TreeNode<K,V>)first).getTreeNode(hash, key);\n            // 迭代链表\n            do {\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    return e;\n            } while ((e = e.next) != null);\n        }\n    }\n    return null;\n}\n```\n\n### 1.7和1.8对比\n\n|              | 1.7                            | 1.8                               |\n| ------------ | ------------------------------ | --------------------------------- |\n| 数据结构     | 数组 + 链表                    | 数组 + 链表 + 红黑树              |\n| 节点         | Entry                          | Node TreeNode                     |\n| Hash算法     | 较为复杂                       | 异或hash右移16位                  |\n| 对Null的处理 | 单独写一个putForNull()方法处理 | 作为以一个Hash值为0的普通节点处理 |\n| 初始化       | 赋值给一个空数组，put时初始化  | 没有赋值，懒加载，put时初始化     |\n| 扩容         | 插入前扩容                     | 插入后，初始化，树化时扩容        |\n| 节点插入     | 头插法                         | 尾插法                            |\n\n参看文档：https://blog.csdn.net/weixin_44141495/article/details/108402128\n\n### 常见问题\n\n>**什么时候扩容**\n\n1. 当前容量超过阈值\n2. 当链表中元素个数超过默认设定（8个），当数组的大小还未超过64的时候，此时进行数组的扩容，如果超过则将链表转化成红黑树\n\n>**什么时候链表转化为红黑树**\n\n当数组大小已经超过64并且链表中的元素个数超过默认设定（8个）时，将链表转化为红黑树\n\n> **为什么HashMap的初始容量是16，扩容时一定要是2的n次方**\n\nindex = HashCode（key） & (length-1)\n\n以值为“book”的Key来演示：\n\n1. 计算book的hashcode，结果为十进制的3029737，二进制的101110001110101110 1001。\n2. 假定HashMap长度是默认的16，计算Length-1的结果为十进制的15，二进制的1111。\n3. 把以上两个结果做与运算，101110001110101110 1001 & 1111 = 1001，十进制是9，所以 index=9。\n\n**Hash算法最终得到的index结果，完全取决于Key的Hashcode值的最后几位**\n\n假设HashMap的长度是10，重复刚才的运算步骤：\n\n![img](https://img-blog.csdnimg.cn/20190109165033757.jpg)\n\n单独看这个结果，表面上并没有问题。我们再来尝试一个新的HashCode 101110001110101110 **1011** ：\n\n![img](https://img-blog.csdnimg.cn/20190109165144678.jpg)\n\n虽然HashCode的倒数第二第三位从0变成了1，但是运算的结果都是1001。也就是说，当HashMap长度为10的时候，有些index结果的出现几率会更大，而有些index结果永远不会出现.这样，显然不符合Hash算法均匀分布的原则。\n\n反观长度16或者其他2的幂，Length-1的值是所有二进制位全为1，这种情况下，index的结果等同于HashCode后几位的值。只要输入的HashCode本身分布均匀，Hash算法的结果就是均匀的。\n\n**总结**\n\n- 取模运算效率很低，为了实现高效的Hash算法，HashMap的采用了位运算的方式\n- 为了Hash算法的结果就是均匀的\n\n> 深入理解HashMap线程不安全的体现\n\nhttps://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653192000&idx=1&sn=118cee6d1c67e7b8e4f762af3e61643e&chksm=8c990d9abbee848c739aeaf25893ae4382eca90642f65fc9b8eb76d58d6e7adebe65da03f80d&scene=21#wechat_redirect\n\n> 如何处理hash冲突\n\n- 开发定址法：既然当前位置容不下冲突的元素了，那就再找一个空的位置存储 Hash 冲突的值（当前 index 冲突了，那么将冲突的元素放在 index+1)。\n\n- 再散列法：换一个 Hash 算法再计算一个 hash 值，如果不冲突了就存储值（例如第一个算法是名字的首字母的 Hash 值，如果冲突了，计算名字的第二个字母的 Hash 值，如果冲突解决了则将值放入数组中）。\n\n- 链地址法：每个数组中都存有一个单链表，发生 Hash 冲突时，只是将冲突的 value 当作新节点插入到链表（HashMap 解决冲突的办法）。\n\n- 公共溢出区法：将冲突的 value 都存到另外一个顺序表中，查找时如果当前表没有对应值，则去溢出区进行顺序查找。\n  ","slug":"HashMap","published":1,"updated":"2021-12-24T08:39:43.951Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxk8uw0b0003virj18kqaip2","content":"<h2 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h2><h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p> 在<code>JDK1.7</code>中HashMap的数据结构是<code>数组 + 链表</code> , 而在<code>JDK1.8</code>中则演化成了<code>数组 + 链表 + 红黑树</code>的结构 , 这也是1.8中最大的更新 , 下面我们来探究一下为何要演化为<code>数组 + 链表 + 红黑树</code>这样的数据结构</p>\n<p>我们知道在1.7中当产生了<code>hash碰撞</code>时便会将当前<code>Entry</code>变成链表 , 单向链表查找除了<code>head</code>节点外的时间复杂度都是<code>O(n)</code> , 如果频繁的发生了<code>hash碰撞</code>每次查找元素都是非常耗费时间的 , 所以为了避免这一现象1.8中引入了红黑树</p>\n<p>红黑树的插入、查找的时间复杂度都是<code>O(log n)</code> , 假如你的红黑树里面有256个数据 , 此时只需要8次就能找到目标数据 , 即使是65536个数据也只需要16次即可 , 效率相比链表而言提升的非常大</p>\n<p>HashMap转为红黑树后存储的数据结构图</p>\n<p><img src=\"https://raw.githubusercontent.com/13068098071/picode/main/img/image-20211224152017394.png\" alt=\"1.8HashMap存储\"></p>\n<h3 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h3><h4 id=\"核心参数\"><a href=\"#核心参数\" class=\"headerlink\" title=\"核心参数\"></a>核心参数</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//默认初始化table数组容量16</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_INITIAL_CAPACITY = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">4</span>; <span class=\"comment\">// aka 16</span></span><br><span class=\"line\">  \t\t\t</span><br><span class=\"line\"><span class=\"comment\">//table最大容量1073741824</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAXIMUM_CAPACITY = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//默认加载因子, 即当现有数组长度达到容量的75%时会进行扩容操作</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> DEFAULT_LOAD_FACTOR = <span class=\"number\">0.75f</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//1.8新增 当链表的长度 &gt;=8 - 1 时会转换为红黑树, 关于为什么要定义为8的详细解读在下面↓</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TREEIFY_THRESHOLD = <span class=\"number\">8</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//1.8新增 当红黑树的长度 &lt;=6 时会转换为链表, 关于为什么红黑树 → 链表的阈值是6的详细解读在下面↓</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> UNTREEIFY_THRESHOLD = <span class=\"number\">6</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//1.8新增 红黑树的最小容量</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MIN_TREEIFY_CAPACITY = <span class=\"number\">64</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//定义一个类型为Node&lt;K,V&gt;的table数组</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//table数组的长度</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实际的扩容的阈值 threshold = 容量 * 加载因子</span></span><br><span class=\"line\"><span class=\"comment\">//在构造器中会被初始化为DEFAULT_INITIAL_CAPACITY的值16</span></span><br><span class=\"line\"><span class=\"comment\">//在第一次存储数据时会在inflateTable()方法中再次赋值threshold = (int) Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + 1);</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> threshold;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实际的加载因子, 在构造器中进行初始化</span></span><br><span class=\"line\"><span class=\"comment\">//如果创建HashMap时没有指定loadFactor的大小则会初始化为DEFAULT_INITIAL_CAPACITY的值</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">float</span> loadFactor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//HashMap更改的次数</span></span><br><span class=\"line\"><span class=\"comment\">//用来作为并发下判断是否有其它线程修改了该HashMap,抛出ConcurrentModificationException</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> modCount;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在初始化时指定初始长度及加载因子的构造器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity, <span class=\"keyword\">float</span> loadFactor)</span> </span>&#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在初始化时指定初始长度的构造器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;</span><br><span class=\"line\">  \t<span class=\"comment\">//这里调用的其实还是上面的构造器</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//什么也不指定的构造器 , 这里不像1.7中还是去调用了有参构造器 , 具体原因下面会有分析</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<h5 id=\"TREEIFY-THRESHOLD\"><a href=\"#TREEIFY-THRESHOLD\" class=\"headerlink\" title=\"TREEIFY_THRESHOLD\"></a><code>TREEIFY_THRESHOLD</code></h5></blockquote>\n<p>这个参数是链表转换成红黑树的阈值，TREEIFY_THRESHOLD = 8</p>\n<ol>\n<li><p>为什么不在一开始就使用红黑树来替代链表</p>\n<p>相同数据量下红黑树(TreeNode)占用的空间是链表(Node)的俩倍 , 考虑到时间和空间的权衡 , 只有当链表的长度达到阈值时才会将其转成红黑树</p>\n</li>\n<li><p>为什么链表 → 红黑树的阈值是8呢?</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* In usages with well-distributed user hashCodes, tree bins are</span><br><span class=\"line\">* rarely used.  Ideally, under random hashCodes, the frequency of</span><br><span class=\"line\">* nodes in bins follows a Poisson distribution</span><br><span class=\"line\">* (http:<span class=\"comment\">//en.wikipedia.org/wiki/Poisson_distribution) with a</span></span><br><span class=\"line\">* parameter of about <span class=\"number\">0.5</span> on average <span class=\"keyword\">for</span> the <span class=\"keyword\">default</span> resizing</span><br><span class=\"line\">* threshold of <span class=\"number\">0.75</span>, although with a large variance because of</span><br><span class=\"line\">* resizing granularity. Ignoring variance, the expected</span><br><span class=\"line\">* <span class=\"function\">occurrences of list size k <span class=\"title\">are</span> <span class=\"params\">(exp(-<span class=\"number\">0.5</span>)</span> * <span class=\"title\">pow</span><span class=\"params\">(<span class=\"number\">0.5</span>, k)</span> /</span></span><br><span class=\"line\"><span class=\"function\">* <span class=\"title\">factorial</span><span class=\"params\">(k)</span>). The first values are:</span></span><br><span class=\"line\"><span class=\"function\">*</span></span><br><span class=\"line\"><span class=\"function\">* 0:    0.60653066</span></span><br><span class=\"line\"><span class=\"function\">* 1:    0.30326533</span></span><br><span class=\"line\"><span class=\"function\">* 2:    0.07581633</span></span><br><span class=\"line\"><span class=\"function\">* 3:    0.01263606</span></span><br><span class=\"line\"><span class=\"function\">* 4:    0.00157952</span></span><br><span class=\"line\"><span class=\"function\">* 5:    0.00015795</span></span><br><span class=\"line\"><span class=\"function\">* 6:    0.00001316</span></span><br><span class=\"line\"><span class=\"function\">* 7:    0.00000094</span></span><br><span class=\"line\"><span class=\"function\">* 8:    0.00000006</span></span><br><span class=\"line\"><span class=\"function\">* more: less than 1 in ten million</span></span><br></pre></td></tr></table></figure>\n\n<p>HashMap的作者认为在理想的情况下随机hashCode算法下所有节点的分布频率会遵循<a href=\"http://en.wikipedia.org/wiki/Poisson_distribution\">泊松分布(Poisson distribution)</a> , 上面也列举了链表长度达到8的概率是0.00000006,也就是说我们几乎不可能会使用到红黑树 , 所以作者使用8作为一个分水岭</p>\n</li>\n</ol>\n<blockquote>\n<p>UNTREEIFY_THRESHOLD</p>\n</blockquote>\n<p>为何链表 → 红黑树的阈值，UNTREEIFY_THRESHOLD = 6</p>\n<ol>\n<li><p>为何链表 → 红黑树的阈值是6</p>\n<p>假设UNTREEIFY_THRESHOLD的 = 7 , 当我们有频繁的添加和删除操作时 , hash碰撞产生的节点数量 一旦在7附件徘徊就会造成红黑树和链表的频繁转换 , 此时我们大多数的性能就都耗费在了链表 → 红黑树和红黑树 → 链表` ,这样反而就得不偿失了 , 所以作者将长度为7作为一个缓存地段从而选取了6作为红黑树 → 链表的阈值</p>\n</li>\n</ol>\n<blockquote>\n<p>loadFactor</p>\n</blockquote>\n<ul>\n<li>加载因子并不是越大越好的 , 虽然加载因子越大就意味着HashMap的实际容量越大 , 扩容的次数越少 , 但是因为实际存储的数据大了 , 俩个相同容量的HashMap加载因子越大的那个读取的速度更慢 , 所以我们需要根据自己的实际使用情况来进行判断 , 是要存储更多的数据呢 , 还是要更快的读取速度</li>\n<li>加载因子是会影响到扩容的次数的 , 如果加载因子太小的话HashMap会频繁的进行扩容 , 导致在存储的时候性能下降</li>\n<li>如果我们在创建HashMap时就已经知道了要存储的数据量 , 那么我们完全可以通过实际存储数量 ÷ 0.75来计算出我们初始化的HashMap容量 , 这样可以避免HashMap再进行扩容操作 , 提升代码效率</li>\n</ul>\n<blockquote>\n<p>modCount</p>\n</blockquote>\n<p>HashMap不是线程安全的 , 也就是说你在操作的同时可能会有其它的线程也在操作该map,那样会造成脏数据 , 所以为了避免这种情况发生HashMap、ArrayList等使用了fail-fast策略 , 用modCount来记录修改集合修改次数</p>\n<p>我们在边迭代边删除集合元素时会碰到一个异常ConcurrentModificationException , 原因是不管你使用entrySet()方法也好 , keySet()方法也好 , 其实在for循环的时候还是会使用该集合内置的Iterator迭代器中的nextEntry()方法 , 如果你没有使用Iterator内置的remove()方法 , 那么迭代器内部的记录更改次数的值便不会被同步 , 当你下一次循环时调用nextEntry()方法便会抛出异常</p>\n<h4 id=\"put方法\"><a href=\"#put方法\" class=\"headerlink\" title=\"put方法\"></a>put方法</h4><p><img src=\"https://raw.githubusercontent.com/13068098071/picode/main/img/image-20211224153116502.png\" alt=\"HashMap的put\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> putVal(hash(key) ,  key, value, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//关于onlyIfAbsent,evict的讲解在下面↓</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">final</span> V <span class=\"title\">putVal</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, K key, V value, <span class=\"keyword\">boolean</span> onlyIfAbsent,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                  <span class=\"keyword\">boolean</span> evict)</span> </span>&#123;</span><br><span class=\"line\">     Node&lt;K,V&gt;[] tab; </span><br><span class=\"line\">     Node&lt;K,V&gt; p; </span><br><span class=\"line\">     <span class=\"keyword\">int</span> n, i;</span><br><span class=\"line\">     <span class=\"comment\">// 判断数组是否为空 , 为空则调用resize()方法进行初始化,resize()方法源码在下面↓</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> ((tab = table) == <span class=\"keyword\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">          n = (tab = resize()).length;</span><br><span class=\"line\"></span><br><span class=\"line\"> \t  <span class=\"comment\">// 如果当前数组索引位置的元素为null则直接创建新的节点并存到该索引位置的数组中</span></span><br><span class=\"line\"> \t  <span class=\"comment\">// 和JDK1.7的对比</span></span><br><span class=\"line\"> \t  <span class=\"comment\">//1. 其实这里的(n - 1) &amp; hash就是JDK1.7中的indexFor()方法体中的(length - 1) &amp; h,只不过在1.8中做了简化处理</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((p = tab[i = (n - <span class=\"number\">1</span>) &amp; hash]) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">          <span class=\"comment\">//2. tab[i] = newNode(hash, key, value, null);在JDK1.7中时在createEntry()方法中完成创建Entry的 , 在1.8中该方法也被删除了</span></span><br><span class=\"line\">          tab[i] = newNode(hash, key, value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t  <span class=\"comment\">// 走到这个else代码块中说明当前key已经在数组中存在了 || 发生了hash碰撞</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          Node&lt;K,V&gt; e; K k;</span><br><span class=\"line\">          <span class=\"comment\">// 判断当前key在数组中是否存在, 存在则不进行存储操作</span></span><br><span class=\"line\">          <span class=\"comment\">// 有朋友好奇这里的p是在哪里初始化的, 其实在上一个if里面就被初始化了</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (p.hash == hash &amp;&amp;</span><br><span class=\"line\">              ((k = p.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">              e = p;</span><br><span class=\"line\">        </span><br><span class=\"line\">          <span class=\"comment\">// 判断当前节点类型是否是红黑树节点</span></span><br><span class=\"line\">          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">              <span class=\"comment\">// 将key、value存储到红黑树节点中 , 如果key已经存在 , 则返回之前的节点 , 源码解析在下面↓</span></span><br><span class=\"line\">              e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class=\"keyword\">this</span>, tab, hash, key, value);</span><br><span class=\"line\">        </span><br><span class=\"line\">          <span class=\"comment\">// 代码进入到这个else代码块就说明发生了hash碰撞</span></span><br><span class=\"line\">          <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              <span class=\"comment\">// 该代码块中的e的初始化会有俩种情况</span></span><br><span class=\"line\">              <span class=\"comment\">// ① e是最后一个节点的next元素,e == null</span></span><br><span class=\"line\">              <span class=\"comment\">// ② e是和key相同的那个node</span></span><br><span class=\"line\">              <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> binCount = <span class=\"number\">0</span>; ; ++binCount) &#123;</span><br><span class=\"line\">                  <span class=\"comment\">// 判断当前节点是否是链表的最后一个节</span></span><br><span class=\"line\">                  <span class=\"comment\">// ①</span></span><br><span class=\"line\">                  <span class=\"keyword\">if</span> ((e = p.next) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                      <span class=\"comment\">// 直接将当前要存储的key、value存储到上一个节点的next元素中</span></span><br><span class=\"line\">                      <span class=\"comment\">// 在JDK1.7中的会先将之前存储的节点取出来, 然后将之前的节点作为新节点的next元素存储到数组中</span></span><br><span class=\"line\">                      <span class=\"comment\">// 而在JDK1.8中会直接将新的节点放到之前存储节点的next元素中</span></span><br><span class=\"line\">                      <span class=\"comment\">// 也就是说JDK1.7中的链表插入顺序是从头部开始插入, 而在1.8中时从尾部开始插入</span></span><br><span class=\"line\">                      p.next = newNode(hash, key, value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                      <span class=\"comment\">// 因为这个循环是迭代链表的, 所以binCount代表着链表的长度, 如果链表长度超过阈值则会转换为红黑树</span></span><br><span class=\"line\">                      <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"number\">1</span>) <span class=\"comment\">// -1 for 1st</span></span><br><span class=\"line\">                          <span class=\"comment\">// 转换红黑树的源码解析在下面↓</span></span><br><span class=\"line\">                          treeifyBin(tab, hash);</span><br><span class=\"line\">                      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                  <span class=\"comment\">// 当前节点不是最后一个节点, 判断当前节点的key与要存储的key是否相同</span></span><br><span class=\"line\">                  <span class=\"comment\">// ②</span></span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                      ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                  p = e;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">  \t\t  <span class=\"comment\">// e在只有当前key已经存在时才会完成初始化], 这里是统一处理, 返回key之前对应的value, 并判断是否要替换value,默认是替换</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// existing mapping for key</span></span><br><span class=\"line\">              V oldValue = e.value;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (!onlyIfAbsent || oldValue == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                  e.value = value;</span><br><span class=\"line\">              <span class=\"comment\">// 这里是个空方法体</span></span><br><span class=\"line\">              afterNodeAccess(e);</span><br><span class=\"line\">              <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      ++modCount;</span><br><span class=\"line\"> \t  <span class=\"comment\">// 在JDK1.7中扩容操作是在存储数据之前发生的</span></span><br><span class=\"line\"> \t  <span class=\"comment\">// 在JDK1.8中扩容操作是在存储数据之后发生的</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (++size &gt; threshold)</span><br><span class=\"line\">          resize();</span><br><span class=\"line\">\t  <span class=\"comment\">// 这里是个空方法体</span></span><br><span class=\"line\">      afterNodeInsertion(evict);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先会判断哈希表Node&lt;k,v&gt;[] table是否为空或者null，是则进行resize()方法进行扩容，否则进入下一个阶段；</li>\n<li>根据key计算的hash值，hash值&amp;（length-1）得到数组所在的存储位置table[i]，如果存储位置没有元素存放，则直接创建一个新Node；</li>\n<li>如果存储位置有元素存放，则接下来会判断该位置元素的hash值和key值是否和当前操作元素一致，如果一致，说明是修改value操作，直接进行覆盖；</li>\n<li>当前存储位置有元素，又不和当前操作元素一致，说明发生了hash冲突，在这里他又有两种方式，分别是链表和红黑树，区别就在于他们的头结点，如果头结点是treeNode，则说明此位置结构是红黑树方式插入；</li>\n<li>如果不是红黑树，则说明是单链表，将新增节点插入至链表的最后位置，但是这里还有一个判断点，判断当前链表长度是否大于等于8.如果是则将链表转化为红黑树，遍历过程如果key存在，则直接覆盖；</li>\n<li>最后就是判断当前存储键值对的数量，如果大于阈值值，则扩容；</li>\n</ul>\n<blockquote>\n<p>onlyIfAbsent</p>\n</blockquote>\n<p>onlyIfAbsent：如果为true，则不更改现有值 , 也就是说不会用新的value来替换旧的value</p>\n<blockquote>\n<h5 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash()\"></a><code>hash()</code></h5></blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h;</span><br><span class=\"line\">    <span class=\"comment\">//高16位和低16位进行异或运算，增散列程度，减少hash碰撞发生的概率</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (key == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>为什么HashMap的容量一定要是2的非零次方幂而且还要进行<code>hash &amp; (length - 1)</code>的操作</strong></p>\n</blockquote>\n<p>如果容量是2的次方 , 那么length - 1得到的二进制的除了补位外都是1,根据&amp;运算符的规则 , 0&amp;0=0; 0&amp;1=0; 1&amp;1=1;那么也就意味着不论hash的值是什么 , 只要length - 1的二进制码是这样规律的 , 那么就可以保证hash的值只有和length - 1的同位参与了运算 , 例如二进制码A(10101011)&amp;B(00001111)的结果就是C(00001011) , C的结果只会受到B二进制码后四位的影响 , 因为b的补位都是0 , 也就是说h &amp; (length - 1)得到的索引不会大于length,也就不会越界</p>\n<h4 id=\"resize方法\"><a href=\"#resize方法\" class=\"headerlink\" title=\"resize方法\"></a>resize方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class=\"line\">   Node&lt;K,V&gt;[] oldTab = table;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> oldCap = (oldTab == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : oldTab.length;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> oldThr = threshold;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> newCap, newThr = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"comment\">// 进入到这个if代码块中说明此时table数组已经完成过初始化</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (oldCap &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 判断当前容量是否已达到最大值</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">           threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> oldTab;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">       <span class=\"comment\">// 将新数组的容量设置为旧容量的2倍</span></span><br><span class=\"line\">       <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((newCap = oldCap &lt;&lt; <span class=\"number\">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class=\"line\">                oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class=\"line\">           <span class=\"comment\">// 这一步的操作等同于 oldThr * 2</span></span><br><span class=\"line\">           newThr = oldThr &lt;&lt; <span class=\"number\">1</span>; <span class=\"comment\">// double threshold</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 进入到这个代码块说明在创建HashMap时使用的有参构造器</span></span><br><span class=\"line\">   <span class=\"comment\">// 在翻阅代码后我们发现threshold的值会在有参构造器中被初始化 , 此时被初始化了就会使用指定的容量来完成table数组的初始化</span></span><br><span class=\"line\">   <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldThr &gt; <span class=\"number\">0</span>) <span class=\"comment\">// initial capacity was placed in threshold</span></span><br><span class=\"line\">       newCap = oldThr;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 进入到这个else代码块中说明数组还未完成初始化 , 进行初始化操作</span></span><br><span class=\"line\">   <span class=\"keyword\">else</span> &#123;               </span><br><span class=\"line\">       newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class=\"line\">       newThr = (<span class=\"keyword\">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> \t\t</span><br><span class=\"line\">   <span class=\"comment\">// 只有调用有参构造器才让newThr == 0,至于为什么不放到上面的else if中 , 可能是为以后扩展做铺垫吧</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (newThr == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">float</span> ft = (<span class=\"keyword\">float</span>)newCap * loadFactor;</span><br><span class=\"line\">       newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class=\"keyword\">float</span>)MAXIMUM_CAPACITY ?</span><br><span class=\"line\">                 (<span class=\"keyword\">int</span>)ft : Integer.MAX_VALUE);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   threshold = newThr;</span><br><span class=\"line\">   <span class=\"meta\">@SuppressWarnings(&#123;&quot;rawtypes&quot; , &quot;unchecked&quot;&#125;)</span></span><br><span class=\"line\">   <span class=\"comment\">// 初始化新数组</span></span><br><span class=\"line\">   Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node[newCap];</span><br><span class=\"line\">   table = newTab;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (oldTab != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class=\"line\">           Node&lt;K,V&gt; e;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> ((e = oldTab[j]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">               oldTab[j] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">               <span class=\"comment\">// 如果当前不是链表则会直接将当前元素放到新数组中旧元素所在索引位置</span></span><br><span class=\"line\">               <span class=\"comment\">// 至于为什么 , 在下面会有详细讲解↓</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (e.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                   newTab[e.hash &amp; (newCap - <span class=\"number\">1</span>)] = e;</span><br><span class=\"line\">             \t</span><br><span class=\"line\">               <span class=\"comment\">// 如果当前元素是红黑树的节点</span></span><br><span class=\"line\">               <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                   ((TreeNode&lt;K,V&gt;)e).split(<span class=\"keyword\">this</span>, newTab, j, oldCap);</span><br><span class=\"line\">             </span><br><span class=\"line\">               <span class=\"comment\">// 进入这个代码块中说明当前数组元素是链表</span></span><br><span class=\"line\">               <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                   <span class=\"comment\">// loHead和loTail存储的是转移数据后仍然存储在当前索引位置的元素</span></span><br><span class=\"line\">                   Node&lt;K,V&gt; loHead = <span class=\"keyword\">null</span>, loTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                   <span class=\"comment\">// hiHead和hiTail存储的是转移数据后存储到[j + oldCap]索引位置的元素</span></span><br><span class=\"line\">                   <span class=\"comment\">// 这里看不懂没事 , 接着往下看就明白了</span></span><br><span class=\"line\">                   Node&lt;K,V&gt; hiHead = <span class=\"keyword\">null</span>, hiTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                   Node&lt;K,V&gt; next;</span><br><span class=\"line\">                 e = <span class=\"number\">1</span> e.next = <span class=\"number\">2</span> e.next.next = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">                   <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                       <span class=\"comment\">// 为了方便讲明白这个循环里面的源码,我们来举个例子,假设此时链表有3个元素a,b,c</span></span><br><span class=\"line\">                       <span class=\"comment\">// 第一次循环进入到① | ②</span></span><br><span class=\"line\">                       <span class=\"comment\">// tail元素肯定为null,所以会将当前e赋值给head元素,并且为tail赋值,以便下次循环</span></span><br><span class=\"line\">                       <span class=\"comment\">// 此时head元素会含有e的链表关系即next元素指针,此时就是e=a  head=a  tail=a</span></span><br><span class=\"line\">                       </span><br><span class=\"line\">                       <span class=\"comment\">// 第二次循环进入① | ②</span></span><br><span class=\"line\">                       <span class=\"comment\">// 还是会通过第一次进入时的索引判断 , 所以此时tail元素不会为null,</span></span><br><span class=\"line\">                       <span class=\"comment\">// 此时就是 e=b  head=a  head.next=b  tail=b  tail.next=b</span></span><br><span class=\"line\">                       <span class=\"comment\">// 因为在第一次进入的时候head和tail是同时指向e的</span></span><br><span class=\"line\">                       <span class=\"comment\">// 所以此时tail.next=b也就意味着head.next=b,所以才会先在else代码块中完成tail.next的初始化</span></span><br><span class=\"line\">                       <span class=\"comment\">// 再完成tail的初始化</span></span><br><span class=\"line\">                       </span><br><span class=\"line\">                   \t   <span class=\"comment\">// 第三次循环进入① | ② 就是 e=c  head=a  tail=c  tail.next=c  head.next.next=c</span></span><br><span class=\"line\">                   \t   <span class=\"comment\">// 以此类推....</span></span><br><span class=\"line\">                       next = e.next;</span><br><span class=\"line\">                       <span class=\"comment\">// 这里会根据(e.hash &amp; oldCap) == 0来将链表划分为俩部分 , 一部分仍然存储在旧链表的索引位置 , 另一部分存储到新数组的[j + oldCap]索引位置</span></span><br><span class=\"line\">                       <span class=\"keyword\">if</span> ((e.hash &amp; oldCap) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                           <span class=\"comment\">// ①</span></span><br><span class=\"line\">                           <span class=\"keyword\">if</span> (loTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                               loHead = e;</span><br><span class=\"line\">                           <span class=\"comment\">// ②</span></span><br><span class=\"line\">                           <span class=\"keyword\">else</span></span><br><span class=\"line\">                               loTail.next = e;</span><br><span class=\"line\">                           loTail = e;</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                       <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                           <span class=\"comment\">// ①</span></span><br><span class=\"line\">                           <span class=\"keyword\">if</span> (hiTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                               hiHead = e;</span><br><span class=\"line\">                           <span class=\"comment\">// ②</span></span><br><span class=\"line\">                           <span class=\"keyword\">else</span></span><br><span class=\"line\">                               hiTail.next = e;</span><br><span class=\"line\">                           hiTail = e;</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125; <span class=\"keyword\">while</span> ((e = next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                   <span class=\"comment\">// 将loHead存储到新数组的旧索引位置</span></span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (loTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                       loTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                       newTab[j] = loHead;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   <span class=\"comment\">// 将hiHead存储到新数组的[j + oldCap]索引位置</span></span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (hiTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                       hiTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                       newTab[j + oldCap] = hiHead;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> newTab;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"get方法\"><a href=\"#get方法\" class=\"headerlink\" title=\"get方法\"></a>get方法</h4><p><img src=\"https://raw.githubusercontent.com/13068098071/picode/main/img/image-20211224154248251.png\" alt=\"HashMap的get\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt; e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (e = getNode(hash(key) ,  key)) == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : e.value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> Node&lt;K,V&gt; <span class=\"title\">getNode</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, Object key)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class=\"keyword\">int</span> n; K k;</span><br><span class=\"line\">    <span class=\"comment\">// 计算索引位置并判断当前索引位置是否存在元素</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) != <span class=\"keyword\">null</span> &amp;&amp; (n = tab.length) &gt; <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        (first = tab[(n - <span class=\"number\">1</span>) &amp; hash]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断当前元素是否与要取得值相等</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first.hash == hash &amp;&amp; <span class=\"comment\">// always check first node</span></span><br><span class=\"line\">            ((k = first.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> first;</span><br><span class=\"line\">        <span class=\"comment\">// 判断当前元素是否有next元素</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((e = first.next) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断当前元素是否是红黑树节点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (first <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                <span class=\"comment\">// 寻找红黑树中与要取值相等的节点</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class=\"line\">            <span class=\"comment\">// 迭代链表</span></span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                    ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> ((e = e.next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-7和1-8对比\"><a href=\"#1-7和1-8对比\" class=\"headerlink\" title=\"1.7和1.8对比\"></a>1.7和1.8对比</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>1.7</th>\n<th>1.8</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数据结构</td>\n<td>数组 + 链表</td>\n<td>数组 + 链表 + 红黑树</td>\n</tr>\n<tr>\n<td>节点</td>\n<td>Entry</td>\n<td>Node TreeNode</td>\n</tr>\n<tr>\n<td>Hash算法</td>\n<td>较为复杂</td>\n<td>异或hash右移16位</td>\n</tr>\n<tr>\n<td>对Null的处理</td>\n<td>单独写一个putForNull()方法处理</td>\n<td>作为以一个Hash值为0的普通节点处理</td>\n</tr>\n<tr>\n<td>初始化</td>\n<td>赋值给一个空数组，put时初始化</td>\n<td>没有赋值，懒加载，put时初始化</td>\n</tr>\n<tr>\n<td>扩容</td>\n<td>插入前扩容</td>\n<td>插入后，初始化，树化时扩容</td>\n</tr>\n<tr>\n<td>节点插入</td>\n<td>头插法</td>\n<td>尾插法</td>\n</tr>\n</tbody></table>\n<p>参看文档：<a href=\"https://blog.csdn.net/weixin_44141495/article/details/108402128\">https://blog.csdn.net/weixin_44141495/article/details/108402128</a></p>\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><blockquote>\n<p><strong>什么时候扩容</strong></p>\n</blockquote>\n<ol>\n<li>当前容量超过阈值</li>\n<li>当链表中元素个数超过默认设定（8个），当数组的大小还未超过64的时候，此时进行数组的扩容，如果超过则将链表转化成红黑树</li>\n</ol>\n<blockquote>\n<p><strong>什么时候链表转化为红黑树</strong></p>\n</blockquote>\n<p>当数组大小已经超过64并且链表中的元素个数超过默认设定（8个）时，将链表转化为红黑树</p>\n<blockquote>\n<p><strong>为什么HashMap的初始容量是16，扩容时一定要是2的n次方</strong></p>\n</blockquote>\n<p>index = HashCode（key） &amp; (length-1)</p>\n<p>以值为“book”的Key来演示：</p>\n<ol>\n<li>计算book的hashcode，结果为十进制的3029737，二进制的101110001110101110 1001。</li>\n<li>假定HashMap长度是默认的16，计算Length-1的结果为十进制的15，二进制的1111。</li>\n<li>把以上两个结果做与运算，101110001110101110 1001 &amp; 1111 = 1001，十进制是9，所以 index=9。</li>\n</ol>\n<p><strong>Hash算法最终得到的index结果，完全取决于Key的Hashcode值的最后几位</strong></p>\n<p>假设HashMap的长度是10，重复刚才的运算步骤：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190109165033757.jpg\" alt=\"img\"></p>\n<p>单独看这个结果，表面上并没有问题。我们再来尝试一个新的HashCode 101110001110101110 <strong>1011</strong> ：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190109165144678.jpg\" alt=\"img\"></p>\n<p>虽然HashCode的倒数第二第三位从0变成了1，但是运算的结果都是1001。也就是说，当HashMap长度为10的时候，有些index结果的出现几率会更大，而有些index结果永远不会出现.这样，显然不符合Hash算法均匀分布的原则。</p>\n<p>反观长度16或者其他2的幂，Length-1的值是所有二进制位全为1，这种情况下，index的结果等同于HashCode后几位的值。只要输入的HashCode本身分布均匀，Hash算法的结果就是均匀的。</p>\n<p><strong>总结</strong></p>\n<ul>\n<li>取模运算效率很低，为了实现高效的Hash算法，HashMap的采用了位运算的方式</li>\n<li>为了Hash算法的结果就是均匀的</li>\n</ul>\n<blockquote>\n<p>深入理解HashMap线程不安全的体现</p>\n</blockquote>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&amp;mid=2653192000&amp;idx=1&amp;sn=118cee6d1c67e7b8e4f762af3e61643e&amp;chksm=8c990d9abbee848c739aeaf25893ae4382eca90642f65fc9b8eb76d58d6e7adebe65da03f80d&amp;scene=21#wechat_redirect\">https://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&amp;mid=2653192000&amp;idx=1&amp;sn=118cee6d1c67e7b8e4f762af3e61643e&amp;chksm=8c990d9abbee848c739aeaf25893ae4382eca90642f65fc9b8eb76d58d6e7adebe65da03f80d&amp;scene=21#wechat_redirect</a></p>\n<blockquote>\n<p>如何处理hash冲突</p>\n</blockquote>\n<ul>\n<li><p>开发定址法：既然当前位置容不下冲突的元素了，那就再找一个空的位置存储 Hash 冲突的值（当前 index 冲突了，那么将冲突的元素放在 index+1)。</p>\n</li>\n<li><p>再散列法：换一个 Hash 算法再计算一个 hash 值，如果不冲突了就存储值（例如第一个算法是名字的首字母的 Hash 值，如果冲突了，计算名字的第二个字母的 Hash 值，如果冲突解决了则将值放入数组中）。</p>\n</li>\n<li><p>链地址法：每个数组中都存有一个单链表，发生 Hash 冲突时，只是将冲突的 value 当作新节点插入到链表（HashMap 解决冲突的办法）。</p>\n</li>\n<li><p>公共溢出区法：将冲突的 value 都存到另外一个顺序表中，查找时如果当前表没有对应值，则去溢出区进行顺序查找。</p>\n</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h2 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h2><h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p> 在<code>JDK1.7</code>中HashMap的数据结构是<code>数组 + 链表</code> , 而在<code>JDK1.8</code>中则演化成了<code>数组 + 链表 + 红黑树</code>的结构 , 这也是1.8中最大的更新 , 下面我们来探究一下为何要演化为<code>数组 + 链表 + 红黑树</code>这样的数据结构</p>\n<p>我们知道在1.7中当产生了<code>hash碰撞</code>时便会将当前<code>Entry</code>变成链表 , 单向链表查找除了<code>head</code>节点外的时间复杂度都是<code>O(n)</code> , 如果频繁的发生了<code>hash碰撞</code>每次查找元素都是非常耗费时间的 , 所以为了避免这一现象1.8中引入了红黑树</p>\n<p>红黑树的插入、查找的时间复杂度都是<code>O(log n)</code> , 假如你的红黑树里面有256个数据 , 此时只需要8次就能找到目标数据 , 即使是65536个数据也只需要16次即可 , 效率相比链表而言提升的非常大</p>\n<p>HashMap转为红黑树后存储的数据结构图</p>\n<p><img src=\"https://raw.githubusercontent.com/13068098071/picode/main/img/image-20211224152017394.png\" alt=\"1.8HashMap存储\"></p>\n<h3 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h3><h4 id=\"核心参数\"><a href=\"#核心参数\" class=\"headerlink\" title=\"核心参数\"></a>核心参数</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//默认初始化table数组容量16</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_INITIAL_CAPACITY = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">4</span>; <span class=\"comment\">// aka 16</span></span><br><span class=\"line\">  \t\t\t</span><br><span class=\"line\"><span class=\"comment\">//table最大容量1073741824</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAXIMUM_CAPACITY = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//默认加载因子, 即当现有数组长度达到容量的75%时会进行扩容操作</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> DEFAULT_LOAD_FACTOR = <span class=\"number\">0.75f</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//1.8新增 当链表的长度 &gt;=8 - 1 时会转换为红黑树, 关于为什么要定义为8的详细解读在下面↓</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TREEIFY_THRESHOLD = <span class=\"number\">8</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//1.8新增 当红黑树的长度 &lt;=6 时会转换为链表, 关于为什么红黑树 → 链表的阈值是6的详细解读在下面↓</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> UNTREEIFY_THRESHOLD = <span class=\"number\">6</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//1.8新增 红黑树的最小容量</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MIN_TREEIFY_CAPACITY = <span class=\"number\">64</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//定义一个类型为Node&lt;K,V&gt;的table数组</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//table数组的长度</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实际的扩容的阈值 threshold = 容量 * 加载因子</span></span><br><span class=\"line\"><span class=\"comment\">//在构造器中会被初始化为DEFAULT_INITIAL_CAPACITY的值16</span></span><br><span class=\"line\"><span class=\"comment\">//在第一次存储数据时会在inflateTable()方法中再次赋值threshold = (int) Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + 1);</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> threshold;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实际的加载因子, 在构造器中进行初始化</span></span><br><span class=\"line\"><span class=\"comment\">//如果创建HashMap时没有指定loadFactor的大小则会初始化为DEFAULT_INITIAL_CAPACITY的值</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">float</span> loadFactor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//HashMap更改的次数</span></span><br><span class=\"line\"><span class=\"comment\">//用来作为并发下判断是否有其它线程修改了该HashMap,抛出ConcurrentModificationException</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> modCount;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在初始化时指定初始长度及加载因子的构造器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity, <span class=\"keyword\">float</span> loadFactor)</span> </span>&#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在初始化时指定初始长度的构造器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;</span><br><span class=\"line\">  \t<span class=\"comment\">//这里调用的其实还是上面的构造器</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//什么也不指定的构造器 , 这里不像1.7中还是去调用了有参构造器 , 具体原因下面会有分析</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<h5 id=\"TREEIFY-THRESHOLD\"><a href=\"#TREEIFY-THRESHOLD\" class=\"headerlink\" title=\"TREEIFY_THRESHOLD\"></a><code>TREEIFY_THRESHOLD</code></h5></blockquote>\n<p>这个参数是链表转换成红黑树的阈值，TREEIFY_THRESHOLD = 8</p>\n<ol>\n<li><p>为什么不在一开始就使用红黑树来替代链表</p>\n<p>相同数据量下红黑树(TreeNode)占用的空间是链表(Node)的俩倍 , 考虑到时间和空间的权衡 , 只有当链表的长度达到阈值时才会将其转成红黑树</p>\n</li>\n<li><p>为什么链表 → 红黑树的阈值是8呢?</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* In usages with well-distributed user hashCodes, tree bins are</span><br><span class=\"line\">* rarely used.  Ideally, under random hashCodes, the frequency of</span><br><span class=\"line\">* nodes in bins follows a Poisson distribution</span><br><span class=\"line\">* (http:<span class=\"comment\">//en.wikipedia.org/wiki/Poisson_distribution) with a</span></span><br><span class=\"line\">* parameter of about <span class=\"number\">0.5</span> on average <span class=\"keyword\">for</span> the <span class=\"keyword\">default</span> resizing</span><br><span class=\"line\">* threshold of <span class=\"number\">0.75</span>, although with a large variance because of</span><br><span class=\"line\">* resizing granularity. Ignoring variance, the expected</span><br><span class=\"line\">* <span class=\"function\">occurrences of list size k <span class=\"title\">are</span> <span class=\"params\">(exp(-<span class=\"number\">0.5</span>)</span> * <span class=\"title\">pow</span><span class=\"params\">(<span class=\"number\">0.5</span>, k)</span> /</span></span><br><span class=\"line\"><span class=\"function\">* <span class=\"title\">factorial</span><span class=\"params\">(k)</span>). The first values are:</span></span><br><span class=\"line\"><span class=\"function\">*</span></span><br><span class=\"line\"><span class=\"function\">* 0:    0.60653066</span></span><br><span class=\"line\"><span class=\"function\">* 1:    0.30326533</span></span><br><span class=\"line\"><span class=\"function\">* 2:    0.07581633</span></span><br><span class=\"line\"><span class=\"function\">* 3:    0.01263606</span></span><br><span class=\"line\"><span class=\"function\">* 4:    0.00157952</span></span><br><span class=\"line\"><span class=\"function\">* 5:    0.00015795</span></span><br><span class=\"line\"><span class=\"function\">* 6:    0.00001316</span></span><br><span class=\"line\"><span class=\"function\">* 7:    0.00000094</span></span><br><span class=\"line\"><span class=\"function\">* 8:    0.00000006</span></span><br><span class=\"line\"><span class=\"function\">* more: less than 1 in ten million</span></span><br></pre></td></tr></table></figure>\n\n<p>HashMap的作者认为在理想的情况下随机hashCode算法下所有节点的分布频率会遵循<a href=\"http://en.wikipedia.org/wiki/Poisson_distribution\">泊松分布(Poisson distribution)</a> , 上面也列举了链表长度达到8的概率是0.00000006,也就是说我们几乎不可能会使用到红黑树 , 所以作者使用8作为一个分水岭</p>\n</li>\n</ol>\n<blockquote>\n<p>UNTREEIFY_THRESHOLD</p>\n</blockquote>\n<p>为何链表 → 红黑树的阈值，UNTREEIFY_THRESHOLD = 6</p>\n<ol>\n<li><p>为何链表 → 红黑树的阈值是6</p>\n<p>假设UNTREEIFY_THRESHOLD的 = 7 , 当我们有频繁的添加和删除操作时 , hash碰撞产生的节点数量 一旦在7附件徘徊就会造成红黑树和链表的频繁转换 , 此时我们大多数的性能就都耗费在了链表 → 红黑树和红黑树 → 链表` ,这样反而就得不偿失了 , 所以作者将长度为7作为一个缓存地段从而选取了6作为红黑树 → 链表的阈值</p>\n</li>\n</ol>\n<blockquote>\n<p>loadFactor</p>\n</blockquote>\n<ul>\n<li>加载因子并不是越大越好的 , 虽然加载因子越大就意味着HashMap的实际容量越大 , 扩容的次数越少 , 但是因为实际存储的数据大了 , 俩个相同容量的HashMap加载因子越大的那个读取的速度更慢 , 所以我们需要根据自己的实际使用情况来进行判断 , 是要存储更多的数据呢 , 还是要更快的读取速度</li>\n<li>加载因子是会影响到扩容的次数的 , 如果加载因子太小的话HashMap会频繁的进行扩容 , 导致在存储的时候性能下降</li>\n<li>如果我们在创建HashMap时就已经知道了要存储的数据量 , 那么我们完全可以通过实际存储数量 ÷ 0.75来计算出我们初始化的HashMap容量 , 这样可以避免HashMap再进行扩容操作 , 提升代码效率</li>\n</ul>\n<blockquote>\n<p>modCount</p>\n</blockquote>\n<p>HashMap不是线程安全的 , 也就是说你在操作的同时可能会有其它的线程也在操作该map,那样会造成脏数据 , 所以为了避免这种情况发生HashMap、ArrayList等使用了fail-fast策略 , 用modCount来记录修改集合修改次数</p>\n<p>我们在边迭代边删除集合元素时会碰到一个异常ConcurrentModificationException , 原因是不管你使用entrySet()方法也好 , keySet()方法也好 , 其实在for循环的时候还是会使用该集合内置的Iterator迭代器中的nextEntry()方法 , 如果你没有使用Iterator内置的remove()方法 , 那么迭代器内部的记录更改次数的值便不会被同步 , 当你下一次循环时调用nextEntry()方法便会抛出异常</p>\n<h4 id=\"put方法\"><a href=\"#put方法\" class=\"headerlink\" title=\"put方法\"></a>put方法</h4><p><img src=\"https://raw.githubusercontent.com/13068098071/picode/main/img/image-20211224153116502.png\" alt=\"HashMap的put\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> putVal(hash(key) ,  key, value, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//关于onlyIfAbsent,evict的讲解在下面↓</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">final</span> V <span class=\"title\">putVal</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, K key, V value, <span class=\"keyword\">boolean</span> onlyIfAbsent,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                  <span class=\"keyword\">boolean</span> evict)</span> </span>&#123;</span><br><span class=\"line\">     Node&lt;K,V&gt;[] tab; </span><br><span class=\"line\">     Node&lt;K,V&gt; p; </span><br><span class=\"line\">     <span class=\"keyword\">int</span> n, i;</span><br><span class=\"line\">     <span class=\"comment\">// 判断数组是否为空 , 为空则调用resize()方法进行初始化,resize()方法源码在下面↓</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> ((tab = table) == <span class=\"keyword\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">          n = (tab = resize()).length;</span><br><span class=\"line\"></span><br><span class=\"line\"> \t  <span class=\"comment\">// 如果当前数组索引位置的元素为null则直接创建新的节点并存到该索引位置的数组中</span></span><br><span class=\"line\"> \t  <span class=\"comment\">// 和JDK1.7的对比</span></span><br><span class=\"line\"> \t  <span class=\"comment\">//1. 其实这里的(n - 1) &amp; hash就是JDK1.7中的indexFor()方法体中的(length - 1) &amp; h,只不过在1.8中做了简化处理</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((p = tab[i = (n - <span class=\"number\">1</span>) &amp; hash]) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">          <span class=\"comment\">//2. tab[i] = newNode(hash, key, value, null);在JDK1.7中时在createEntry()方法中完成创建Entry的 , 在1.8中该方法也被删除了</span></span><br><span class=\"line\">          tab[i] = newNode(hash, key, value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t  <span class=\"comment\">// 走到这个else代码块中说明当前key已经在数组中存在了 || 发生了hash碰撞</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          Node&lt;K,V&gt; e; K k;</span><br><span class=\"line\">          <span class=\"comment\">// 判断当前key在数组中是否存在, 存在则不进行存储操作</span></span><br><span class=\"line\">          <span class=\"comment\">// 有朋友好奇这里的p是在哪里初始化的, 其实在上一个if里面就被初始化了</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (p.hash == hash &amp;&amp;</span><br><span class=\"line\">              ((k = p.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">              e = p;</span><br><span class=\"line\">        </span><br><span class=\"line\">          <span class=\"comment\">// 判断当前节点类型是否是红黑树节点</span></span><br><span class=\"line\">          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">              <span class=\"comment\">// 将key、value存储到红黑树节点中 , 如果key已经存在 , 则返回之前的节点 , 源码解析在下面↓</span></span><br><span class=\"line\">              e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class=\"keyword\">this</span>, tab, hash, key, value);</span><br><span class=\"line\">        </span><br><span class=\"line\">          <span class=\"comment\">// 代码进入到这个else代码块就说明发生了hash碰撞</span></span><br><span class=\"line\">          <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              <span class=\"comment\">// 该代码块中的e的初始化会有俩种情况</span></span><br><span class=\"line\">              <span class=\"comment\">// ① e是最后一个节点的next元素,e == null</span></span><br><span class=\"line\">              <span class=\"comment\">// ② e是和key相同的那个node</span></span><br><span class=\"line\">              <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> binCount = <span class=\"number\">0</span>; ; ++binCount) &#123;</span><br><span class=\"line\">                  <span class=\"comment\">// 判断当前节点是否是链表的最后一个节</span></span><br><span class=\"line\">                  <span class=\"comment\">// ①</span></span><br><span class=\"line\">                  <span class=\"keyword\">if</span> ((e = p.next) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                      <span class=\"comment\">// 直接将当前要存储的key、value存储到上一个节点的next元素中</span></span><br><span class=\"line\">                      <span class=\"comment\">// 在JDK1.7中的会先将之前存储的节点取出来, 然后将之前的节点作为新节点的next元素存储到数组中</span></span><br><span class=\"line\">                      <span class=\"comment\">// 而在JDK1.8中会直接将新的节点放到之前存储节点的next元素中</span></span><br><span class=\"line\">                      <span class=\"comment\">// 也就是说JDK1.7中的链表插入顺序是从头部开始插入, 而在1.8中时从尾部开始插入</span></span><br><span class=\"line\">                      p.next = newNode(hash, key, value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                      <span class=\"comment\">// 因为这个循环是迭代链表的, 所以binCount代表着链表的长度, 如果链表长度超过阈值则会转换为红黑树</span></span><br><span class=\"line\">                      <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"number\">1</span>) <span class=\"comment\">// -1 for 1st</span></span><br><span class=\"line\">                          <span class=\"comment\">// 转换红黑树的源码解析在下面↓</span></span><br><span class=\"line\">                          treeifyBin(tab, hash);</span><br><span class=\"line\">                      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                  <span class=\"comment\">// 当前节点不是最后一个节点, 判断当前节点的key与要存储的key是否相同</span></span><br><span class=\"line\">                  <span class=\"comment\">// ②</span></span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                      ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                  p = e;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">  \t\t  <span class=\"comment\">// e在只有当前key已经存在时才会完成初始化], 这里是统一处理, 返回key之前对应的value, 并判断是否要替换value,默认是替换</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// existing mapping for key</span></span><br><span class=\"line\">              V oldValue = e.value;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (!onlyIfAbsent || oldValue == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                  e.value = value;</span><br><span class=\"line\">              <span class=\"comment\">// 这里是个空方法体</span></span><br><span class=\"line\">              afterNodeAccess(e);</span><br><span class=\"line\">              <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      ++modCount;</span><br><span class=\"line\"> \t  <span class=\"comment\">// 在JDK1.7中扩容操作是在存储数据之前发生的</span></span><br><span class=\"line\"> \t  <span class=\"comment\">// 在JDK1.8中扩容操作是在存储数据之后发生的</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (++size &gt; threshold)</span><br><span class=\"line\">          resize();</span><br><span class=\"line\">\t  <span class=\"comment\">// 这里是个空方法体</span></span><br><span class=\"line\">      afterNodeInsertion(evict);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先会判断哈希表Node&lt;k,v&gt;[] table是否为空或者null，是则进行resize()方法进行扩容，否则进入下一个阶段；</li>\n<li>根据key计算的hash值，hash值&amp;（length-1）得到数组所在的存储位置table[i]，如果存储位置没有元素存放，则直接创建一个新Node；</li>\n<li>如果存储位置有元素存放，则接下来会判断该位置元素的hash值和key值是否和当前操作元素一致，如果一致，说明是修改value操作，直接进行覆盖；</li>\n<li>当前存储位置有元素，又不和当前操作元素一致，说明发生了hash冲突，在这里他又有两种方式，分别是链表和红黑树，区别就在于他们的头结点，如果头结点是treeNode，则说明此位置结构是红黑树方式插入；</li>\n<li>如果不是红黑树，则说明是单链表，将新增节点插入至链表的最后位置，但是这里还有一个判断点，判断当前链表长度是否大于等于8.如果是则将链表转化为红黑树，遍历过程如果key存在，则直接覆盖；</li>\n<li>最后就是判断当前存储键值对的数量，如果大于阈值值，则扩容；</li>\n</ul>\n<blockquote>\n<p>onlyIfAbsent</p>\n</blockquote>\n<p>onlyIfAbsent：如果为true，则不更改现有值 , 也就是说不会用新的value来替换旧的value</p>\n<blockquote>\n<h5 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash()\"></a><code>hash()</code></h5></blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h;</span><br><span class=\"line\">    <span class=\"comment\">//高16位和低16位进行异或运算，增散列程度，减少hash碰撞发生的概率</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (key == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>为什么HashMap的容量一定要是2的非零次方幂而且还要进行<code>hash &amp; (length - 1)</code>的操作</strong></p>\n</blockquote>\n<p>如果容量是2的次方 , 那么length - 1得到的二进制的除了补位外都是1,根据&amp;运算符的规则 , 0&amp;0=0; 0&amp;1=0; 1&amp;1=1;那么也就意味着不论hash的值是什么 , 只要length - 1的二进制码是这样规律的 , 那么就可以保证hash的值只有和length - 1的同位参与了运算 , 例如二进制码A(10101011)&amp;B(00001111)的结果就是C(00001011) , C的结果只会受到B二进制码后四位的影响 , 因为b的补位都是0 , 也就是说h &amp; (length - 1)得到的索引不会大于length,也就不会越界</p>\n<h4 id=\"resize方法\"><a href=\"#resize方法\" class=\"headerlink\" title=\"resize方法\"></a>resize方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class=\"line\">   Node&lt;K,V&gt;[] oldTab = table;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> oldCap = (oldTab == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : oldTab.length;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> oldThr = threshold;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> newCap, newThr = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"comment\">// 进入到这个if代码块中说明此时table数组已经完成过初始化</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (oldCap &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 判断当前容量是否已达到最大值</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">           threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> oldTab;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">       <span class=\"comment\">// 将新数组的容量设置为旧容量的2倍</span></span><br><span class=\"line\">       <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((newCap = oldCap &lt;&lt; <span class=\"number\">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class=\"line\">                oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class=\"line\">           <span class=\"comment\">// 这一步的操作等同于 oldThr * 2</span></span><br><span class=\"line\">           newThr = oldThr &lt;&lt; <span class=\"number\">1</span>; <span class=\"comment\">// double threshold</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 进入到这个代码块说明在创建HashMap时使用的有参构造器</span></span><br><span class=\"line\">   <span class=\"comment\">// 在翻阅代码后我们发现threshold的值会在有参构造器中被初始化 , 此时被初始化了就会使用指定的容量来完成table数组的初始化</span></span><br><span class=\"line\">   <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldThr &gt; <span class=\"number\">0</span>) <span class=\"comment\">// initial capacity was placed in threshold</span></span><br><span class=\"line\">       newCap = oldThr;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 进入到这个else代码块中说明数组还未完成初始化 , 进行初始化操作</span></span><br><span class=\"line\">   <span class=\"keyword\">else</span> &#123;               </span><br><span class=\"line\">       newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class=\"line\">       newThr = (<span class=\"keyword\">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> \t\t</span><br><span class=\"line\">   <span class=\"comment\">// 只有调用有参构造器才让newThr == 0,至于为什么不放到上面的else if中 , 可能是为以后扩展做铺垫吧</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (newThr == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">float</span> ft = (<span class=\"keyword\">float</span>)newCap * loadFactor;</span><br><span class=\"line\">       newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class=\"keyword\">float</span>)MAXIMUM_CAPACITY ?</span><br><span class=\"line\">                 (<span class=\"keyword\">int</span>)ft : Integer.MAX_VALUE);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   threshold = newThr;</span><br><span class=\"line\">   <span class=\"meta\">@SuppressWarnings(&#123;&quot;rawtypes&quot; , &quot;unchecked&quot;&#125;)</span></span><br><span class=\"line\">   <span class=\"comment\">// 初始化新数组</span></span><br><span class=\"line\">   Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node[newCap];</span><br><span class=\"line\">   table = newTab;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (oldTab != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class=\"line\">           Node&lt;K,V&gt; e;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> ((e = oldTab[j]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">               oldTab[j] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">               <span class=\"comment\">// 如果当前不是链表则会直接将当前元素放到新数组中旧元素所在索引位置</span></span><br><span class=\"line\">               <span class=\"comment\">// 至于为什么 , 在下面会有详细讲解↓</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (e.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                   newTab[e.hash &amp; (newCap - <span class=\"number\">1</span>)] = e;</span><br><span class=\"line\">             \t</span><br><span class=\"line\">               <span class=\"comment\">// 如果当前元素是红黑树的节点</span></span><br><span class=\"line\">               <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                   ((TreeNode&lt;K,V&gt;)e).split(<span class=\"keyword\">this</span>, newTab, j, oldCap);</span><br><span class=\"line\">             </span><br><span class=\"line\">               <span class=\"comment\">// 进入这个代码块中说明当前数组元素是链表</span></span><br><span class=\"line\">               <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                   <span class=\"comment\">// loHead和loTail存储的是转移数据后仍然存储在当前索引位置的元素</span></span><br><span class=\"line\">                   Node&lt;K,V&gt; loHead = <span class=\"keyword\">null</span>, loTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                   <span class=\"comment\">// hiHead和hiTail存储的是转移数据后存储到[j + oldCap]索引位置的元素</span></span><br><span class=\"line\">                   <span class=\"comment\">// 这里看不懂没事 , 接着往下看就明白了</span></span><br><span class=\"line\">                   Node&lt;K,V&gt; hiHead = <span class=\"keyword\">null</span>, hiTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                   Node&lt;K,V&gt; next;</span><br><span class=\"line\">                 e = <span class=\"number\">1</span> e.next = <span class=\"number\">2</span> e.next.next = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">                   <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                       <span class=\"comment\">// 为了方便讲明白这个循环里面的源码,我们来举个例子,假设此时链表有3个元素a,b,c</span></span><br><span class=\"line\">                       <span class=\"comment\">// 第一次循环进入到① | ②</span></span><br><span class=\"line\">                       <span class=\"comment\">// tail元素肯定为null,所以会将当前e赋值给head元素,并且为tail赋值,以便下次循环</span></span><br><span class=\"line\">                       <span class=\"comment\">// 此时head元素会含有e的链表关系即next元素指针,此时就是e=a  head=a  tail=a</span></span><br><span class=\"line\">                       </span><br><span class=\"line\">                       <span class=\"comment\">// 第二次循环进入① | ②</span></span><br><span class=\"line\">                       <span class=\"comment\">// 还是会通过第一次进入时的索引判断 , 所以此时tail元素不会为null,</span></span><br><span class=\"line\">                       <span class=\"comment\">// 此时就是 e=b  head=a  head.next=b  tail=b  tail.next=b</span></span><br><span class=\"line\">                       <span class=\"comment\">// 因为在第一次进入的时候head和tail是同时指向e的</span></span><br><span class=\"line\">                       <span class=\"comment\">// 所以此时tail.next=b也就意味着head.next=b,所以才会先在else代码块中完成tail.next的初始化</span></span><br><span class=\"line\">                       <span class=\"comment\">// 再完成tail的初始化</span></span><br><span class=\"line\">                       </span><br><span class=\"line\">                   \t   <span class=\"comment\">// 第三次循环进入① | ② 就是 e=c  head=a  tail=c  tail.next=c  head.next.next=c</span></span><br><span class=\"line\">                   \t   <span class=\"comment\">// 以此类推....</span></span><br><span class=\"line\">                       next = e.next;</span><br><span class=\"line\">                       <span class=\"comment\">// 这里会根据(e.hash &amp; oldCap) == 0来将链表划分为俩部分 , 一部分仍然存储在旧链表的索引位置 , 另一部分存储到新数组的[j + oldCap]索引位置</span></span><br><span class=\"line\">                       <span class=\"keyword\">if</span> ((e.hash &amp; oldCap) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                           <span class=\"comment\">// ①</span></span><br><span class=\"line\">                           <span class=\"keyword\">if</span> (loTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                               loHead = e;</span><br><span class=\"line\">                           <span class=\"comment\">// ②</span></span><br><span class=\"line\">                           <span class=\"keyword\">else</span></span><br><span class=\"line\">                               loTail.next = e;</span><br><span class=\"line\">                           loTail = e;</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                       <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                           <span class=\"comment\">// ①</span></span><br><span class=\"line\">                           <span class=\"keyword\">if</span> (hiTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                               hiHead = e;</span><br><span class=\"line\">                           <span class=\"comment\">// ②</span></span><br><span class=\"line\">                           <span class=\"keyword\">else</span></span><br><span class=\"line\">                               hiTail.next = e;</span><br><span class=\"line\">                           hiTail = e;</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125; <span class=\"keyword\">while</span> ((e = next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                   <span class=\"comment\">// 将loHead存储到新数组的旧索引位置</span></span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (loTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                       loTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                       newTab[j] = loHead;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   <span class=\"comment\">// 将hiHead存储到新数组的[j + oldCap]索引位置</span></span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (hiTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                       hiTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                       newTab[j + oldCap] = hiHead;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> newTab;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"get方法\"><a href=\"#get方法\" class=\"headerlink\" title=\"get方法\"></a>get方法</h4><p><img src=\"https://raw.githubusercontent.com/13068098071/picode/main/img/image-20211224154248251.png\" alt=\"HashMap的get\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt; e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (e = getNode(hash(key) ,  key)) == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : e.value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> Node&lt;K,V&gt; <span class=\"title\">getNode</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, Object key)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class=\"keyword\">int</span> n; K k;</span><br><span class=\"line\">    <span class=\"comment\">// 计算索引位置并判断当前索引位置是否存在元素</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) != <span class=\"keyword\">null</span> &amp;&amp; (n = tab.length) &gt; <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        (first = tab[(n - <span class=\"number\">1</span>) &amp; hash]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断当前元素是否与要取得值相等</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first.hash == hash &amp;&amp; <span class=\"comment\">// always check first node</span></span><br><span class=\"line\">            ((k = first.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> first;</span><br><span class=\"line\">        <span class=\"comment\">// 判断当前元素是否有next元素</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((e = first.next) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断当前元素是否是红黑树节点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (first <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                <span class=\"comment\">// 寻找红黑树中与要取值相等的节点</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class=\"line\">            <span class=\"comment\">// 迭代链表</span></span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                    ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> ((e = e.next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-7和1-8对比\"><a href=\"#1-7和1-8对比\" class=\"headerlink\" title=\"1.7和1.8对比\"></a>1.7和1.8对比</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>1.7</th>\n<th>1.8</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数据结构</td>\n<td>数组 + 链表</td>\n<td>数组 + 链表 + 红黑树</td>\n</tr>\n<tr>\n<td>节点</td>\n<td>Entry</td>\n<td>Node TreeNode</td>\n</tr>\n<tr>\n<td>Hash算法</td>\n<td>较为复杂</td>\n<td>异或hash右移16位</td>\n</tr>\n<tr>\n<td>对Null的处理</td>\n<td>单独写一个putForNull()方法处理</td>\n<td>作为以一个Hash值为0的普通节点处理</td>\n</tr>\n<tr>\n<td>初始化</td>\n<td>赋值给一个空数组，put时初始化</td>\n<td>没有赋值，懒加载，put时初始化</td>\n</tr>\n<tr>\n<td>扩容</td>\n<td>插入前扩容</td>\n<td>插入后，初始化，树化时扩容</td>\n</tr>\n<tr>\n<td>节点插入</td>\n<td>头插法</td>\n<td>尾插法</td>\n</tr>\n</tbody></table>\n<p>参看文档：<a href=\"https://blog.csdn.net/weixin_44141495/article/details/108402128\">https://blog.csdn.net/weixin_44141495/article/details/108402128</a></p>\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><blockquote>\n<p><strong>什么时候扩容</strong></p>\n</blockquote>\n<ol>\n<li>当前容量超过阈值</li>\n<li>当链表中元素个数超过默认设定（8个），当数组的大小还未超过64的时候，此时进行数组的扩容，如果超过则将链表转化成红黑树</li>\n</ol>\n<blockquote>\n<p><strong>什么时候链表转化为红黑树</strong></p>\n</blockquote>\n<p>当数组大小已经超过64并且链表中的元素个数超过默认设定（8个）时，将链表转化为红黑树</p>\n<blockquote>\n<p><strong>为什么HashMap的初始容量是16，扩容时一定要是2的n次方</strong></p>\n</blockquote>\n<p>index = HashCode（key） &amp; (length-1)</p>\n<p>以值为“book”的Key来演示：</p>\n<ol>\n<li>计算book的hashcode，结果为十进制的3029737，二进制的101110001110101110 1001。</li>\n<li>假定HashMap长度是默认的16，计算Length-1的结果为十进制的15，二进制的1111。</li>\n<li>把以上两个结果做与运算，101110001110101110 1001 &amp; 1111 = 1001，十进制是9，所以 index=9。</li>\n</ol>\n<p><strong>Hash算法最终得到的index结果，完全取决于Key的Hashcode值的最后几位</strong></p>\n<p>假设HashMap的长度是10，重复刚才的运算步骤：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190109165033757.jpg\" alt=\"img\"></p>\n<p>单独看这个结果，表面上并没有问题。我们再来尝试一个新的HashCode 101110001110101110 <strong>1011</strong> ：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190109165144678.jpg\" alt=\"img\"></p>\n<p>虽然HashCode的倒数第二第三位从0变成了1，但是运算的结果都是1001。也就是说，当HashMap长度为10的时候，有些index结果的出现几率会更大，而有些index结果永远不会出现.这样，显然不符合Hash算法均匀分布的原则。</p>\n<p>反观长度16或者其他2的幂，Length-1的值是所有二进制位全为1，这种情况下，index的结果等同于HashCode后几位的值。只要输入的HashCode本身分布均匀，Hash算法的结果就是均匀的。</p>\n<p><strong>总结</strong></p>\n<ul>\n<li>取模运算效率很低，为了实现高效的Hash算法，HashMap的采用了位运算的方式</li>\n<li>为了Hash算法的结果就是均匀的</li>\n</ul>\n<blockquote>\n<p>深入理解HashMap线程不安全的体现</p>\n</blockquote>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&amp;mid=2653192000&amp;idx=1&amp;sn=118cee6d1c67e7b8e4f762af3e61643e&amp;chksm=8c990d9abbee848c739aeaf25893ae4382eca90642f65fc9b8eb76d58d6e7adebe65da03f80d&amp;scene=21#wechat_redirect\">https://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&amp;mid=2653192000&amp;idx=1&amp;sn=118cee6d1c67e7b8e4f762af3e61643e&amp;chksm=8c990d9abbee848c739aeaf25893ae4382eca90642f65fc9b8eb76d58d6e7adebe65da03f80d&amp;scene=21#wechat_redirect</a></p>\n<blockquote>\n<p>如何处理hash冲突</p>\n</blockquote>\n<ul>\n<li><p>开发定址法：既然当前位置容不下冲突的元素了，那就再找一个空的位置存储 Hash 冲突的值（当前 index 冲突了，那么将冲突的元素放在 index+1)。</p>\n</li>\n<li><p>再散列法：换一个 Hash 算法再计算一个 hash 值，如果不冲突了就存储值（例如第一个算法是名字的首字母的 Hash 值，如果冲突了，计算名字的第二个字母的 Hash 值，如果冲突解决了则将值放入数组中）。</p>\n</li>\n<li><p>链地址法：每个数组中都存有一个单链表，发生 Hash 冲突时，只是将冲突的 value 当作新节点插入到链表（HashMap 解决冲突的办法）。</p>\n</li>\n<li><p>公共溢出区法：将冲突的 value 都存到另外一个顺序表中，查找时如果当前表没有对应值，则去溢出区进行顺序查找。</p>\n</li>\n</ul>\n"},{"title":"LinkedList","date":"2021-12-23T16:00:00.000Z","description":"LinkedList集合笔记","cover":"https://s2.loli.net/2021/12/23/TNY612AUy38Dfk7.jpg","_content":"## LinkedList\n\n### 概述\n\n#### 基础知识\n\n>什么是链表\n\n链表是由一系列非连续的节点组成的存储结构，简单分下类的话，链表又分为单向链表和双向链表，而单向/双向链表又可以分为循环链表和非循环链表\n\n>单向链表\n\n单向链表就是通过每个结点的指针指向下一个结点从而链接起来的结构，最后一个节点的next指向null。\n\n![单向列表](https://raw.githubusercontent.com/13068098071/picode/main/img/193331_JljJ_2927759.png)\n\n>单向循环链表\n\n单向循环链表和单向列表的不同是，最后一个节点的next不是指向null，而是指向head节点，形成一个“环”。\n\n![单向循环链表](https://raw.githubusercontent.com/13068098071/picode/main/img/193412_xGR9_2927759.png)\n\n>双向链表\n\n双向链表是包含两个指针的，pre指向前一个节点，next指向后一个节点，但是第一个节点head的pre指向null，最后一个节点的tail指向null。\n\n![双向链表](https://raw.githubusercontent.com/13068098071/picode/main/img/193440_9dt2_2927759.png)\n\n>双向循环链表\n\n双向循环链表和双向链表的不同在于，第一个节点的pre指向最后一个节点，最后一个节点的next指向第一个节点，也形成一个“环”。**而LinkedList就是基于双向循环链表设计的。**\n\n![双向循环链表](https://raw.githubusercontent.com/13068098071/picode/main/img/193526_9m6M_2927759.png)\n\n\n\nLinkedList底层是基于双向链表，链表在内存中不是连续的，而是通过引用来关联所有的元素，所以链表的优点在于添加和删除元素比较快，因为只是移动指针，并且不需要判断是否需要扩容，缺点是查询和遍历效率比较低。\n\n#### 类图\n\n![类图](https://raw.githubusercontent.com/13068098071/picode/main/img/image-20211224141813601.png) LinkedList底层是基于双向链表，链表在内存中不是连续的，而是通过引用来关联所有的元素，所以链表的优点在于添加和删除元素比较快，因为只是移动指针，并且不需要判断是否需要扩容，缺点是查询和遍历效率比较低。\n\n- LinkedList是基于双向循环链表实现的，除了可以当做链表来操作外，它还可以当做栈、队列和双端队列来使用\n- 实现了所有可选的List操作并且允许存储任何元素，包括Null\n- LinkedList实现了Serializable接口，因此它支持序列化，能够通过序列化传输，实现了Cloneable接口，能被克隆\n- LinkedList是非线程安全的，只在单线程下适合使用\n\n### 源码分析\n\n#### 成员变量的构造方法\n\n```java\n/**\n * 当前存储的元素个数\n */\ntransient int size = 0;\n \n/**\n * \n * 首节点\n */\ntransient Node<E> first;\n \n/**\n * 末节点\n */\ntransient Node<E> last;\n \n/**\n * 空构造器\n */\npublic LinkedList() {\n}\n \n/**\n *传入集合参数的构造器\n */\npublic LinkedList(Collection<? extends E> c) {\n    this();//调用当前类的构造函数\n    addAll(c);\n}\n```\n\n####  添加方法\n\n>add\n\n```java\npublic boolean add(E e) {\n    linkLast(e);\n    return true;\n}\nvoid linkLast(E e) {\n\t/**\n\t * 获取当前链表的最后一个节点\n\t */\n    final Node<E> l = last;\n    /**\n     * 创建一个以当前最后一个节点为之前节点的节点\n     */\n    final Node<E> newNode = new Node<>(l, e, null);\n    last = newNode;\n    /**\n     * 空表，首次插入\n     */\n    if (l == null)\n        first = newNode;\n    else\n        l.next = newNode;//不是首次插入，则最后一个节点的后置节点地址赋值给新节点\n    size++;\n    modCount++;\n}\n```\n\n>addAll\n\n```java\n/**\n *在链表的尾端追加指定集合的所有元素，按指定的迭代器的集合顺序返回，在这个操作执行总是如果指定的集合被修改了\n *，那么该行为操作将提示未定义\n */\npublic boolean addAll(Collection<? extends E> c) {\n    return addAll(size, c);\n}\npublic boolean addAll(int index, Collection<? extends E> c) {\n\t/**\n\t * 检查index是否越界，index=size+1\n\t */\n    checkPositionIndex(index);\n    /**\n     * 将集合参数转化为数组\n     */\n    Object[] a = c.toArray();\n    int numNew = a.length;//要插入的集合长度\n    if (numNew == 0)\n        return false;\n    /**\n     * 定义pred和succ两个Node对象，用于标识要插入元素的前置节点和后置节点\n     */\n    Node<E> pred, succ;\n    /**\n     * 这里为什么要写if..else？\n     * 因为该方法不一定是从上层方法addAll(size, c)过来的，还有可能是直接调用了addAll(int index, Collection<? extends E> c)\n     * 方法，从上层addAll(size, c)跳转过来的，size=index也就从尾部插入，但是直接调用的该方法，则从传进来的参数index这个位置（肯能是任何位置）插入\n     */\n    if (index == size) {//表明是从尾部插入\n        succ = null;//从尾部插入，后置节点为null\n        pred = last;//从尾部插入，前置节点为当前LinkedList中的最后一个节点\n    } else {//表明不是从尾部插入\n        succ = node(index);//查到当前LinkedList中位置为index的节点并把它赋给要插入元素的后置节点\n        pred = succ.prev;//把上一步得到的节点的前置节点赋值给要插入元素的后置节点\n    }\n \n    for (Object o : a) {//变量集合参数\n        @SuppressWarnings(\"unchecked\") E e = (E) o;\n        Node<E> newNode = new Node<>(pred, e, null);\n        if (pred == null)//说明插入之前当前链表是空链表\n            first = newNode;//新节点是第一个节点\n        else\n            pred.next = newNode;//设置插入元素的的前置节点的后置节点为新节点\n        pred = newNode;//更改指向后将新节点对象赋给pred作为下次循环中新插入节点的前一个对象节点，依次循环\n    }\n  //此时pred代表集合元素的插入完后的最后一个节点对象\n    if (succ == null) {//结尾添加的话在添加完集合元素后将最后一个集合的节点对象pred作为last\n        last = pred;\n    } else {\n        pred.next = succ;//将集合元素的最后一个节点对象的next指针指向原index位置上的Node对象\n        succ.prev = pred;//将原index位置上的pred指针对象指向集合的最后一个对象\n    }\n \n    size += numNew;\n    modCount++;\n    return true;\n}\n/**\n * Returns the (non-null) Node at the specified element index.\n * 返回index位置的非空节点\n * 折半查询 \n */\nNode<E> node(int index) {\n    /**\n     * 如果index小于当前元素个数的一半，则从前向后遍历查询 ，否则从后向前遍历查询\n     */\n    if (index < (size >> 1)) {\n        Node<E> x = first;\n        for (int i = 0; i < index; i++)\n            x = x.next;\n        return x;\n    } else {\n        Node<E> x = last;\n        for (int i = size - 1; i > index; i--)\n            x = x.prev;\n        return x;\n    }\n}\n```\n\n这里面主要是两个方法：\n\n- addAll(int index, Collection<? extends E> c)，这里面首先是判断了是否会出现索引越界的坑你，然后定义pred和succ两个Node对象，用于标识要插入元素的前置节点和后置节点，这段代码的工作原理，可以理解为一根筷子切成A,B两根,A的末尾处的节点为新插入元素的前置节点，B的开始出的节点为新插入元素的后置节点，新插入的元素集合依次放在A,B之间，然后把前置节点和后置节点连接上，就插入完成了。\n- node（int index）:这个方法的主要功能是找到index位置的Node节点，源码上利用折半查询进行优化，即使这样，遍历和查询效率还是比较差。\n\n#### 删除方法\n\n>根据元素移除\n\n```java\n/**\n *从第一个节点循环指针查找\n */\npublic boolean remove(Object o) {\n    //如果移除的数据为Null\n    if (o == null) {\n        //遍历找到第一个为null的节点，然后移除掉\n        for (Node<E> x = first; x != null; x = x.next) {\n            if (x.item == null) {\n                unlink(x);\n                return true;\n            }\n        }\n    } else {\n    //遍历找到第一条不为null与参数相等的数据，然后移除掉\n        for (Node<E> x = first; x != null; x = x.next) {\n            if (o.equals(x.item)) {\n                unlink(x);\n                return true;\n            }\n        }\n    }\n    return false;\n}\n \nE unlink(Node<E> x) {\n    // assert x != null;\n\t//移除的数据\n    final E element = x.item;\n    //移除节点的后置节点\n    final Node<E> next = x.next;\n  //移除节点的前置节点\n    final Node<E> prev = x.prev;\n    \n    if (prev == null) {\n        first = next;\n    } else {\n        prev.next = next;\n        x.prev = null;\n    }\n \n    if (next == null) {\n        last = prev;\n    } else {\n        next.prev = prev;\n        x.next = null;\n    }\n \n    x.item = null;\n    size--;\n    modCount++;\n    return element;\n}\n```\n\n>根据索引移除\n\n```java\npublic E remove(int index) {\n    checkElementIndex(index);\n    return unlink(node(index));\n}\n```\n\n#### 获取方法\n\n>get(index),getFirst(),getLast()\n\n```java\npublic E get(int index) {\n    checkElementIndex(index);//检查是否越界\n    return node(index).item;//折半查询节点，然后获取该节点的值\n}\npublic E getFirst() {\n    final Node<E> f = first;\n    if (f == null)\n        throw new NoSuchElementException();\n    return f.item;\n}\npublic E getLast() {\n    final Node<E> l = last;\n    if (l == null)\n        throw new NoSuchElementException();\n    return l.item;\n}\n```\n\n#### 其他方法\n\n>set\n\n```java\npublic E set(int index, E element) {\n    checkElementIndex(index);//检查是否越界\n    Node<E> x = node(index);//折半查询索引为index的节点\n    E oldVal = x.item;//查询index节点原来的数据值\n    x.item = element;//将新值插入\n    return oldVal;//返回旧值\n}\n```\n\n>clear\n\n```java\npublic void clear() {\n    //遍历所以的数据，置为null,方便垃圾回收\n    for (Node<E> x = first; x != null; ) {\n        Node<E> next = x.next;\n        x.item = null;\n        x.next = null;\n        x.prev = null;\n        x = next;\n    }\n    first = last = null;\n    size = 0;\n    modCount++;\n}\n```\n\n>toArray\n\n```java\npublic Object[] toArray() {\n    Object[] result = new Object[size];\n    int i = 0;\n    //遍历所有的节点，将节点中的值放入数组中\n    for (Node<E> x = first; x != null; x = x.next)\n        result[i++] = x.item;\n    return result;\n}\n```\n\n### 总结\n\n- LinkedList的实现是基于双向循环链表的，且头结点中不存放数据。\n- 在查找和删除某元素时，源码中都划分为该元素为null和不为null两种情况来处理，LinkedList中允许元素为null\n- LinkedList是基于链表实现的，因此不存在容量不足的问题，所以这里没有扩容的方法\n- LinkedList是基于链表实现的，因此插入删除效率高，查找效率低\n- 实现了栈和队列的操作方法，因此也可以作为栈、队列和双端队列来使用","source":"_posts/LinkedList.md","raw":"---\ntitle: LinkedList\ndate: 2021-12-24\ndescription: LinkedList集合笔记\ncover: https://s2.loli.net/2021/12/23/TNY612AUy38Dfk7.jpg\ntags: List\ncategories: 集合\n---\n## LinkedList\n\n### 概述\n\n#### 基础知识\n\n>什么是链表\n\n链表是由一系列非连续的节点组成的存储结构，简单分下类的话，链表又分为单向链表和双向链表，而单向/双向链表又可以分为循环链表和非循环链表\n\n>单向链表\n\n单向链表就是通过每个结点的指针指向下一个结点从而链接起来的结构，最后一个节点的next指向null。\n\n![单向列表](https://raw.githubusercontent.com/13068098071/picode/main/img/193331_JljJ_2927759.png)\n\n>单向循环链表\n\n单向循环链表和单向列表的不同是，最后一个节点的next不是指向null，而是指向head节点，形成一个“环”。\n\n![单向循环链表](https://raw.githubusercontent.com/13068098071/picode/main/img/193412_xGR9_2927759.png)\n\n>双向链表\n\n双向链表是包含两个指针的，pre指向前一个节点，next指向后一个节点，但是第一个节点head的pre指向null，最后一个节点的tail指向null。\n\n![双向链表](https://raw.githubusercontent.com/13068098071/picode/main/img/193440_9dt2_2927759.png)\n\n>双向循环链表\n\n双向循环链表和双向链表的不同在于，第一个节点的pre指向最后一个节点，最后一个节点的next指向第一个节点，也形成一个“环”。**而LinkedList就是基于双向循环链表设计的。**\n\n![双向循环链表](https://raw.githubusercontent.com/13068098071/picode/main/img/193526_9m6M_2927759.png)\n\n\n\nLinkedList底层是基于双向链表，链表在内存中不是连续的，而是通过引用来关联所有的元素，所以链表的优点在于添加和删除元素比较快，因为只是移动指针，并且不需要判断是否需要扩容，缺点是查询和遍历效率比较低。\n\n#### 类图\n\n![类图](https://raw.githubusercontent.com/13068098071/picode/main/img/image-20211224141813601.png) LinkedList底层是基于双向链表，链表在内存中不是连续的，而是通过引用来关联所有的元素，所以链表的优点在于添加和删除元素比较快，因为只是移动指针，并且不需要判断是否需要扩容，缺点是查询和遍历效率比较低。\n\n- LinkedList是基于双向循环链表实现的，除了可以当做链表来操作外，它还可以当做栈、队列和双端队列来使用\n- 实现了所有可选的List操作并且允许存储任何元素，包括Null\n- LinkedList实现了Serializable接口，因此它支持序列化，能够通过序列化传输，实现了Cloneable接口，能被克隆\n- LinkedList是非线程安全的，只在单线程下适合使用\n\n### 源码分析\n\n#### 成员变量的构造方法\n\n```java\n/**\n * 当前存储的元素个数\n */\ntransient int size = 0;\n \n/**\n * \n * 首节点\n */\ntransient Node<E> first;\n \n/**\n * 末节点\n */\ntransient Node<E> last;\n \n/**\n * 空构造器\n */\npublic LinkedList() {\n}\n \n/**\n *传入集合参数的构造器\n */\npublic LinkedList(Collection<? extends E> c) {\n    this();//调用当前类的构造函数\n    addAll(c);\n}\n```\n\n####  添加方法\n\n>add\n\n```java\npublic boolean add(E e) {\n    linkLast(e);\n    return true;\n}\nvoid linkLast(E e) {\n\t/**\n\t * 获取当前链表的最后一个节点\n\t */\n    final Node<E> l = last;\n    /**\n     * 创建一个以当前最后一个节点为之前节点的节点\n     */\n    final Node<E> newNode = new Node<>(l, e, null);\n    last = newNode;\n    /**\n     * 空表，首次插入\n     */\n    if (l == null)\n        first = newNode;\n    else\n        l.next = newNode;//不是首次插入，则最后一个节点的后置节点地址赋值给新节点\n    size++;\n    modCount++;\n}\n```\n\n>addAll\n\n```java\n/**\n *在链表的尾端追加指定集合的所有元素，按指定的迭代器的集合顺序返回，在这个操作执行总是如果指定的集合被修改了\n *，那么该行为操作将提示未定义\n */\npublic boolean addAll(Collection<? extends E> c) {\n    return addAll(size, c);\n}\npublic boolean addAll(int index, Collection<? extends E> c) {\n\t/**\n\t * 检查index是否越界，index=size+1\n\t */\n    checkPositionIndex(index);\n    /**\n     * 将集合参数转化为数组\n     */\n    Object[] a = c.toArray();\n    int numNew = a.length;//要插入的集合长度\n    if (numNew == 0)\n        return false;\n    /**\n     * 定义pred和succ两个Node对象，用于标识要插入元素的前置节点和后置节点\n     */\n    Node<E> pred, succ;\n    /**\n     * 这里为什么要写if..else？\n     * 因为该方法不一定是从上层方法addAll(size, c)过来的，还有可能是直接调用了addAll(int index, Collection<? extends E> c)\n     * 方法，从上层addAll(size, c)跳转过来的，size=index也就从尾部插入，但是直接调用的该方法，则从传进来的参数index这个位置（肯能是任何位置）插入\n     */\n    if (index == size) {//表明是从尾部插入\n        succ = null;//从尾部插入，后置节点为null\n        pred = last;//从尾部插入，前置节点为当前LinkedList中的最后一个节点\n    } else {//表明不是从尾部插入\n        succ = node(index);//查到当前LinkedList中位置为index的节点并把它赋给要插入元素的后置节点\n        pred = succ.prev;//把上一步得到的节点的前置节点赋值给要插入元素的后置节点\n    }\n \n    for (Object o : a) {//变量集合参数\n        @SuppressWarnings(\"unchecked\") E e = (E) o;\n        Node<E> newNode = new Node<>(pred, e, null);\n        if (pred == null)//说明插入之前当前链表是空链表\n            first = newNode;//新节点是第一个节点\n        else\n            pred.next = newNode;//设置插入元素的的前置节点的后置节点为新节点\n        pred = newNode;//更改指向后将新节点对象赋给pred作为下次循环中新插入节点的前一个对象节点，依次循环\n    }\n  //此时pred代表集合元素的插入完后的最后一个节点对象\n    if (succ == null) {//结尾添加的话在添加完集合元素后将最后一个集合的节点对象pred作为last\n        last = pred;\n    } else {\n        pred.next = succ;//将集合元素的最后一个节点对象的next指针指向原index位置上的Node对象\n        succ.prev = pred;//将原index位置上的pred指针对象指向集合的最后一个对象\n    }\n \n    size += numNew;\n    modCount++;\n    return true;\n}\n/**\n * Returns the (non-null) Node at the specified element index.\n * 返回index位置的非空节点\n * 折半查询 \n */\nNode<E> node(int index) {\n    /**\n     * 如果index小于当前元素个数的一半，则从前向后遍历查询 ，否则从后向前遍历查询\n     */\n    if (index < (size >> 1)) {\n        Node<E> x = first;\n        for (int i = 0; i < index; i++)\n            x = x.next;\n        return x;\n    } else {\n        Node<E> x = last;\n        for (int i = size - 1; i > index; i--)\n            x = x.prev;\n        return x;\n    }\n}\n```\n\n这里面主要是两个方法：\n\n- addAll(int index, Collection<? extends E> c)，这里面首先是判断了是否会出现索引越界的坑你，然后定义pred和succ两个Node对象，用于标识要插入元素的前置节点和后置节点，这段代码的工作原理，可以理解为一根筷子切成A,B两根,A的末尾处的节点为新插入元素的前置节点，B的开始出的节点为新插入元素的后置节点，新插入的元素集合依次放在A,B之间，然后把前置节点和后置节点连接上，就插入完成了。\n- node（int index）:这个方法的主要功能是找到index位置的Node节点，源码上利用折半查询进行优化，即使这样，遍历和查询效率还是比较差。\n\n#### 删除方法\n\n>根据元素移除\n\n```java\n/**\n *从第一个节点循环指针查找\n */\npublic boolean remove(Object o) {\n    //如果移除的数据为Null\n    if (o == null) {\n        //遍历找到第一个为null的节点，然后移除掉\n        for (Node<E> x = first; x != null; x = x.next) {\n            if (x.item == null) {\n                unlink(x);\n                return true;\n            }\n        }\n    } else {\n    //遍历找到第一条不为null与参数相等的数据，然后移除掉\n        for (Node<E> x = first; x != null; x = x.next) {\n            if (o.equals(x.item)) {\n                unlink(x);\n                return true;\n            }\n        }\n    }\n    return false;\n}\n \nE unlink(Node<E> x) {\n    // assert x != null;\n\t//移除的数据\n    final E element = x.item;\n    //移除节点的后置节点\n    final Node<E> next = x.next;\n  //移除节点的前置节点\n    final Node<E> prev = x.prev;\n    \n    if (prev == null) {\n        first = next;\n    } else {\n        prev.next = next;\n        x.prev = null;\n    }\n \n    if (next == null) {\n        last = prev;\n    } else {\n        next.prev = prev;\n        x.next = null;\n    }\n \n    x.item = null;\n    size--;\n    modCount++;\n    return element;\n}\n```\n\n>根据索引移除\n\n```java\npublic E remove(int index) {\n    checkElementIndex(index);\n    return unlink(node(index));\n}\n```\n\n#### 获取方法\n\n>get(index),getFirst(),getLast()\n\n```java\npublic E get(int index) {\n    checkElementIndex(index);//检查是否越界\n    return node(index).item;//折半查询节点，然后获取该节点的值\n}\npublic E getFirst() {\n    final Node<E> f = first;\n    if (f == null)\n        throw new NoSuchElementException();\n    return f.item;\n}\npublic E getLast() {\n    final Node<E> l = last;\n    if (l == null)\n        throw new NoSuchElementException();\n    return l.item;\n}\n```\n\n#### 其他方法\n\n>set\n\n```java\npublic E set(int index, E element) {\n    checkElementIndex(index);//检查是否越界\n    Node<E> x = node(index);//折半查询索引为index的节点\n    E oldVal = x.item;//查询index节点原来的数据值\n    x.item = element;//将新值插入\n    return oldVal;//返回旧值\n}\n```\n\n>clear\n\n```java\npublic void clear() {\n    //遍历所以的数据，置为null,方便垃圾回收\n    for (Node<E> x = first; x != null; ) {\n        Node<E> next = x.next;\n        x.item = null;\n        x.next = null;\n        x.prev = null;\n        x = next;\n    }\n    first = last = null;\n    size = 0;\n    modCount++;\n}\n```\n\n>toArray\n\n```java\npublic Object[] toArray() {\n    Object[] result = new Object[size];\n    int i = 0;\n    //遍历所有的节点，将节点中的值放入数组中\n    for (Node<E> x = first; x != null; x = x.next)\n        result[i++] = x.item;\n    return result;\n}\n```\n\n### 总结\n\n- LinkedList的实现是基于双向循环链表的，且头结点中不存放数据。\n- 在查找和删除某元素时，源码中都划分为该元素为null和不为null两种情况来处理，LinkedList中允许元素为null\n- LinkedList是基于链表实现的，因此不存在容量不足的问题，所以这里没有扩容的方法\n- LinkedList是基于链表实现的，因此插入删除效率高，查找效率低\n- 实现了栈和队列的操作方法，因此也可以作为栈、队列和双端队列来使用","slug":"LinkedList","published":1,"updated":"2021-12-24T06:52:18.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxk8uw0m0007virjd3wr8o3w","content":"<h2 id=\"LinkedList\"><a href=\"#LinkedList\" class=\"headerlink\" title=\"LinkedList\"></a>LinkedList</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><h4 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h4><blockquote>\n<p>什么是链表</p>\n</blockquote>\n<p>链表是由一系列非连续的节点组成的存储结构，简单分下类的话，链表又分为单向链表和双向链表，而单向/双向链表又可以分为循环链表和非循环链表</p>\n<blockquote>\n<p>单向链表</p>\n</blockquote>\n<p>单向链表就是通过每个结点的指针指向下一个结点从而链接起来的结构，最后一个节点的next指向null。</p>\n<p><img src=\"https://raw.githubusercontent.com/13068098071/picode/main/img/193331_JljJ_2927759.png\" alt=\"单向列表\"></p>\n<blockquote>\n<p>单向循环链表</p>\n</blockquote>\n<p>单向循环链表和单向列表的不同是，最后一个节点的next不是指向null，而是指向head节点，形成一个“环”。</p>\n<p><img src=\"https://raw.githubusercontent.com/13068098071/picode/main/img/193412_xGR9_2927759.png\" alt=\"单向循环链表\"></p>\n<blockquote>\n<p>双向链表</p>\n</blockquote>\n<p>双向链表是包含两个指针的，pre指向前一个节点，next指向后一个节点，但是第一个节点head的pre指向null，最后一个节点的tail指向null。</p>\n<p><img src=\"https://raw.githubusercontent.com/13068098071/picode/main/img/193440_9dt2_2927759.png\" alt=\"双向链表\"></p>\n<blockquote>\n<p>双向循环链表</p>\n</blockquote>\n<p>双向循环链表和双向链表的不同在于，第一个节点的pre指向最后一个节点，最后一个节点的next指向第一个节点，也形成一个“环”。<strong>而LinkedList就是基于双向循环链表设计的。</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/13068098071/picode/main/img/193526_9m6M_2927759.png\" alt=\"双向循环链表\"></p>\n<p>LinkedList底层是基于双向链表，链表在内存中不是连续的，而是通过引用来关联所有的元素，所以链表的优点在于添加和删除元素比较快，因为只是移动指针，并且不需要判断是否需要扩容，缺点是查询和遍历效率比较低。</p>\n<h4 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h4><p><img src=\"https://raw.githubusercontent.com/13068098071/picode/main/img/image-20211224141813601.png\" alt=\"类图\"> LinkedList底层是基于双向链表，链表在内存中不是连续的，而是通过引用来关联所有的元素，所以链表的优点在于添加和删除元素比较快，因为只是移动指针，并且不需要判断是否需要扩容，缺点是查询和遍历效率比较低。</p>\n<ul>\n<li>LinkedList是基于双向循环链表实现的，除了可以当做链表来操作外，它还可以当做栈、队列和双端队列来使用</li>\n<li>实现了所有可选的List操作并且允许存储任何元素，包括Null</li>\n<li>LinkedList实现了Serializable接口，因此它支持序列化，能够通过序列化传输，实现了Cloneable接口，能被克隆</li>\n<li>LinkedList是非线程安全的，只在单线程下适合使用</li>\n</ul>\n<h3 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h3><h4 id=\"成员变量的构造方法\"><a href=\"#成员变量的构造方法\" class=\"headerlink\" title=\"成员变量的构造方法\"></a>成员变量的构造方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 当前存储的元素个数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 首节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> Node&lt;E&gt; first;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 末节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> Node&lt;E&gt; last;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 空构造器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LinkedList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *传入集合参数的构造器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LinkedList</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>();<span class=\"comment\">//调用当前类的构造函数</span></span><br><span class=\"line\">    addAll(c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加方法\"><a href=\"#添加方法\" class=\"headerlink\" title=\"添加方法\"></a>添加方法</h4><blockquote>\n<p>add</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    linkLast(e);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">linkLast</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 获取当前链表的最后一个节点</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; l = last;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建一个以当前最后一个节点为之前节点的节点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(l, e, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    last = newNode;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 空表，首次插入</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        first = newNode;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        l.next = newNode;<span class=\"comment\">//不是首次插入，则最后一个节点的后置节点地址赋值给新节点</span></span><br><span class=\"line\">    size++;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>addAll</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *在链表的尾端追加指定集合的所有元素，按指定的迭代器的集合顺序返回，在这个操作执行总是如果指定的集合被修改了</span></span><br><span class=\"line\"><span class=\"comment\"> *，那么该行为操作将提示未定义</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> addAll(size, c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(<span class=\"keyword\">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 检查index是否越界，index=size+1</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">    checkPositionIndex(index);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将集合参数转化为数组</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Object[] a = c.toArray();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> numNew = a.length;<span class=\"comment\">//要插入的集合长度</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numNew == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义pred和succ两个Node对象，用于标识要插入元素的前置节点和后置节点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Node&lt;E&gt; pred, succ;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这里为什么要写if..else？</span></span><br><span class=\"line\"><span class=\"comment\">     * 因为该方法不一定是从上层方法addAll(size, c)过来的，还有可能是直接调用了addAll(int index, Collection&lt;? extends E&gt; c)</span></span><br><span class=\"line\"><span class=\"comment\">     * 方法，从上层addAll(size, c)跳转过来的，size=index也就从尾部插入，但是直接调用的该方法，则从传进来的参数index这个位置（肯能是任何位置）插入</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index == size) &#123;<span class=\"comment\">//表明是从尾部插入</span></span><br><span class=\"line\">        succ = <span class=\"keyword\">null</span>;<span class=\"comment\">//从尾部插入，后置节点为null</span></span><br><span class=\"line\">        pred = last;<span class=\"comment\">//从尾部插入，前置节点为当前LinkedList中的最后一个节点</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">//表明不是从尾部插入</span></span><br><span class=\"line\">        succ = node(index);<span class=\"comment\">//查到当前LinkedList中位置为index的节点并把它赋给要插入元素的后置节点</span></span><br><span class=\"line\">        pred = succ.prev;<span class=\"comment\">//把上一步得到的节点的前置节点赋值给要插入元素的后置节点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Object o : a) &#123;<span class=\"comment\">//变量集合参数</span></span><br><span class=\"line\">        <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span> E e = (E) o;</span><br><span class=\"line\">        Node&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(pred, e, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pred == <span class=\"keyword\">null</span>)<span class=\"comment\">//说明插入之前当前链表是空链表</span></span><br><span class=\"line\">            first = newNode;<span class=\"comment\">//新节点是第一个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            pred.next = newNode;<span class=\"comment\">//设置插入元素的的前置节点的后置节点为新节点</span></span><br><span class=\"line\">        pred = newNode;<span class=\"comment\">//更改指向后将新节点对象赋给pred作为下次循环中新插入节点的前一个对象节点，依次循环</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"comment\">//此时pred代表集合元素的插入完后的最后一个节点对象</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (succ == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//结尾添加的话在添加完集合元素后将最后一个集合的节点对象pred作为last</span></span><br><span class=\"line\">        last = pred;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        pred.next = succ;<span class=\"comment\">//将集合元素的最后一个节点对象的next指针指向原index位置上的Node对象</span></span><br><span class=\"line\">        succ.prev = pred;<span class=\"comment\">//将原index位置上的pred指针对象指向集合的最后一个对象</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    size += numNew;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns the (non-null) Node at the specified element index.</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回index位置的非空节点</span></span><br><span class=\"line\"><span class=\"comment\"> * 折半查询 </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">Node&lt;E&gt; <span class=\"title\">node</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果index小于当前元素个数的一半，则从前向后遍历查询 ，否则从后向前遍历查询</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &lt; (size &gt;&gt; <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">        Node&lt;E&gt; x = first;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; index; i++)</span><br><span class=\"line\">            x = x.next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Node&lt;E&gt; x = last;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = size - <span class=\"number\">1</span>; i &gt; index; i--)</span><br><span class=\"line\">            x = x.prev;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里面主要是两个方法：</p>\n<ul>\n<li>addAll(int index, Collection&lt;? extends E&gt; c)，这里面首先是判断了是否会出现索引越界的坑你，然后定义pred和succ两个Node对象，用于标识要插入元素的前置节点和后置节点，这段代码的工作原理，可以理解为一根筷子切成A,B两根,A的末尾处的节点为新插入元素的前置节点，B的开始出的节点为新插入元素的后置节点，新插入的元素集合依次放在A,B之间，然后把前置节点和后置节点连接上，就插入完成了。</li>\n<li>node（int index）:这个方法的主要功能是找到index位置的Node节点，源码上利用折半查询进行优化，即使这样，遍历和查询效率还是比较差。</li>\n</ul>\n<h4 id=\"删除方法\"><a href=\"#删除方法\" class=\"headerlink\" title=\"删除方法\"></a>删除方法</h4><blockquote>\n<p>根据元素移除</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *从第一个节点循环指针查找</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果移除的数据为Null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//遍历找到第一个为null的节点，然后移除掉</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; x = x.next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x.item == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                unlink(x);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//遍历找到第一条不为null与参数相等的数据，然后移除掉</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; x = x.next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o.equals(x.item)) &#123;</span><br><span class=\"line\">                unlink(x);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\">E <span class=\"title\">unlink</span><span class=\"params\">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// assert x != null;</span></span><br><span class=\"line\">\t<span class=\"comment\">//移除的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> E element = x.item;</span><br><span class=\"line\">    <span class=\"comment\">//移除节点的后置节点</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; next = x.next;</span><br><span class=\"line\">  <span class=\"comment\">//移除节点的前置节点</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prev == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        first = next;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        prev.next = next;</span><br><span class=\"line\">        x.prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        last = prev;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        next.prev = prev;</span><br><span class=\"line\">        x.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    x.item = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    size--;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>根据索引移除</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    checkElementIndex(index);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unlink(node(index));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"获取方法\"><a href=\"#获取方法\" class=\"headerlink\" title=\"获取方法\"></a>获取方法</h4><blockquote>\n<p>get(index),getFirst(),getLast()</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    checkElementIndex(index);<span class=\"comment\">//检查是否越界</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> node(index).item;<span class=\"comment\">//折半查询节点，然后获取该节点的值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">getFirst</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; f = first;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (f == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f.item;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">getLast</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; l = last;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l.item;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h4><blockquote>\n<p>set</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</span><br><span class=\"line\">    checkElementIndex(index);<span class=\"comment\">//检查是否越界</span></span><br><span class=\"line\">    Node&lt;E&gt; x = node(index);<span class=\"comment\">//折半查询索引为index的节点</span></span><br><span class=\"line\">    E oldVal = x.item;<span class=\"comment\">//查询index节点原来的数据值</span></span><br><span class=\"line\">    x.item = element;<span class=\"comment\">//将新值插入</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> oldVal;<span class=\"comment\">//返回旧值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>clear</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//遍历所以的数据，置为null,方便垃圾回收</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; ) &#123;</span><br><span class=\"line\">        Node&lt;E&gt; next = x.next;</span><br><span class=\"line\">        x.item = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        x.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        x.prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        x = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    first = last = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>toArray</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Object[] toArray() &#123;</span><br><span class=\"line\">    Object[] result = <span class=\"keyword\">new</span> Object[size];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//遍历所有的节点，将节点中的值放入数组中</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; x = x.next)</span><br><span class=\"line\">        result[i++] = x.item;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>LinkedList的实现是基于双向循环链表的，且头结点中不存放数据。</li>\n<li>在查找和删除某元素时，源码中都划分为该元素为null和不为null两种情况来处理，LinkedList中允许元素为null</li>\n<li>LinkedList是基于链表实现的，因此不存在容量不足的问题，所以这里没有扩容的方法</li>\n<li>LinkedList是基于链表实现的，因此插入删除效率高，查找效率低</li>\n<li>实现了栈和队列的操作方法，因此也可以作为栈、队列和双端队列来使用</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h2 id=\"LinkedList\"><a href=\"#LinkedList\" class=\"headerlink\" title=\"LinkedList\"></a>LinkedList</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><h4 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h4><blockquote>\n<p>什么是链表</p>\n</blockquote>\n<p>链表是由一系列非连续的节点组成的存储结构，简单分下类的话，链表又分为单向链表和双向链表，而单向/双向链表又可以分为循环链表和非循环链表</p>\n<blockquote>\n<p>单向链表</p>\n</blockquote>\n<p>单向链表就是通过每个结点的指针指向下一个结点从而链接起来的结构，最后一个节点的next指向null。</p>\n<p><img src=\"https://raw.githubusercontent.com/13068098071/picode/main/img/193331_JljJ_2927759.png\" alt=\"单向列表\"></p>\n<blockquote>\n<p>单向循环链表</p>\n</blockquote>\n<p>单向循环链表和单向列表的不同是，最后一个节点的next不是指向null，而是指向head节点，形成一个“环”。</p>\n<p><img src=\"https://raw.githubusercontent.com/13068098071/picode/main/img/193412_xGR9_2927759.png\" alt=\"单向循环链表\"></p>\n<blockquote>\n<p>双向链表</p>\n</blockquote>\n<p>双向链表是包含两个指针的，pre指向前一个节点，next指向后一个节点，但是第一个节点head的pre指向null，最后一个节点的tail指向null。</p>\n<p><img src=\"https://raw.githubusercontent.com/13068098071/picode/main/img/193440_9dt2_2927759.png\" alt=\"双向链表\"></p>\n<blockquote>\n<p>双向循环链表</p>\n</blockquote>\n<p>双向循环链表和双向链表的不同在于，第一个节点的pre指向最后一个节点，最后一个节点的next指向第一个节点，也形成一个“环”。<strong>而LinkedList就是基于双向循环链表设计的。</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/13068098071/picode/main/img/193526_9m6M_2927759.png\" alt=\"双向循环链表\"></p>\n<p>LinkedList底层是基于双向链表，链表在内存中不是连续的，而是通过引用来关联所有的元素，所以链表的优点在于添加和删除元素比较快，因为只是移动指针，并且不需要判断是否需要扩容，缺点是查询和遍历效率比较低。</p>\n<h4 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h4><p><img src=\"https://raw.githubusercontent.com/13068098071/picode/main/img/image-20211224141813601.png\" alt=\"类图\"> LinkedList底层是基于双向链表，链表在内存中不是连续的，而是通过引用来关联所有的元素，所以链表的优点在于添加和删除元素比较快，因为只是移动指针，并且不需要判断是否需要扩容，缺点是查询和遍历效率比较低。</p>\n<ul>\n<li>LinkedList是基于双向循环链表实现的，除了可以当做链表来操作外，它还可以当做栈、队列和双端队列来使用</li>\n<li>实现了所有可选的List操作并且允许存储任何元素，包括Null</li>\n<li>LinkedList实现了Serializable接口，因此它支持序列化，能够通过序列化传输，实现了Cloneable接口，能被克隆</li>\n<li>LinkedList是非线程安全的，只在单线程下适合使用</li>\n</ul>\n<h3 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h3><h4 id=\"成员变量的构造方法\"><a href=\"#成员变量的构造方法\" class=\"headerlink\" title=\"成员变量的构造方法\"></a>成员变量的构造方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 当前存储的元素个数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 首节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> Node&lt;E&gt; first;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 末节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> Node&lt;E&gt; last;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 空构造器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LinkedList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *传入集合参数的构造器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LinkedList</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>();<span class=\"comment\">//调用当前类的构造函数</span></span><br><span class=\"line\">    addAll(c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加方法\"><a href=\"#添加方法\" class=\"headerlink\" title=\"添加方法\"></a>添加方法</h4><blockquote>\n<p>add</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    linkLast(e);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">linkLast</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 获取当前链表的最后一个节点</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; l = last;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建一个以当前最后一个节点为之前节点的节点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(l, e, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    last = newNode;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 空表，首次插入</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        first = newNode;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        l.next = newNode;<span class=\"comment\">//不是首次插入，则最后一个节点的后置节点地址赋值给新节点</span></span><br><span class=\"line\">    size++;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>addAll</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *在链表的尾端追加指定集合的所有元素，按指定的迭代器的集合顺序返回，在这个操作执行总是如果指定的集合被修改了</span></span><br><span class=\"line\"><span class=\"comment\"> *，那么该行为操作将提示未定义</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> addAll(size, c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(<span class=\"keyword\">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 检查index是否越界，index=size+1</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">    checkPositionIndex(index);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将集合参数转化为数组</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Object[] a = c.toArray();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> numNew = a.length;<span class=\"comment\">//要插入的集合长度</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numNew == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义pred和succ两个Node对象，用于标识要插入元素的前置节点和后置节点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Node&lt;E&gt; pred, succ;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这里为什么要写if..else？</span></span><br><span class=\"line\"><span class=\"comment\">     * 因为该方法不一定是从上层方法addAll(size, c)过来的，还有可能是直接调用了addAll(int index, Collection&lt;? extends E&gt; c)</span></span><br><span class=\"line\"><span class=\"comment\">     * 方法，从上层addAll(size, c)跳转过来的，size=index也就从尾部插入，但是直接调用的该方法，则从传进来的参数index这个位置（肯能是任何位置）插入</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index == size) &#123;<span class=\"comment\">//表明是从尾部插入</span></span><br><span class=\"line\">        succ = <span class=\"keyword\">null</span>;<span class=\"comment\">//从尾部插入，后置节点为null</span></span><br><span class=\"line\">        pred = last;<span class=\"comment\">//从尾部插入，前置节点为当前LinkedList中的最后一个节点</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">//表明不是从尾部插入</span></span><br><span class=\"line\">        succ = node(index);<span class=\"comment\">//查到当前LinkedList中位置为index的节点并把它赋给要插入元素的后置节点</span></span><br><span class=\"line\">        pred = succ.prev;<span class=\"comment\">//把上一步得到的节点的前置节点赋值给要插入元素的后置节点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Object o : a) &#123;<span class=\"comment\">//变量集合参数</span></span><br><span class=\"line\">        <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span> E e = (E) o;</span><br><span class=\"line\">        Node&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(pred, e, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pred == <span class=\"keyword\">null</span>)<span class=\"comment\">//说明插入之前当前链表是空链表</span></span><br><span class=\"line\">            first = newNode;<span class=\"comment\">//新节点是第一个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            pred.next = newNode;<span class=\"comment\">//设置插入元素的的前置节点的后置节点为新节点</span></span><br><span class=\"line\">        pred = newNode;<span class=\"comment\">//更改指向后将新节点对象赋给pred作为下次循环中新插入节点的前一个对象节点，依次循环</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"comment\">//此时pred代表集合元素的插入完后的最后一个节点对象</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (succ == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//结尾添加的话在添加完集合元素后将最后一个集合的节点对象pred作为last</span></span><br><span class=\"line\">        last = pred;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        pred.next = succ;<span class=\"comment\">//将集合元素的最后一个节点对象的next指针指向原index位置上的Node对象</span></span><br><span class=\"line\">        succ.prev = pred;<span class=\"comment\">//将原index位置上的pred指针对象指向集合的最后一个对象</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    size += numNew;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns the (non-null) Node at the specified element index.</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回index位置的非空节点</span></span><br><span class=\"line\"><span class=\"comment\"> * 折半查询 </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">Node&lt;E&gt; <span class=\"title\">node</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果index小于当前元素个数的一半，则从前向后遍历查询 ，否则从后向前遍历查询</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &lt; (size &gt;&gt; <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">        Node&lt;E&gt; x = first;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; index; i++)</span><br><span class=\"line\">            x = x.next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Node&lt;E&gt; x = last;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = size - <span class=\"number\">1</span>; i &gt; index; i--)</span><br><span class=\"line\">            x = x.prev;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里面主要是两个方法：</p>\n<ul>\n<li>addAll(int index, Collection&lt;? extends E&gt; c)，这里面首先是判断了是否会出现索引越界的坑你，然后定义pred和succ两个Node对象，用于标识要插入元素的前置节点和后置节点，这段代码的工作原理，可以理解为一根筷子切成A,B两根,A的末尾处的节点为新插入元素的前置节点，B的开始出的节点为新插入元素的后置节点，新插入的元素集合依次放在A,B之间，然后把前置节点和后置节点连接上，就插入完成了。</li>\n<li>node（int index）:这个方法的主要功能是找到index位置的Node节点，源码上利用折半查询进行优化，即使这样，遍历和查询效率还是比较差。</li>\n</ul>\n<h4 id=\"删除方法\"><a href=\"#删除方法\" class=\"headerlink\" title=\"删除方法\"></a>删除方法</h4><blockquote>\n<p>根据元素移除</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *从第一个节点循环指针查找</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果移除的数据为Null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//遍历找到第一个为null的节点，然后移除掉</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; x = x.next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x.item == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                unlink(x);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//遍历找到第一条不为null与参数相等的数据，然后移除掉</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; x = x.next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o.equals(x.item)) &#123;</span><br><span class=\"line\">                unlink(x);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\">E <span class=\"title\">unlink</span><span class=\"params\">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// assert x != null;</span></span><br><span class=\"line\">\t<span class=\"comment\">//移除的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> E element = x.item;</span><br><span class=\"line\">    <span class=\"comment\">//移除节点的后置节点</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; next = x.next;</span><br><span class=\"line\">  <span class=\"comment\">//移除节点的前置节点</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prev == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        first = next;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        prev.next = next;</span><br><span class=\"line\">        x.prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        last = prev;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        next.prev = prev;</span><br><span class=\"line\">        x.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    x.item = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    size--;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>根据索引移除</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    checkElementIndex(index);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unlink(node(index));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"获取方法\"><a href=\"#获取方法\" class=\"headerlink\" title=\"获取方法\"></a>获取方法</h4><blockquote>\n<p>get(index),getFirst(),getLast()</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    checkElementIndex(index);<span class=\"comment\">//检查是否越界</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> node(index).item;<span class=\"comment\">//折半查询节点，然后获取该节点的值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">getFirst</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; f = first;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (f == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f.item;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">getLast</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; l = last;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l.item;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h4><blockquote>\n<p>set</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</span><br><span class=\"line\">    checkElementIndex(index);<span class=\"comment\">//检查是否越界</span></span><br><span class=\"line\">    Node&lt;E&gt; x = node(index);<span class=\"comment\">//折半查询索引为index的节点</span></span><br><span class=\"line\">    E oldVal = x.item;<span class=\"comment\">//查询index节点原来的数据值</span></span><br><span class=\"line\">    x.item = element;<span class=\"comment\">//将新值插入</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> oldVal;<span class=\"comment\">//返回旧值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>clear</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//遍历所以的数据，置为null,方便垃圾回收</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; ) &#123;</span><br><span class=\"line\">        Node&lt;E&gt; next = x.next;</span><br><span class=\"line\">        x.item = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        x.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        x.prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        x = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    first = last = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>toArray</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Object[] toArray() &#123;</span><br><span class=\"line\">    Object[] result = <span class=\"keyword\">new</span> Object[size];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//遍历所有的节点，将节点中的值放入数组中</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; x = x.next)</span><br><span class=\"line\">        result[i++] = x.item;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>LinkedList的实现是基于双向循环链表的，且头结点中不存放数据。</li>\n<li>在查找和删除某元素时，源码中都划分为该元素为null和不为null两种情况来处理，LinkedList中允许元素为null</li>\n<li>LinkedList是基于链表实现的，因此不存在容量不足的问题，所以这里没有扩容的方法</li>\n<li>LinkedList是基于链表实现的，因此插入删除效率高，查找效率低</li>\n<li>实现了栈和队列的操作方法，因此也可以作为栈、队列和双端队列来使用</li>\n</ul>\n"},{"title":"shell","date":"2021-12-21T16:00:00.000Z","description":"shell笔记总结","cover":"https://s2.loli.net/2021/12/23/G8z7X9LPuV1Mmhp.jpg","_content":"## Shell \n\n### 1 变量\n\n#### 1.1 变量定义\n\n```shell\nname=mzc\nname='mzc'\nname=\"mzc\"\n```\n\n#### 1.2 使用变量\n\n```shell\nname=mzc\necho ${name}\necho ${name}qwe\n```\n\n#### 1.3 设置只读变量\n\n```shell\nname=mzc\nreadonly name\n```\n\n#### 1.4 删除变量\n\n```shell\nname=mzc\nunset name\n```\n\n#### 1.5 变量类型\n\n全局变量（环境变量）\n\n```shell\nexport name\npassword=qwe\ndeclare -x password\n```\n\n#### 1.6 字符串\n\n单引号与双引号的区别：\n\n- 单引号中的内容会原样输出，不会执行、不会取变量；\n- 双引号中的内容可以执行、可以取变量；\n\n```shell\nname=mzc\necho 'hello, $name \\\"hh\\\"'  # 单引号字符串，输出 hello, $name \\\"hh\\\"\necho \"hello, $name \\\"hh\\\"\"  # 双引号字符串，输出 hello, yxc \"hh\"\n```\n\n获取字符串长度\n\n```shell\nname=mzc\necho ${#name} # 3\n```\n\n提取子串\n\n```shell\necho ${name:0:2} # 取0-2字符\n```\n\n### 2 默认变量\n\n#### 2.1 文件参数变量\n\n在执行shell脚本时，可以向脚本传递参数。$1是第一个参数，$2是第二个参数，以此类推。\n\n```shell\n#! /bin/bash\necho \"文件名：\"$0\necho \"第一个参数：\"$1\necho \"第二个参数：\"$2\necho \"第三个参数：\"$3\necho \"第四个参数：\"$4\n\nacs@9e0ebfcd82d7:~$ ./test.sh 1 2 3 4\n文件名：./test.sh\n第一个参数：1\n第二个参数：2\n第三个参数：3\n第四个参数：4\n```\n\n#### 2.2 其他参数\n\n![](C:\\Users\\17561\\Desktop\\笔记\\图片\\shell命令.png)\n\n### 3 数组\n\n数组中可以存放多个不同类型的值，只支持一维数组，初始化时不需要指明数组大小。\n数组下标从0开始。\n\n#### 3.1 数组的定义\n\n```shell\narray=(1,abc,\"asd\",qwe)\n\narray[0]=1\narray[1]=zxc\n```\n\n#### 3.2 取值\n\n```shell\n${array[index]}\n\necho array[0]\necho array[1]\n\n# 取出所有\necho ${array[*]}\necho ${array[@]}\n\n# 数组长度\necho ${#array[*]}\necho ${#array[@]}\n```\n\n### 4 expr命令\n\nexpr命令用户求表达式的值，格式为：expr 表达式\n\n表达式说明：\n\n- 用空格隔开每一项\n- 用反斜杠放在shell特定的字符前面（发现表达式运行错误时，可以试试转义）\n- 对包含空格和其他特殊字符的字符串要用引号括起来\n- expr会在stdout中输出结果。如果为逻辑关系表达式，则结果为真，stdout为1，否则为0。\n- expr的exit code：如果为逻辑关系表达式，则结果为真，exit code为0，否则为1。\n\n#### 4.1 字符串表达式\n\n- length string 返回string长度\n- index string charset    charset中任意单个字符在string中最前面的字符位置，下标从1开始。如果在string中完全不存在charset中的字符，则返回0。\n- substr string position length    返回STRING字符串中从POSITION开始，长度最大为LENGTH的子串。如果POSITION或LENGTH为负数，0或非数值，则返回空字符串。\n\n```shell\nstr=\"hello world!\"\necho `expr length \"$str\"`  # 输出12\necho `expr` index \"$str\" awd`  # 输出 7\necho `expr substr \"${str}\" 2 3`  # 输出 ell\n```\n\n#### 4.2 数学表达式\n\nexpr支持普通的算术操作，算术表达式优先级低于字符串表达式，高于逻辑关系表达式。\n\n- {+  -} 加减运算。两端参数会转换为整数，如果转换失败则报错。\n- {* / %} 乘，除，取模运算。两端参数会转换为整数，如果转换失败则报错。\n- () 可以该表优先级，但需要用反斜杠转义\n\n```shell\na=3\nb=4\n\necho `expr ${a} + ${b}` # 7\necho `expr ${a} - ${b}` # -1\necho `expr ${a} \\* ${b}` # 12\necho `expr ${a} / ${b}` # 0\necho `expr ${a} % ${b}` # 3\necho `expr \\( $a + 1 \\) \\* \\( $b + 1 \\)` # 20\n```\n\n#### 4.3 逻辑关系表达式\n\n- | 如果第一个参数非空且非0，则返回第一个参数的值，否则返回第二个参数的值，但要求第二个参数的值也是非空或非0，否则返回0。如果第一个参数是非空或非0时，不会计算第二个参数\n-  & 如果两个参数都非空且非0，则返回第一个参数，否则返回0。如果第一个参为0或为空，则不会计算第二个参数。\n- < <= = == != >= >  比较两端的参数，如果为true，则返回1，否则返回0。”==”是”=”的同义词。”expr”首先尝试将两端参数转换为整数，并做算术比较，如果转换失败，则按字符集排序规则做字符比较。\n- () 可以该表优先级，但需要用反斜杠转义\n\n```shell\na=3\nb=4\n\necho `expr $a \\> $b`  # 输出0，>需要转义\necho `expr $a '<' $b`  # 输出1，也可以将特殊字符用引号引起来\necho `expr $a '>=' $b`  # 输出0\necho `expr $a \\<\\= $b`  # 输出1\n\nc=0\nd=5\n\necho `expr $c \\& $d`  # 输出0\necho `expr $a \\& $b`  # 输出3\necho `expr $c \\| $d`  # 输出5\necho `expr $a \\| $b`  # 输出3\n```\n\n### 5 read\n\nread命令用于从标准输入中读取单行数据。当读到文件结束符时，exit code为1，否则为0\n\n参数说明\n\n- -p: 后面可以接提示信息\n- -t：后面跟秒数，定义输入字符的等待时间，超过等待时间后会自动忽略此命令\n\n```shell\nread name\nmzc\necho $name \nmzc\n\nread -p \"Please input your name：\" -t 5 name\nPlease input your name：mzc\necho $name\nmzc\n```\n\n### 6 echo\n\n输出格式：echo string\n\n\n\n```shell\n# 普通字符串\necho \"Hello World\"\necho Hello World\n\n# 显示变量\nname=mzc\necho \"My name is $name\"\n\n# 显示换行\necho -e \"Hi\\n\"\necho \"acwing\"\n\n# 显示不换行\necho -e \"Hi \\c\"\necho acwing\n\n# 显示结果定向至文件\necho \"Hello World\" > out.txt\n\n# 显示时间\necho `date`\n```\n\n### 7 print\n\nprintf命令用于格式化输出，类似于C/C++中的printf函数。\n\n默认不会在字符串末尾添加换行符。\n\n命令格式：printf format string\n\n```shell\nprintf \"%10d.\\n\" 123\nprintf \"%-10.2f.\\n\" 123.123123\nprintf \"My name is %s\\n\" \"mzc\"\nprintf \"%d + %d = %d\\n\" 2 3 `expr 2 \\* 3`\n\n       123.\n123.12    .\nMy name is yxc\n2 * 3 = 6\n```\n\n### 8 test\n\n#### 8.1 逻辑运算符&&和||\n\n- && 表示与，|| 表示或\n- 二者具有短路原则：\n  expr1 && expr2：当expr1为假时，直接忽略expr2\n  expr1 || expr2：当expr1为真时，直接忽略expr2\n- 表达式的exit code为0，表示真；为非零，表示假。（与C/C++中的定义相反）\n\n#### 8.2 test命令\n\n在命令行中输入man test，可以查看test命令的用法。\n\ntest命令用于判断文件类型，以及对变量做比较。\n\ntest命令用exit code返回结果，而不是使用stdout。0表示真，非0表示假。\n\n```shell\ntest 2 -lt 3 # 为真 0\necho $? # 输出0\n\nls  # 列出当前目录下的所有文件\nhomework  output.txt  test.sh  tmp\ntest -e test.sh && echo \"exist\" || echo \"Not exist\"\nexist  # test.sh 文件存在\ntest -e test2.sh && echo \"exist\" || echo \"Not exist\"\nNot exist  # testh2.sh 文件不存在\n```\n\n#### 8.3 文件类型判断\n\n```shell\ntest -e filename # 判断文件是否存在\n```\n\n-e 文件是否存在\n\n-f 是否为文件\n\n-d 是否为目录\n\n#### 8.4 文件权限判断\n\n```shell\ntest -r filename # 判断文件是否可读\n```\n\n-r 是否可读\n\n-w 是否可写\n\n-x 是否可执行\n\n-s 是否为非null文件\n\n#### 8.5 整数间的比较\n\n```shell\ntest $a -eq $b # a 是否等于 b \n```\n\n| 参数 | 代表意义 |\n| ---- | -------- |\n| -eq  | 等于     |\n| -ne  | 不等于   |\n| -gt  | 大于     |\n| -lt  | 小于     |\n| -ge  | 大于等于 |\n| -le  | 小于等于 |\n\n#### 8.6 字符串比较\n\n| 参数              | 代表意义                       |\n| ----------------- | ------------------------------ |\n| test -z string    | 是否为null，为null，返回true   |\n| test -n string    | 是否为非null，非null，返回true |\n| test str1 == str2 | 是否相等                       |\n| test str1 != str2 | 是否不相等                     |\n\n#### 8.7 多重条件判定\n\n```shell\ntest -r filename -a -x filename\n```\n\n| 参数 | 代表意义             |\n| ---- | -------------------- |\n| -a   | 两个条件同时成立     |\n| -o   | 两个条件至少成立一个 |\n| !    | 取反                 |\n\n#### 8.8 判断符号[]\n\n[]与test用法几乎一模一样，更常用于if语句中。另外[[]]是[]的加强版，支持的特性更多。\n\n```shell\n[ a -lt 3 ] # 为真，返回 0\necho $? # 输出0\n\nls\nhomework  output.txt  test.sh  tmp\n[ -e test.sh ] && echo \"exit\" || echo \"not exit\" \nexit\n[ -e test.sh ] && echo \"exit\" || echo \"not exit\" \nnot exit\n```\n\n \n\n注意：\n\n- []内的每一项都要用空格隔开\n- 中括号内的变量，最好用双引号括起来\n- 中括号内的常数，最好用单或双引号括起来\n\n```shell\nname=\"acwing yxc\"\n[ $name == \"acwing yxc\" ]  # 错误，等价于 [ acwing yxc == \"acwing yxc\" ]，参数太多\n[ \"$name\" == \"acwing yxc\" ]  # 正确\n```\n\n### 9 判断语句\n\n#### 9.1 单层if\n\n格式\n\n```shell\nif condition\nthen \n\t语句1\n\t语句2\n\t....\nfi\n\na=3\nb=4\nif [ $a -lt $b ] \nthen \n\techo $a\nfi\t\n```\n\n#### 9.2 单层if-else\n\n格式\n\n```shell\nif condition\nthen\n\t语句1\n\t语句2\n\t...\nelse \n\t语句1\n\t语句2\n\t...\nfi\n\na=3\nb=4\nif ! [ \"$a\" -lt \"$b\" ]\nthen \n\techo $a\nelse \n\techo $b\nfi\t\n```\n\n#### 9.3 多层if-elif-elif-else\n\n格式\n\n```shell\nif condition\nthen\n\t语句1\n\t语句2\n\t...\nelif condition\nthen\n\t语句1\n\t语句2\n\t...\nelif condition\nthen\n\t语句1\n\t语句2\n\t...\nelse\n\t语句1\n\t语句2\n\t...\nfi\n\na=4\nif [ $a -eq 1 ]\nthen \n\techo $a\nelif [ $a -eq 2 ]\t\nthen \n\techo $a\nelif [ $a -eq 3 ]\t\nthen\n\techo $a\nelse \n\techo $a\nfi\t\n```\n\n#### 9.4 case…esac形式\n\n```shell\ncase $变量名称 in\n\t值1)\n\t\t语句1\n\t\t语句2\n\t\t...\n\t\t;;\n\t值2)\t\n\t\t语句1\n\t\t语句2\n\t\t...\n\t\t;;\n\t*)\t\t\n\t\t语句1\n\t\t语句2\n\t\t...\n\t\t;;\nesac\t\t\n\na=4\ncase $a in\n\t1)\n\t\techo $a\n\t\t;;\n\t2)\n    \techo $a\n    \t;;\n    3)\t\n    \techo $a\n    \t;;\n    *)\t\n    \techo $a\n    \t;;\nesac    \t\n```\n\n### 10 循环语句\n\n#### 10.1 for…in…do…done\n\n```shell\nfor var in val1 val2 val3\ndo\n\t语句1\n\t语句2\n\t...\ndone\n\n# 输出遍历元素\nfor i in a 22 cc\ndo\n\techo $i\ndone\n\n# 输出当前路劲下的所有文件名\nfor i in `ls`\ndo\n\techo $i\ndone \n\n# 输出1-10\nfor i in $(seq 1 10)\ndo\n\techo $i\ndone\n\n# {1..10} {a..z}\nfor i in {a..z}\ndo\n\techo $i\ndone\n```\n\n#### 10.2 for ((…;…;…)) do…done\n\n```shell\nfor((expression;condition;expression))\ndo\n\t语句1\n\t语句2\ndone\n\nfor((i = 0; i <= 10; i++))\ndo\n\techo $i\ndone\t\n```\n\n#### 10.3 until…do…done循环\n\n```shell\nuntil condition \ndo\n\t语句1\n\t语句2\n\t..\ndone\n\nuntil [ \"${word}\" == \"yes ] || [ \"${word}\" == \"YES\"]\ndo\n\tread -p \"Please input yes/YES to stop this program\" word\ndone\n```\n\n### 11 函数\n\nbash中的函数类似于C/C++中的函数，但return的返回值与C/C++不同，返回的是exit code，取值为0-255，0表示正常结束。\n\n如果想获取函数的输出结果，可以通过echo输出到stdout中，然后通过$(function_name)来获取stdout中的结果。\n\n函数的return值可以通过$?来获取。\n\n格式：\n\n```shell\n[function] function_name(){ # function可以省略\n\t语句1\n\t语句2\n}\n\nfunc(){\n\tname=mzc\n\techo \"Hello $name\" \n}\n\nfunc\n\nfunc(){\n\tname=mzc\n\techo \"Hello $name\"\n\treturn 123\n}\n\noutput=$(func)\nret=$?\n\necho\t\"output=$(output)\"\necho\t\"return=$(ret)\"\n```\n\n#### 11.1 函数的输入参数\n\n在函数内，$1表示第一个输入参数，$2表示第二个输入参数，依次类推\n\n注意：$0表示文件名\n\n```shell\nfunc(){\n\tword=\"\"\n\twhile [ \"$word\" != 'y' ] && [ \"$word\" != 'n' ]\n\tdo\n\t\tread -p \"\"要进入func($1)函数吗？请输入y/n：\" word\n\tdone\n\t\n\tif [ \"word\" == 'n' ]\n\tthen\n\t\techo 0\n\t\treturn 0\n\tfi\n\t\n\tif [ $1 -le 0 ]\n\tthen \n\t\techo 0\n\t\treturn 0\n\tfi\n\t\n\tsum=$(func $(expr $1 - 1))\n\techo $(expr $sum + $1)\n}\n\necho $(func 10)\n```\n\n\n\n### 11 练习\n\n```shell\n#! /bin/bash\n\n# ***************  homework_0  *****************\ndir0=/home/acs/homework/lesson_1/homework_0\n\nhomework 1 create 0\n\nfor i in dir_a dir_b dir_c\ndo\n    mkdir \"${dir0}/$i\"\ndone\n\n\n# ***************  homework_1  *****************\ndir1=/home/acs/homework/lesson_1/homework_1\n\nhomework 1 create 1\n\nfor i in a.txt b.txt c.txt \ndo\n    cp \"${dir1}/${i}\" \"${dir1}/${i}.bak\"\ndone\n\n\n\n\n# ***************  homework_2  *****************\ndir2=/home/acs/homework/lesson_1/homework_2\n\nhomework 1 create 2\n\nfor i in a b c\ndo\n    mv \"${dir2}/${i}.txt\" \"${dir2}/${i}_new.txt\"\ndone\n\n# ***************  homework_3  *****************\ndir3=/home/acs/homework/lesson_1/homework_3\n\nhomework 1 create 3\n\nfor i in a.txt b.txt c.txt\ndo\n    mv \"${dir3}/dir_a/${i}\" \"${dir3}/dir_b\"\ndone\n\n# ***************  homework_4  *****************\n\ndir4=/home/acs/homework/lesson_1/homework_4\n\nhomework 1 create 4\n\nrm ${dir4}/*\n\n\n\n# ***************  homework_5  *****************\n\ndir5=/home/acs/homework/lesson_1/homework_5\nhomework 1 create 5\n\nrm -rf ${dir5}/*\n\n\n# ***************  homework_6  *****************\n\ndir6=/home/acs/homework/lesson_1/homework_6\n\nhomework 1 create 6\n\nmkdir \"${dir6}/dir_a\"\n\nmv \"${dir6}/task.txt\" \"${dir6}/dir_a/done.txt\"\n\n\n# ***************  homework_7  *****************\ndir7=/home/acs/homework/lesson_1/homework_7\n\nhomework 1 create 7\n\nfor((i = 0; i < 3; i++))\ndo\n    mkdir ${dir7}/dir_${i}\n    for j in a b c\n    do\n        cp ${dir7}/${j}.txt ${dir7}/dir_${i}/${j}${i}.txt\n    done\ndone\n\n# ***************  homework_8  *****************\ndir8=/home/acs/homework/lesson_1/homework_8\n\nhomework 1 create 8\nrm ${dir8}/dir_a/a.txt\nmv ${dir8}/dir_b/b.txt ${dir8}/dir_b/b_new.txt\ncp ${dir8}/dir_c/c.txt ${dir8}/dir_c/c.txt.bak\n\n\n# ***************  homework_9  *****************\n\ndir9=/home/acs/homework/lesson_1/homework_9\n\nhomework 1 create 9\n\nrm ${dir9}/*.txt\nhomework 1 test\n```\n\n","source":"_posts/Shell.md","raw":"---\ntitle: shell\ndate: 2021-12-22\ndescription: shell笔记总结\ncover: https://s2.loli.net/2021/12/23/G8z7X9LPuV1Mmhp.jpg\ntags: linux\ncategories: linux\n---\n## Shell \n\n### 1 变量\n\n#### 1.1 变量定义\n\n```shell\nname=mzc\nname='mzc'\nname=\"mzc\"\n```\n\n#### 1.2 使用变量\n\n```shell\nname=mzc\necho ${name}\necho ${name}qwe\n```\n\n#### 1.3 设置只读变量\n\n```shell\nname=mzc\nreadonly name\n```\n\n#### 1.4 删除变量\n\n```shell\nname=mzc\nunset name\n```\n\n#### 1.5 变量类型\n\n全局变量（环境变量）\n\n```shell\nexport name\npassword=qwe\ndeclare -x password\n```\n\n#### 1.6 字符串\n\n单引号与双引号的区别：\n\n- 单引号中的内容会原样输出，不会执行、不会取变量；\n- 双引号中的内容可以执行、可以取变量；\n\n```shell\nname=mzc\necho 'hello, $name \\\"hh\\\"'  # 单引号字符串，输出 hello, $name \\\"hh\\\"\necho \"hello, $name \\\"hh\\\"\"  # 双引号字符串，输出 hello, yxc \"hh\"\n```\n\n获取字符串长度\n\n```shell\nname=mzc\necho ${#name} # 3\n```\n\n提取子串\n\n```shell\necho ${name:0:2} # 取0-2字符\n```\n\n### 2 默认变量\n\n#### 2.1 文件参数变量\n\n在执行shell脚本时，可以向脚本传递参数。$1是第一个参数，$2是第二个参数，以此类推。\n\n```shell\n#! /bin/bash\necho \"文件名：\"$0\necho \"第一个参数：\"$1\necho \"第二个参数：\"$2\necho \"第三个参数：\"$3\necho \"第四个参数：\"$4\n\nacs@9e0ebfcd82d7:~$ ./test.sh 1 2 3 4\n文件名：./test.sh\n第一个参数：1\n第二个参数：2\n第三个参数：3\n第四个参数：4\n```\n\n#### 2.2 其他参数\n\n![](C:\\Users\\17561\\Desktop\\笔记\\图片\\shell命令.png)\n\n### 3 数组\n\n数组中可以存放多个不同类型的值，只支持一维数组，初始化时不需要指明数组大小。\n数组下标从0开始。\n\n#### 3.1 数组的定义\n\n```shell\narray=(1,abc,\"asd\",qwe)\n\narray[0]=1\narray[1]=zxc\n```\n\n#### 3.2 取值\n\n```shell\n${array[index]}\n\necho array[0]\necho array[1]\n\n# 取出所有\necho ${array[*]}\necho ${array[@]}\n\n# 数组长度\necho ${#array[*]}\necho ${#array[@]}\n```\n\n### 4 expr命令\n\nexpr命令用户求表达式的值，格式为：expr 表达式\n\n表达式说明：\n\n- 用空格隔开每一项\n- 用反斜杠放在shell特定的字符前面（发现表达式运行错误时，可以试试转义）\n- 对包含空格和其他特殊字符的字符串要用引号括起来\n- expr会在stdout中输出结果。如果为逻辑关系表达式，则结果为真，stdout为1，否则为0。\n- expr的exit code：如果为逻辑关系表达式，则结果为真，exit code为0，否则为1。\n\n#### 4.1 字符串表达式\n\n- length string 返回string长度\n- index string charset    charset中任意单个字符在string中最前面的字符位置，下标从1开始。如果在string中完全不存在charset中的字符，则返回0。\n- substr string position length    返回STRING字符串中从POSITION开始，长度最大为LENGTH的子串。如果POSITION或LENGTH为负数，0或非数值，则返回空字符串。\n\n```shell\nstr=\"hello world!\"\necho `expr length \"$str\"`  # 输出12\necho `expr` index \"$str\" awd`  # 输出 7\necho `expr substr \"${str}\" 2 3`  # 输出 ell\n```\n\n#### 4.2 数学表达式\n\nexpr支持普通的算术操作，算术表达式优先级低于字符串表达式，高于逻辑关系表达式。\n\n- {+  -} 加减运算。两端参数会转换为整数，如果转换失败则报错。\n- {* / %} 乘，除，取模运算。两端参数会转换为整数，如果转换失败则报错。\n- () 可以该表优先级，但需要用反斜杠转义\n\n```shell\na=3\nb=4\n\necho `expr ${a} + ${b}` # 7\necho `expr ${a} - ${b}` # -1\necho `expr ${a} \\* ${b}` # 12\necho `expr ${a} / ${b}` # 0\necho `expr ${a} % ${b}` # 3\necho `expr \\( $a + 1 \\) \\* \\( $b + 1 \\)` # 20\n```\n\n#### 4.3 逻辑关系表达式\n\n- | 如果第一个参数非空且非0，则返回第一个参数的值，否则返回第二个参数的值，但要求第二个参数的值也是非空或非0，否则返回0。如果第一个参数是非空或非0时，不会计算第二个参数\n-  & 如果两个参数都非空且非0，则返回第一个参数，否则返回0。如果第一个参为0或为空，则不会计算第二个参数。\n- < <= = == != >= >  比较两端的参数，如果为true，则返回1，否则返回0。”==”是”=”的同义词。”expr”首先尝试将两端参数转换为整数，并做算术比较，如果转换失败，则按字符集排序规则做字符比较。\n- () 可以该表优先级，但需要用反斜杠转义\n\n```shell\na=3\nb=4\n\necho `expr $a \\> $b`  # 输出0，>需要转义\necho `expr $a '<' $b`  # 输出1，也可以将特殊字符用引号引起来\necho `expr $a '>=' $b`  # 输出0\necho `expr $a \\<\\= $b`  # 输出1\n\nc=0\nd=5\n\necho `expr $c \\& $d`  # 输出0\necho `expr $a \\& $b`  # 输出3\necho `expr $c \\| $d`  # 输出5\necho `expr $a \\| $b`  # 输出3\n```\n\n### 5 read\n\nread命令用于从标准输入中读取单行数据。当读到文件结束符时，exit code为1，否则为0\n\n参数说明\n\n- -p: 后面可以接提示信息\n- -t：后面跟秒数，定义输入字符的等待时间，超过等待时间后会自动忽略此命令\n\n```shell\nread name\nmzc\necho $name \nmzc\n\nread -p \"Please input your name：\" -t 5 name\nPlease input your name：mzc\necho $name\nmzc\n```\n\n### 6 echo\n\n输出格式：echo string\n\n\n\n```shell\n# 普通字符串\necho \"Hello World\"\necho Hello World\n\n# 显示变量\nname=mzc\necho \"My name is $name\"\n\n# 显示换行\necho -e \"Hi\\n\"\necho \"acwing\"\n\n# 显示不换行\necho -e \"Hi \\c\"\necho acwing\n\n# 显示结果定向至文件\necho \"Hello World\" > out.txt\n\n# 显示时间\necho `date`\n```\n\n### 7 print\n\nprintf命令用于格式化输出，类似于C/C++中的printf函数。\n\n默认不会在字符串末尾添加换行符。\n\n命令格式：printf format string\n\n```shell\nprintf \"%10d.\\n\" 123\nprintf \"%-10.2f.\\n\" 123.123123\nprintf \"My name is %s\\n\" \"mzc\"\nprintf \"%d + %d = %d\\n\" 2 3 `expr 2 \\* 3`\n\n       123.\n123.12    .\nMy name is yxc\n2 * 3 = 6\n```\n\n### 8 test\n\n#### 8.1 逻辑运算符&&和||\n\n- && 表示与，|| 表示或\n- 二者具有短路原则：\n  expr1 && expr2：当expr1为假时，直接忽略expr2\n  expr1 || expr2：当expr1为真时，直接忽略expr2\n- 表达式的exit code为0，表示真；为非零，表示假。（与C/C++中的定义相反）\n\n#### 8.2 test命令\n\n在命令行中输入man test，可以查看test命令的用法。\n\ntest命令用于判断文件类型，以及对变量做比较。\n\ntest命令用exit code返回结果，而不是使用stdout。0表示真，非0表示假。\n\n```shell\ntest 2 -lt 3 # 为真 0\necho $? # 输出0\n\nls  # 列出当前目录下的所有文件\nhomework  output.txt  test.sh  tmp\ntest -e test.sh && echo \"exist\" || echo \"Not exist\"\nexist  # test.sh 文件存在\ntest -e test2.sh && echo \"exist\" || echo \"Not exist\"\nNot exist  # testh2.sh 文件不存在\n```\n\n#### 8.3 文件类型判断\n\n```shell\ntest -e filename # 判断文件是否存在\n```\n\n-e 文件是否存在\n\n-f 是否为文件\n\n-d 是否为目录\n\n#### 8.4 文件权限判断\n\n```shell\ntest -r filename # 判断文件是否可读\n```\n\n-r 是否可读\n\n-w 是否可写\n\n-x 是否可执行\n\n-s 是否为非null文件\n\n#### 8.5 整数间的比较\n\n```shell\ntest $a -eq $b # a 是否等于 b \n```\n\n| 参数 | 代表意义 |\n| ---- | -------- |\n| -eq  | 等于     |\n| -ne  | 不等于   |\n| -gt  | 大于     |\n| -lt  | 小于     |\n| -ge  | 大于等于 |\n| -le  | 小于等于 |\n\n#### 8.6 字符串比较\n\n| 参数              | 代表意义                       |\n| ----------------- | ------------------------------ |\n| test -z string    | 是否为null，为null，返回true   |\n| test -n string    | 是否为非null，非null，返回true |\n| test str1 == str2 | 是否相等                       |\n| test str1 != str2 | 是否不相等                     |\n\n#### 8.7 多重条件判定\n\n```shell\ntest -r filename -a -x filename\n```\n\n| 参数 | 代表意义             |\n| ---- | -------------------- |\n| -a   | 两个条件同时成立     |\n| -o   | 两个条件至少成立一个 |\n| !    | 取反                 |\n\n#### 8.8 判断符号[]\n\n[]与test用法几乎一模一样，更常用于if语句中。另外[[]]是[]的加强版，支持的特性更多。\n\n```shell\n[ a -lt 3 ] # 为真，返回 0\necho $? # 输出0\n\nls\nhomework  output.txt  test.sh  tmp\n[ -e test.sh ] && echo \"exit\" || echo \"not exit\" \nexit\n[ -e test.sh ] && echo \"exit\" || echo \"not exit\" \nnot exit\n```\n\n \n\n注意：\n\n- []内的每一项都要用空格隔开\n- 中括号内的变量，最好用双引号括起来\n- 中括号内的常数，最好用单或双引号括起来\n\n```shell\nname=\"acwing yxc\"\n[ $name == \"acwing yxc\" ]  # 错误，等价于 [ acwing yxc == \"acwing yxc\" ]，参数太多\n[ \"$name\" == \"acwing yxc\" ]  # 正确\n```\n\n### 9 判断语句\n\n#### 9.1 单层if\n\n格式\n\n```shell\nif condition\nthen \n\t语句1\n\t语句2\n\t....\nfi\n\na=3\nb=4\nif [ $a -lt $b ] \nthen \n\techo $a\nfi\t\n```\n\n#### 9.2 单层if-else\n\n格式\n\n```shell\nif condition\nthen\n\t语句1\n\t语句2\n\t...\nelse \n\t语句1\n\t语句2\n\t...\nfi\n\na=3\nb=4\nif ! [ \"$a\" -lt \"$b\" ]\nthen \n\techo $a\nelse \n\techo $b\nfi\t\n```\n\n#### 9.3 多层if-elif-elif-else\n\n格式\n\n```shell\nif condition\nthen\n\t语句1\n\t语句2\n\t...\nelif condition\nthen\n\t语句1\n\t语句2\n\t...\nelif condition\nthen\n\t语句1\n\t语句2\n\t...\nelse\n\t语句1\n\t语句2\n\t...\nfi\n\na=4\nif [ $a -eq 1 ]\nthen \n\techo $a\nelif [ $a -eq 2 ]\t\nthen \n\techo $a\nelif [ $a -eq 3 ]\t\nthen\n\techo $a\nelse \n\techo $a\nfi\t\n```\n\n#### 9.4 case…esac形式\n\n```shell\ncase $变量名称 in\n\t值1)\n\t\t语句1\n\t\t语句2\n\t\t...\n\t\t;;\n\t值2)\t\n\t\t语句1\n\t\t语句2\n\t\t...\n\t\t;;\n\t*)\t\t\n\t\t语句1\n\t\t语句2\n\t\t...\n\t\t;;\nesac\t\t\n\na=4\ncase $a in\n\t1)\n\t\techo $a\n\t\t;;\n\t2)\n    \techo $a\n    \t;;\n    3)\t\n    \techo $a\n    \t;;\n    *)\t\n    \techo $a\n    \t;;\nesac    \t\n```\n\n### 10 循环语句\n\n#### 10.1 for…in…do…done\n\n```shell\nfor var in val1 val2 val3\ndo\n\t语句1\n\t语句2\n\t...\ndone\n\n# 输出遍历元素\nfor i in a 22 cc\ndo\n\techo $i\ndone\n\n# 输出当前路劲下的所有文件名\nfor i in `ls`\ndo\n\techo $i\ndone \n\n# 输出1-10\nfor i in $(seq 1 10)\ndo\n\techo $i\ndone\n\n# {1..10} {a..z}\nfor i in {a..z}\ndo\n\techo $i\ndone\n```\n\n#### 10.2 for ((…;…;…)) do…done\n\n```shell\nfor((expression;condition;expression))\ndo\n\t语句1\n\t语句2\ndone\n\nfor((i = 0; i <= 10; i++))\ndo\n\techo $i\ndone\t\n```\n\n#### 10.3 until…do…done循环\n\n```shell\nuntil condition \ndo\n\t语句1\n\t语句2\n\t..\ndone\n\nuntil [ \"${word}\" == \"yes ] || [ \"${word}\" == \"YES\"]\ndo\n\tread -p \"Please input yes/YES to stop this program\" word\ndone\n```\n\n### 11 函数\n\nbash中的函数类似于C/C++中的函数，但return的返回值与C/C++不同，返回的是exit code，取值为0-255，0表示正常结束。\n\n如果想获取函数的输出结果，可以通过echo输出到stdout中，然后通过$(function_name)来获取stdout中的结果。\n\n函数的return值可以通过$?来获取。\n\n格式：\n\n```shell\n[function] function_name(){ # function可以省略\n\t语句1\n\t语句2\n}\n\nfunc(){\n\tname=mzc\n\techo \"Hello $name\" \n}\n\nfunc\n\nfunc(){\n\tname=mzc\n\techo \"Hello $name\"\n\treturn 123\n}\n\noutput=$(func)\nret=$?\n\necho\t\"output=$(output)\"\necho\t\"return=$(ret)\"\n```\n\n#### 11.1 函数的输入参数\n\n在函数内，$1表示第一个输入参数，$2表示第二个输入参数，依次类推\n\n注意：$0表示文件名\n\n```shell\nfunc(){\n\tword=\"\"\n\twhile [ \"$word\" != 'y' ] && [ \"$word\" != 'n' ]\n\tdo\n\t\tread -p \"\"要进入func($1)函数吗？请输入y/n：\" word\n\tdone\n\t\n\tif [ \"word\" == 'n' ]\n\tthen\n\t\techo 0\n\t\treturn 0\n\tfi\n\t\n\tif [ $1 -le 0 ]\n\tthen \n\t\techo 0\n\t\treturn 0\n\tfi\n\t\n\tsum=$(func $(expr $1 - 1))\n\techo $(expr $sum + $1)\n}\n\necho $(func 10)\n```\n\n\n\n### 11 练习\n\n```shell\n#! /bin/bash\n\n# ***************  homework_0  *****************\ndir0=/home/acs/homework/lesson_1/homework_0\n\nhomework 1 create 0\n\nfor i in dir_a dir_b dir_c\ndo\n    mkdir \"${dir0}/$i\"\ndone\n\n\n# ***************  homework_1  *****************\ndir1=/home/acs/homework/lesson_1/homework_1\n\nhomework 1 create 1\n\nfor i in a.txt b.txt c.txt \ndo\n    cp \"${dir1}/${i}\" \"${dir1}/${i}.bak\"\ndone\n\n\n\n\n# ***************  homework_2  *****************\ndir2=/home/acs/homework/lesson_1/homework_2\n\nhomework 1 create 2\n\nfor i in a b c\ndo\n    mv \"${dir2}/${i}.txt\" \"${dir2}/${i}_new.txt\"\ndone\n\n# ***************  homework_3  *****************\ndir3=/home/acs/homework/lesson_1/homework_3\n\nhomework 1 create 3\n\nfor i in a.txt b.txt c.txt\ndo\n    mv \"${dir3}/dir_a/${i}\" \"${dir3}/dir_b\"\ndone\n\n# ***************  homework_4  *****************\n\ndir4=/home/acs/homework/lesson_1/homework_4\n\nhomework 1 create 4\n\nrm ${dir4}/*\n\n\n\n# ***************  homework_5  *****************\n\ndir5=/home/acs/homework/lesson_1/homework_5\nhomework 1 create 5\n\nrm -rf ${dir5}/*\n\n\n# ***************  homework_6  *****************\n\ndir6=/home/acs/homework/lesson_1/homework_6\n\nhomework 1 create 6\n\nmkdir \"${dir6}/dir_a\"\n\nmv \"${dir6}/task.txt\" \"${dir6}/dir_a/done.txt\"\n\n\n# ***************  homework_7  *****************\ndir7=/home/acs/homework/lesson_1/homework_7\n\nhomework 1 create 7\n\nfor((i = 0; i < 3; i++))\ndo\n    mkdir ${dir7}/dir_${i}\n    for j in a b c\n    do\n        cp ${dir7}/${j}.txt ${dir7}/dir_${i}/${j}${i}.txt\n    done\ndone\n\n# ***************  homework_8  *****************\ndir8=/home/acs/homework/lesson_1/homework_8\n\nhomework 1 create 8\nrm ${dir8}/dir_a/a.txt\nmv ${dir8}/dir_b/b.txt ${dir8}/dir_b/b_new.txt\ncp ${dir8}/dir_c/c.txt ${dir8}/dir_c/c.txt.bak\n\n\n# ***************  homework_9  *****************\n\ndir9=/home/acs/homework/lesson_1/homework_9\n\nhomework 1 create 9\n\nrm ${dir9}/*.txt\nhomework 1 test\n```\n\n","slug":"Shell","published":1,"updated":"2021-12-24T10:08:04.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxk8uw0o0008virj3ua1cr87","content":"<h2 id=\"Shell\"><a href=\"#Shell\" class=\"headerlink\" title=\"Shell\"></a>Shell</h2><h3 id=\"1-变量\"><a href=\"#1-变量\" class=\"headerlink\" title=\"1 变量\"></a>1 变量</h3><h4 id=\"1-1-变量定义\"><a href=\"#1-1-变量定义\" class=\"headerlink\" title=\"1.1 变量定义\"></a>1.1 变量定义</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=mzc</span><br><span class=\"line\">name=&#x27;mzc&#x27;</span><br><span class=\"line\">name=&quot;mzc&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-2-使用变量\"><a href=\"#1-2-使用变量\" class=\"headerlink\" title=\"1.2 使用变量\"></a>1.2 使用变量</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=mzc</span><br><span class=\"line\">echo $&#123;name&#125;</span><br><span class=\"line\">echo $&#123;name&#125;qwe</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-设置只读变量\"><a href=\"#1-3-设置只读变量\" class=\"headerlink\" title=\"1.3 设置只读变量\"></a>1.3 设置只读变量</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=mzc</span><br><span class=\"line\">readonly name</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-4-删除变量\"><a href=\"#1-4-删除变量\" class=\"headerlink\" title=\"1.4 删除变量\"></a>1.4 删除变量</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=mzc</span><br><span class=\"line\">unset name</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-5-变量类型\"><a href=\"#1-5-变量类型\" class=\"headerlink\" title=\"1.5 变量类型\"></a>1.5 变量类型</h4><p>全局变量（环境变量）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export name</span><br><span class=\"line\">password=qwe</span><br><span class=\"line\">declare -x password</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-6-字符串\"><a href=\"#1-6-字符串\" class=\"headerlink\" title=\"1.6 字符串\"></a>1.6 字符串</h4><p>单引号与双引号的区别：</p>\n<ul>\n<li>单引号中的内容会原样输出，不会执行、不会取变量；</li>\n<li>双引号中的内容可以执行、可以取变量；</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=mzc</span><br><span class=\"line\">echo &#x27;hello, $name \\&quot;hh\\&quot;&#x27;  # 单引号字符串，输出 hello, $name \\&quot;hh\\&quot;</span><br><span class=\"line\">echo &quot;hello, $name \\&quot;hh\\&quot;&quot;  # 双引号字符串，输出 hello, yxc &quot;hh&quot;</span><br></pre></td></tr></table></figure>\n\n<p>获取字符串长度</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=mzc</span><br><span class=\"line\">echo $&#123;#name&#125; # 3</span><br></pre></td></tr></table></figure>\n\n<p>提取子串</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $&#123;name:0:2&#125; # 取0-2字符</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-默认变量\"><a href=\"#2-默认变量\" class=\"headerlink\" title=\"2 默认变量\"></a>2 默认变量</h3><h4 id=\"2-1-文件参数变量\"><a href=\"#2-1-文件参数变量\" class=\"headerlink\" title=\"2.1 文件参数变量\"></a>2.1 文件参数变量</h4><p>在执行shell脚本时，可以向脚本传递参数。$1是第一个参数，$2是第二个参数，以此类推。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">! /bin/bash</span></span><br><span class=\"line\">echo &quot;文件名：&quot;$0</span><br><span class=\"line\">echo &quot;第一个参数：&quot;$1</span><br><span class=\"line\">echo &quot;第二个参数：&quot;$2</span><br><span class=\"line\">echo &quot;第三个参数：&quot;$3</span><br><span class=\"line\">echo &quot;第四个参数：&quot;$4</span><br><span class=\"line\"></span><br><span class=\"line\">acs@9e0ebfcd82d7:~$ ./test.sh 1 2 3 4</span><br><span class=\"line\">文件名：./test.sh</span><br><span class=\"line\">第一个参数：1</span><br><span class=\"line\">第二个参数：2</span><br><span class=\"line\">第三个参数：3</span><br><span class=\"line\">第四个参数：4</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-其他参数\"><a href=\"#2-2-其他参数\" class=\"headerlink\" title=\"2.2 其他参数\"></a>2.2 其他参数</h4><p><img src=\"C:\\Users\\17561\\Desktop\\笔记\\图片\\shell命令.png\"></p>\n<h3 id=\"3-数组\"><a href=\"#3-数组\" class=\"headerlink\" title=\"3 数组\"></a>3 数组</h3><p>数组中可以存放多个不同类型的值，只支持一维数组，初始化时不需要指明数组大小。<br>数组下标从0开始。</p>\n<h4 id=\"3-1-数组的定义\"><a href=\"#3-1-数组的定义\" class=\"headerlink\" title=\"3.1 数组的定义\"></a>3.1 数组的定义</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array=(1,abc,&quot;asd&quot;,qwe)</span><br><span class=\"line\"></span><br><span class=\"line\">array[0]=1</span><br><span class=\"line\">array[1]=zxc</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-取值\"><a href=\"#3-2-取值\" class=\"headerlink\" title=\"3.2 取值\"></a>3.2 取值</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;array[index]&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">echo array[0]</span><br><span class=\"line\">echo array[1]</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 取出所有</span></span><br><span class=\"line\">echo $&#123;array[*]&#125;</span><br><span class=\"line\">echo $&#123;array[@]&#125;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 数组长度</span></span><br><span class=\"line\">echo $&#123;#array[*]&#125;</span><br><span class=\"line\">echo $&#123;#array[@]&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-expr命令\"><a href=\"#4-expr命令\" class=\"headerlink\" title=\"4 expr命令\"></a>4 expr命令</h3><p>expr命令用户求表达式的值，格式为：expr 表达式</p>\n<p>表达式说明：</p>\n<ul>\n<li>用空格隔开每一项</li>\n<li>用反斜杠放在shell特定的字符前面（发现表达式运行错误时，可以试试转义）</li>\n<li>对包含空格和其他特殊字符的字符串要用引号括起来</li>\n<li>expr会在stdout中输出结果。如果为逻辑关系表达式，则结果为真，stdout为1，否则为0。</li>\n<li>expr的exit code：如果为逻辑关系表达式，则结果为真，exit code为0，否则为1。</li>\n</ul>\n<h4 id=\"4-1-字符串表达式\"><a href=\"#4-1-字符串表达式\" class=\"headerlink\" title=\"4.1 字符串表达式\"></a>4.1 字符串表达式</h4><ul>\n<li>length string 返回string长度</li>\n<li>index string charset    charset中任意单个字符在string中最前面的字符位置，下标从1开始。如果在string中完全不存在charset中的字符，则返回0。</li>\n<li>substr string position length    返回STRING字符串中从POSITION开始，长度最大为LENGTH的子串。如果POSITION或LENGTH为负数，0或非数值，则返回空字符串。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str=&quot;hello world!&quot;</span><br><span class=\"line\">echo `expr length &quot;$str&quot;`  # 输出12</span><br><span class=\"line\">echo `expr` index &quot;$str&quot; awd`  # 输出 7</span><br><span class=\"line\">echo `expr substr &quot;$&#123;str&#125;&quot; 2 3`  # 输出 ell</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-数学表达式\"><a href=\"#4-2-数学表达式\" class=\"headerlink\" title=\"4.2 数学表达式\"></a>4.2 数学表达式</h4><p>expr支持普通的算术操作，算术表达式优先级低于字符串表达式，高于逻辑关系表达式。</p>\n<ul>\n<li>{+  -} 加减运算。两端参数会转换为整数，如果转换失败则报错。</li>\n<li>{* / %} 乘，除，取模运算。两端参数会转换为整数，如果转换失败则报错。</li>\n<li>() 可以该表优先级，但需要用反斜杠转义</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=3</span><br><span class=\"line\">b=4</span><br><span class=\"line\"></span><br><span class=\"line\">echo `expr $&#123;a&#125; + $&#123;b&#125;` # 7</span><br><span class=\"line\">echo `expr $&#123;a&#125; - $&#123;b&#125;` # -1</span><br><span class=\"line\">echo `expr $&#123;a&#125; \\* $&#123;b&#125;` # 12</span><br><span class=\"line\">echo `expr $&#123;a&#125; / $&#123;b&#125;` # 0</span><br><span class=\"line\">echo `expr $&#123;a&#125; % $&#123;b&#125;` # 3</span><br><span class=\"line\">echo `expr \\( $a + 1 \\) \\* \\( $b + 1 \\)` # 20</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-3-逻辑关系表达式\"><a href=\"#4-3-逻辑关系表达式\" class=\"headerlink\" title=\"4.3 逻辑关系表达式\"></a>4.3 逻辑关系表达式</h4><ul>\n<li>| 如果第一个参数非空且非0，则返回第一个参数的值，否则返回第二个参数的值，但要求第二个参数的值也是非空或非0，否则返回0。如果第一个参数是非空或非0时，不会计算第二个参数</li>\n<li> &amp; 如果两个参数都非空且非0，则返回第一个参数，否则返回0。如果第一个参为0或为空，则不会计算第二个参数。</li>\n<li>&lt; &lt;= = == != &gt;= &gt;  比较两端的参数，如果为true，则返回1，否则返回0。”==”是”=”的同义词。”expr”首先尝试将两端参数转换为整数，并做算术比较，如果转换失败，则按字符集排序规则做字符比较。</li>\n<li>() 可以该表优先级，但需要用反斜杠转义</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=3</span><br><span class=\"line\">b=4</span><br><span class=\"line\"></span><br><span class=\"line\">echo `expr $a \\&gt; $b`  # 输出0，&gt;需要转义</span><br><span class=\"line\">echo `expr $a &#x27;&lt;&#x27; $b`  # 输出1，也可以将特殊字符用引号引起来</span><br><span class=\"line\">echo `expr $a &#x27;&gt;=&#x27; $b`  # 输出0</span><br><span class=\"line\">echo `expr $a \\&lt;\\= $b`  # 输出1</span><br><span class=\"line\"></span><br><span class=\"line\">c=0</span><br><span class=\"line\">d=5</span><br><span class=\"line\"></span><br><span class=\"line\">echo `expr $c \\&amp; $d`  # 输出0</span><br><span class=\"line\">echo `expr $a \\&amp; $b`  # 输出3</span><br><span class=\"line\">echo `expr $c \\| $d`  # 输出5</span><br><span class=\"line\">echo `expr $a \\| $b`  # 输出3</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-read\"><a href=\"#5-read\" class=\"headerlink\" title=\"5 read\"></a>5 read</h3><p>read命令用于从标准输入中读取单行数据。当读到文件结束符时，exit code为1，否则为0</p>\n<p>参数说明</p>\n<ul>\n<li>-p: 后面可以接提示信息</li>\n<li>-t：后面跟秒数，定义输入字符的等待时间，超过等待时间后会自动忽略此命令</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">read name</span><br><span class=\"line\">mzc</span><br><span class=\"line\">echo $name </span><br><span class=\"line\">mzc</span><br><span class=\"line\"></span><br><span class=\"line\">read -p &quot;Please input your name：&quot; -t 5 name</span><br><span class=\"line\">Please input your name：mzc</span><br><span class=\"line\">echo $name</span><br><span class=\"line\">mzc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-echo\"><a href=\"#6-echo\" class=\"headerlink\" title=\"6 echo\"></a>6 echo</h3><p>输出格式：echo string</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 普通字符串</span></span><br><span class=\"line\">echo &quot;Hello World&quot;</span><br><span class=\"line\">echo Hello World</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示变量</span></span><br><span class=\"line\">name=mzc</span><br><span class=\"line\">echo &quot;My name is $name&quot;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示换行</span></span><br><span class=\"line\">echo -e &quot;Hi\\n&quot;</span><br><span class=\"line\">echo &quot;acwing&quot;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示不换行</span></span><br><span class=\"line\">echo -e &quot;Hi \\c&quot;</span><br><span class=\"line\">echo acwing</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示结果定向至文件</span></span><br><span class=\"line\">echo &quot;Hello World&quot; &gt; out.txt</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示时间</span></span><br><span class=\"line\">echo `date`</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-print\"><a href=\"#7-print\" class=\"headerlink\" title=\"7 print\"></a>7 print</h3><p>printf命令用于格式化输出，类似于C/C++中的printf函数。</p>\n<p>默认不会在字符串末尾添加换行符。</p>\n<p>命令格式：printf format string</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printf &quot;%10d.\\n&quot; 123</span><br><span class=\"line\">printf &quot;%-10.2f.\\n&quot; 123.123123</span><br><span class=\"line\">printf &quot;My name is %s\\n&quot; &quot;mzc&quot;</span><br><span class=\"line\">printf &quot;%d + %d = %d\\n&quot; 2 3 `expr 2 \\* 3`</span><br><span class=\"line\"></span><br><span class=\"line\">       123.</span><br><span class=\"line\">123.12    .</span><br><span class=\"line\">My name is yxc</span><br><span class=\"line\">2 * 3 = 6</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-test\"><a href=\"#8-test\" class=\"headerlink\" title=\"8 test\"></a>8 test</h3><h4 id=\"8-1-逻辑运算符-amp-amp-和\"><a href=\"#8-1-逻辑运算符-amp-amp-和\" class=\"headerlink\" title=\"8.1 逻辑运算符&amp;&amp;和||\"></a>8.1 逻辑运算符&amp;&amp;和||</h4><ul>\n<li>&amp;&amp; 表示与，|| 表示或</li>\n<li>二者具有短路原则：<br>expr1 &amp;&amp; expr2：当expr1为假时，直接忽略expr2<br>expr1 || expr2：当expr1为真时，直接忽略expr2</li>\n<li>表达式的exit code为0，表示真；为非零，表示假。（与C/C++中的定义相反）</li>\n</ul>\n<h4 id=\"8-2-test命令\"><a href=\"#8-2-test命令\" class=\"headerlink\" title=\"8.2 test命令\"></a>8.2 test命令</h4><p>在命令行中输入man test，可以查看test命令的用法。</p>\n<p>test命令用于判断文件类型，以及对变量做比较。</p>\n<p>test命令用exit code返回结果，而不是使用stdout。0表示真，非0表示假。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test 2 -lt 3 # 为真 0</span><br><span class=\"line\">echo $? # 输出0</span><br><span class=\"line\"></span><br><span class=\"line\">ls  # 列出当前目录下的所有文件</span><br><span class=\"line\">homework  output.txt  test.sh  tmp</span><br><span class=\"line\">test -e test.sh &amp;&amp; echo &quot;exist&quot; || echo &quot;Not exist&quot;</span><br><span class=\"line\">exist  # test.sh 文件存在</span><br><span class=\"line\">test -e test2.sh &amp;&amp; echo &quot;exist&quot; || echo &quot;Not exist&quot;</span><br><span class=\"line\">Not exist  # testh2.sh 文件不存在</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-3-文件类型判断\"><a href=\"#8-3-文件类型判断\" class=\"headerlink\" title=\"8.3 文件类型判断\"></a>8.3 文件类型判断</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test -e filename # 判断文件是否存在</span><br></pre></td></tr></table></figure>\n\n<p>-e 文件是否存在</p>\n<p>-f 是否为文件</p>\n<p>-d 是否为目录</p>\n<h4 id=\"8-4-文件权限判断\"><a href=\"#8-4-文件权限判断\" class=\"headerlink\" title=\"8.4 文件权限判断\"></a>8.4 文件权限判断</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test -r filename # 判断文件是否可读</span><br></pre></td></tr></table></figure>\n\n<p>-r 是否可读</p>\n<p>-w 是否可写</p>\n<p>-x 是否可执行</p>\n<p>-s 是否为非null文件</p>\n<h4 id=\"8-5-整数间的比较\"><a href=\"#8-5-整数间的比较\" class=\"headerlink\" title=\"8.5 整数间的比较\"></a>8.5 整数间的比较</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test $a -eq $b # a 是否等于 b </span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>代表意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-eq</td>\n<td>等于</td>\n</tr>\n<tr>\n<td>-ne</td>\n<td>不等于</td>\n</tr>\n<tr>\n<td>-gt</td>\n<td>大于</td>\n</tr>\n<tr>\n<td>-lt</td>\n<td>小于</td>\n</tr>\n<tr>\n<td>-ge</td>\n<td>大于等于</td>\n</tr>\n<tr>\n<td>-le</td>\n<td>小于等于</td>\n</tr>\n</tbody></table>\n<h4 id=\"8-6-字符串比较\"><a href=\"#8-6-字符串比较\" class=\"headerlink\" title=\"8.6 字符串比较\"></a>8.6 字符串比较</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>代表意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>test -z string</td>\n<td>是否为null，为null，返回true</td>\n</tr>\n<tr>\n<td>test -n string</td>\n<td>是否为非null，非null，返回true</td>\n</tr>\n<tr>\n<td>test str1 == str2</td>\n<td>是否相等</td>\n</tr>\n<tr>\n<td>test str1 != str2</td>\n<td>是否不相等</td>\n</tr>\n</tbody></table>\n<h4 id=\"8-7-多重条件判定\"><a href=\"#8-7-多重条件判定\" class=\"headerlink\" title=\"8.7 多重条件判定\"></a>8.7 多重条件判定</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test -r filename -a -x filename</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>代表意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-a</td>\n<td>两个条件同时成立</td>\n</tr>\n<tr>\n<td>-o</td>\n<td>两个条件至少成立一个</td>\n</tr>\n<tr>\n<td>!</td>\n<td>取反</td>\n</tr>\n</tbody></table>\n<h4 id=\"8-8-判断符号\"><a href=\"#8-8-判断符号\" class=\"headerlink\" title=\"8.8 判断符号[]\"></a>8.8 判断符号[]</h4><p>[]与test用法几乎一模一样，更常用于if语句中。另外[[]]是[]的加强版，支持的特性更多。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ a -lt 3 ] # 为真，返回 0</span><br><span class=\"line\">echo $? # 输出0</span><br><span class=\"line\"></span><br><span class=\"line\">ls</span><br><span class=\"line\">homework  output.txt  test.sh  tmp</span><br><span class=\"line\">[ -e test.sh ] &amp;&amp; echo &quot;exit&quot; || echo &quot;not exit&quot; </span><br><span class=\"line\">exit</span><br><span class=\"line\">[ -e test.sh ] &amp;&amp; echo &quot;exit&quot; || echo &quot;not exit&quot; </span><br><span class=\"line\">not exit</span><br></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<ul>\n<li>[]内的每一项都要用空格隔开</li>\n<li>中括号内的变量，最好用双引号括起来</li>\n<li>中括号内的常数，最好用单或双引号括起来</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=&quot;acwing yxc&quot;</span><br><span class=\"line\">[ $name == &quot;acwing yxc&quot; ]  # 错误，等价于 [ acwing yxc == &quot;acwing yxc&quot; ]，参数太多</span><br><span class=\"line\">[ &quot;$name&quot; == &quot;acwing yxc&quot; ]  # 正确</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-判断语句\"><a href=\"#9-判断语句\" class=\"headerlink\" title=\"9 判断语句\"></a>9 判断语句</h3><h4 id=\"9-1-单层if\"><a href=\"#9-1-单层if\" class=\"headerlink\" title=\"9.1 单层if\"></a>9.1 单层if</h4><p>格式</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if condition</span><br><span class=\"line\">then </span><br><span class=\"line\">\t语句1</span><br><span class=\"line\">\t语句2</span><br><span class=\"line\">\t....</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">a=3</span><br><span class=\"line\">b=4</span><br><span class=\"line\">if [ $a -lt $b ] </span><br><span class=\"line\">then </span><br><span class=\"line\">\techo $a</span><br><span class=\"line\">fi\t</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-2-单层if-else\"><a href=\"#9-2-单层if-else\" class=\"headerlink\" title=\"9.2 单层if-else\"></a>9.2 单层if-else</h4><p>格式</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if condition</span><br><span class=\"line\">then</span><br><span class=\"line\">\t语句1</span><br><span class=\"line\">\t语句2</span><br><span class=\"line\">\t...</span><br><span class=\"line\">else </span><br><span class=\"line\">\t语句1</span><br><span class=\"line\">\t语句2</span><br><span class=\"line\">\t...</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">a=3</span><br><span class=\"line\">b=4</span><br><span class=\"line\">if ! [ &quot;$a&quot; -lt &quot;$b&quot; ]</span><br><span class=\"line\">then </span><br><span class=\"line\">\techo $a</span><br><span class=\"line\">else </span><br><span class=\"line\">\techo $b</span><br><span class=\"line\">fi\t</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-3-多层if-elif-elif-else\"><a href=\"#9-3-多层if-elif-elif-else\" class=\"headerlink\" title=\"9.3 多层if-elif-elif-else\"></a>9.3 多层if-elif-elif-else</h4><p>格式</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if condition</span><br><span class=\"line\">then</span><br><span class=\"line\">\t语句1</span><br><span class=\"line\">\t语句2</span><br><span class=\"line\">\t...</span><br><span class=\"line\">elif condition</span><br><span class=\"line\">then</span><br><span class=\"line\">\t语句1</span><br><span class=\"line\">\t语句2</span><br><span class=\"line\">\t...</span><br><span class=\"line\">elif condition</span><br><span class=\"line\">then</span><br><span class=\"line\">\t语句1</span><br><span class=\"line\">\t语句2</span><br><span class=\"line\">\t...</span><br><span class=\"line\">else</span><br><span class=\"line\">\t语句1</span><br><span class=\"line\">\t语句2</span><br><span class=\"line\">\t...</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">a=4</span><br><span class=\"line\">if [ $a -eq 1 ]</span><br><span class=\"line\">then </span><br><span class=\"line\">\techo $a</span><br><span class=\"line\">elif [ $a -eq 2 ]\t</span><br><span class=\"line\">then </span><br><span class=\"line\">\techo $a</span><br><span class=\"line\">elif [ $a -eq 3 ]\t</span><br><span class=\"line\">then</span><br><span class=\"line\">\techo $a</span><br><span class=\"line\">else </span><br><span class=\"line\">\techo $a</span><br><span class=\"line\">fi\t</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-4-case…esac形式\"><a href=\"#9-4-case…esac形式\" class=\"headerlink\" title=\"9.4 case…esac形式\"></a>9.4 case…esac形式</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case $变量名称 in</span><br><span class=\"line\">\t值1)</span><br><span class=\"line\">\t\t语句1</span><br><span class=\"line\">\t\t语句2</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\">\t值2)\t</span><br><span class=\"line\">\t\t语句1</span><br><span class=\"line\">\t\t语句2</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\">\t*)\t\t</span><br><span class=\"line\">\t\t语句1</span><br><span class=\"line\">\t\t语句2</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\">esac\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">a=4</span><br><span class=\"line\">case $a in</span><br><span class=\"line\">\t1)</span><br><span class=\"line\">\t\techo $a</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\">\t2)</span><br><span class=\"line\">    \techo $a</span><br><span class=\"line\">    \t;;</span><br><span class=\"line\">    3)\t</span><br><span class=\"line\">    \techo $a</span><br><span class=\"line\">    \t;;</span><br><span class=\"line\">    *)\t</span><br><span class=\"line\">    \techo $a</span><br><span class=\"line\">    \t;;</span><br><span class=\"line\">esac    \t</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-循环语句\"><a href=\"#10-循环语句\" class=\"headerlink\" title=\"10 循环语句\"></a>10 循环语句</h3><h4 id=\"10-1-for…in…do…done\"><a href=\"#10-1-for…in…do…done\" class=\"headerlink\" title=\"10.1 for…in…do…done\"></a>10.1 for…in…do…done</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for var in val1 val2 val3</span><br><span class=\"line\">do</span><br><span class=\"line\">\t语句1</span><br><span class=\"line\">\t语句2</span><br><span class=\"line\">\t...</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 输出遍历元素</span></span><br><span class=\"line\">for i in a 22 cc</span><br><span class=\"line\">do</span><br><span class=\"line\">\techo $i</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 输出当前路劲下的所有文件名</span></span><br><span class=\"line\">for i in `ls`</span><br><span class=\"line\">do</span><br><span class=\"line\">\techo $i</span><br><span class=\"line\">done </span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 输出1-10</span></span><br><span class=\"line\">for i in $(seq 1 10)</span><br><span class=\"line\">do</span><br><span class=\"line\">\techo $i</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> &#123;1..10&#125; &#123;a..z&#125;</span></span><br><span class=\"line\">for i in &#123;a..z&#125;</span><br><span class=\"line\">do</span><br><span class=\"line\">\techo $i</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-2-for-…-…-…-do…done\"><a href=\"#10-2-for-…-…-…-do…done\" class=\"headerlink\" title=\"10.2 for ((…;…;…)) do…done\"></a>10.2 for ((…;…;…)) do…done</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for((expression;condition;expression))</span><br><span class=\"line\">do</span><br><span class=\"line\">\t语句1</span><br><span class=\"line\">\t语句2</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">for((i = 0; i &lt;= 10; i++))</span><br><span class=\"line\">do</span><br><span class=\"line\">\techo $i</span><br><span class=\"line\">done\t</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-3-until…do…done循环\"><a href=\"#10-3-until…do…done循环\" class=\"headerlink\" title=\"10.3 until…do…done循环\"></a>10.3 until…do…done循环</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">until condition </span><br><span class=\"line\">do</span><br><span class=\"line\">\t语句1</span><br><span class=\"line\">\t语句2</span><br><span class=\"line\">\t..</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">until [ &quot;$&#123;word&#125;&quot; == &quot;yes ] || [ &quot;$&#123;word&#125;&quot; == &quot;YES&quot;]</span><br><span class=\"line\">do</span><br><span class=\"line\">\tread -p &quot;Please input yes/YES to stop this program&quot; word</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-函数\"><a href=\"#11-函数\" class=\"headerlink\" title=\"11 函数\"></a>11 函数</h3><p>bash中的函数类似于C/C++中的函数，但return的返回值与C/C++不同，返回的是exit code，取值为0-255，0表示正常结束。</p>\n<p>如果想获取函数的输出结果，可以通过echo输出到stdout中，然后通过$(function_name)来获取stdout中的结果。</p>\n<p>函数的return值可以通过$?来获取。</p>\n<p>格式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[function] function_name()&#123; # function可以省略</span><br><span class=\"line\">\t语句1</span><br><span class=\"line\">\t语句2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func()&#123;</span><br><span class=\"line\">\tname=mzc</span><br><span class=\"line\">\techo &quot;Hello $name&quot; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func</span><br><span class=\"line\"></span><br><span class=\"line\">func()&#123;</span><br><span class=\"line\">\tname=mzc</span><br><span class=\"line\">\techo &quot;Hello $name&quot;</span><br><span class=\"line\">\treturn 123</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output=$(func)</span><br><span class=\"line\">ret=$?</span><br><span class=\"line\"></span><br><span class=\"line\">echo\t&quot;output=$(output)&quot;</span><br><span class=\"line\">echo\t&quot;return=$(ret)&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"11-1-函数的输入参数\"><a href=\"#11-1-函数的输入参数\" class=\"headerlink\" title=\"11.1 函数的输入参数\"></a>11.1 函数的输入参数</h4><p>在函数内，$1表示第一个输入参数，$2表示第二个输入参数，依次类推</p>\n<p>注意：$0表示文件名</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func()&#123;</span><br><span class=\"line\">\tword=&quot;&quot;</span><br><span class=\"line\">\twhile [ &quot;$word&quot; != &#x27;y&#x27; ] &amp;&amp; [ &quot;$word&quot; != &#x27;n&#x27; ]</span><br><span class=\"line\">\tdo</span><br><span class=\"line\">\t\tread -p &quot;&quot;要进入func($1)函数吗？请输入y/n：&quot; word</span><br><span class=\"line\">\tdone</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tif [ &quot;word&quot; == &#x27;n&#x27; ]</span><br><span class=\"line\">\tthen</span><br><span class=\"line\">\t\techo 0</span><br><span class=\"line\">\t\treturn 0</span><br><span class=\"line\">\tfi</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tif [ $1 -le 0 ]</span><br><span class=\"line\">\tthen </span><br><span class=\"line\">\t\techo 0</span><br><span class=\"line\">\t\treturn 0</span><br><span class=\"line\">\tfi</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tsum=$(func $(expr $1 - 1))</span><br><span class=\"line\">\techo $(expr $sum + $1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">echo $(func 10)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"11-练习\"><a href=\"#11-练习\" class=\"headerlink\" title=\"11 练习\"></a>11 练习</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">! /bin/bash</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ***************  homework_0  *****************</span></span><br><span class=\"line\">dir0=/home/acs/homework/lesson_1/homework_0</span><br><span class=\"line\"></span><br><span class=\"line\">homework 1 create 0</span><br><span class=\"line\"></span><br><span class=\"line\">for i in dir_a dir_b dir_c</span><br><span class=\"line\">do</span><br><span class=\"line\">    mkdir &quot;$&#123;dir0&#125;/$i&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ***************  homework_1  *****************</span></span><br><span class=\"line\">dir1=/home/acs/homework/lesson_1/homework_1</span><br><span class=\"line\"></span><br><span class=\"line\">homework 1 create 1</span><br><span class=\"line\"></span><br><span class=\"line\">for i in a.txt b.txt c.txt </span><br><span class=\"line\">do</span><br><span class=\"line\">    cp &quot;$&#123;dir1&#125;/$&#123;i&#125;&quot; &quot;$&#123;dir1&#125;/$&#123;i&#125;.bak&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ***************  homework_2  *****************</span></span><br><span class=\"line\">dir2=/home/acs/homework/lesson_1/homework_2</span><br><span class=\"line\"></span><br><span class=\"line\">homework 1 create 2</span><br><span class=\"line\"></span><br><span class=\"line\">for i in a b c</span><br><span class=\"line\">do</span><br><span class=\"line\">    mv &quot;$&#123;dir2&#125;/$&#123;i&#125;.txt&quot; &quot;$&#123;dir2&#125;/$&#123;i&#125;_new.txt&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ***************  homework_3  *****************</span></span><br><span class=\"line\">dir3=/home/acs/homework/lesson_1/homework_3</span><br><span class=\"line\"></span><br><span class=\"line\">homework 1 create 3</span><br><span class=\"line\"></span><br><span class=\"line\">for i in a.txt b.txt c.txt</span><br><span class=\"line\">do</span><br><span class=\"line\">    mv &quot;$&#123;dir3&#125;/dir_a/$&#123;i&#125;&quot; &quot;$&#123;dir3&#125;/dir_b&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ***************  homework_4  *****************</span></span><br><span class=\"line\"></span><br><span class=\"line\">dir4=/home/acs/homework/lesson_1/homework_4</span><br><span class=\"line\"></span><br><span class=\"line\">homework 1 create 4</span><br><span class=\"line\"></span><br><span class=\"line\">rm $&#123;dir4&#125;/*</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ***************  homework_5  *****************</span></span><br><span class=\"line\"></span><br><span class=\"line\">dir5=/home/acs/homework/lesson_1/homework_5</span><br><span class=\"line\">homework 1 create 5</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf $&#123;dir5&#125;/*</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ***************  homework_6  *****************</span></span><br><span class=\"line\"></span><br><span class=\"line\">dir6=/home/acs/homework/lesson_1/homework_6</span><br><span class=\"line\"></span><br><span class=\"line\">homework 1 create 6</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir &quot;$&#123;dir6&#125;/dir_a&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">mv &quot;$&#123;dir6&#125;/task.txt&quot; &quot;$&#123;dir6&#125;/dir_a/done.txt&quot;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ***************  homework_7  *****************</span></span><br><span class=\"line\">dir7=/home/acs/homework/lesson_1/homework_7</span><br><span class=\"line\"></span><br><span class=\"line\">homework 1 create 7</span><br><span class=\"line\"></span><br><span class=\"line\">for((i = 0; i &lt; 3; i++))</span><br><span class=\"line\">do</span><br><span class=\"line\">    mkdir $&#123;dir7&#125;/dir_$&#123;i&#125;</span><br><span class=\"line\">    for j in a b c</span><br><span class=\"line\">    do</span><br><span class=\"line\">        cp $&#123;dir7&#125;/$&#123;j&#125;.txt $&#123;dir7&#125;/dir_$&#123;i&#125;/$&#123;j&#125;$&#123;i&#125;.txt</span><br><span class=\"line\">    done</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ***************  homework_8  *****************</span></span><br><span class=\"line\">dir8=/home/acs/homework/lesson_1/homework_8</span><br><span class=\"line\"></span><br><span class=\"line\">homework 1 create 8</span><br><span class=\"line\">rm $&#123;dir8&#125;/dir_a/a.txt</span><br><span class=\"line\">mv $&#123;dir8&#125;/dir_b/b.txt $&#123;dir8&#125;/dir_b/b_new.txt</span><br><span class=\"line\">cp $&#123;dir8&#125;/dir_c/c.txt $&#123;dir8&#125;/dir_c/c.txt.bak</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ***************  homework_9  *****************</span></span><br><span class=\"line\"></span><br><span class=\"line\">dir9=/home/acs/homework/lesson_1/homework_9</span><br><span class=\"line\"></span><br><span class=\"line\">homework 1 create 9</span><br><span class=\"line\"></span><br><span class=\"line\">rm $&#123;dir9&#125;/*.txt</span><br><span class=\"line\">homework 1 test</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h2 id=\"Shell\"><a href=\"#Shell\" class=\"headerlink\" title=\"Shell\"></a>Shell</h2><h3 id=\"1-变量\"><a href=\"#1-变量\" class=\"headerlink\" title=\"1 变量\"></a>1 变量</h3><h4 id=\"1-1-变量定义\"><a href=\"#1-1-变量定义\" class=\"headerlink\" title=\"1.1 变量定义\"></a>1.1 变量定义</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=mzc</span><br><span class=\"line\">name=&#x27;mzc&#x27;</span><br><span class=\"line\">name=&quot;mzc&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-2-使用变量\"><a href=\"#1-2-使用变量\" class=\"headerlink\" title=\"1.2 使用变量\"></a>1.2 使用变量</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=mzc</span><br><span class=\"line\">echo $&#123;name&#125;</span><br><span class=\"line\">echo $&#123;name&#125;qwe</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-设置只读变量\"><a href=\"#1-3-设置只读变量\" class=\"headerlink\" title=\"1.3 设置只读变量\"></a>1.3 设置只读变量</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=mzc</span><br><span class=\"line\">readonly name</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-4-删除变量\"><a href=\"#1-4-删除变量\" class=\"headerlink\" title=\"1.4 删除变量\"></a>1.4 删除变量</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=mzc</span><br><span class=\"line\">unset name</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-5-变量类型\"><a href=\"#1-5-变量类型\" class=\"headerlink\" title=\"1.5 变量类型\"></a>1.5 变量类型</h4><p>全局变量（环境变量）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export name</span><br><span class=\"line\">password=qwe</span><br><span class=\"line\">declare -x password</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-6-字符串\"><a href=\"#1-6-字符串\" class=\"headerlink\" title=\"1.6 字符串\"></a>1.6 字符串</h4><p>单引号与双引号的区别：</p>\n<ul>\n<li>单引号中的内容会原样输出，不会执行、不会取变量；</li>\n<li>双引号中的内容可以执行、可以取变量；</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=mzc</span><br><span class=\"line\">echo &#x27;hello, $name \\&quot;hh\\&quot;&#x27;  # 单引号字符串，输出 hello, $name \\&quot;hh\\&quot;</span><br><span class=\"line\">echo &quot;hello, $name \\&quot;hh\\&quot;&quot;  # 双引号字符串，输出 hello, yxc &quot;hh&quot;</span><br></pre></td></tr></table></figure>\n\n<p>获取字符串长度</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=mzc</span><br><span class=\"line\">echo $&#123;#name&#125; # 3</span><br></pre></td></tr></table></figure>\n\n<p>提取子串</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $&#123;name:0:2&#125; # 取0-2字符</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-默认变量\"><a href=\"#2-默认变量\" class=\"headerlink\" title=\"2 默认变量\"></a>2 默认变量</h3><h4 id=\"2-1-文件参数变量\"><a href=\"#2-1-文件参数变量\" class=\"headerlink\" title=\"2.1 文件参数变量\"></a>2.1 文件参数变量</h4><p>在执行shell脚本时，可以向脚本传递参数。$1是第一个参数，$2是第二个参数，以此类推。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">! /bin/bash</span></span><br><span class=\"line\">echo &quot;文件名：&quot;$0</span><br><span class=\"line\">echo &quot;第一个参数：&quot;$1</span><br><span class=\"line\">echo &quot;第二个参数：&quot;$2</span><br><span class=\"line\">echo &quot;第三个参数：&quot;$3</span><br><span class=\"line\">echo &quot;第四个参数：&quot;$4</span><br><span class=\"line\"></span><br><span class=\"line\">acs@9e0ebfcd82d7:~$ ./test.sh 1 2 3 4</span><br><span class=\"line\">文件名：./test.sh</span><br><span class=\"line\">第一个参数：1</span><br><span class=\"line\">第二个参数：2</span><br><span class=\"line\">第三个参数：3</span><br><span class=\"line\">第四个参数：4</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-其他参数\"><a href=\"#2-2-其他参数\" class=\"headerlink\" title=\"2.2 其他参数\"></a>2.2 其他参数</h4><p><img src=\"C:\\Users\\17561\\Desktop\\笔记\\图片\\shell命令.png\"></p>\n<h3 id=\"3-数组\"><a href=\"#3-数组\" class=\"headerlink\" title=\"3 数组\"></a>3 数组</h3><p>数组中可以存放多个不同类型的值，只支持一维数组，初始化时不需要指明数组大小。<br>数组下标从0开始。</p>\n<h4 id=\"3-1-数组的定义\"><a href=\"#3-1-数组的定义\" class=\"headerlink\" title=\"3.1 数组的定义\"></a>3.1 数组的定义</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array=(1,abc,&quot;asd&quot;,qwe)</span><br><span class=\"line\"></span><br><span class=\"line\">array[0]=1</span><br><span class=\"line\">array[1]=zxc</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-取值\"><a href=\"#3-2-取值\" class=\"headerlink\" title=\"3.2 取值\"></a>3.2 取值</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;array[index]&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">echo array[0]</span><br><span class=\"line\">echo array[1]</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 取出所有</span></span><br><span class=\"line\">echo $&#123;array[*]&#125;</span><br><span class=\"line\">echo $&#123;array[@]&#125;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 数组长度</span></span><br><span class=\"line\">echo $&#123;#array[*]&#125;</span><br><span class=\"line\">echo $&#123;#array[@]&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-expr命令\"><a href=\"#4-expr命令\" class=\"headerlink\" title=\"4 expr命令\"></a>4 expr命令</h3><p>expr命令用户求表达式的值，格式为：expr 表达式</p>\n<p>表达式说明：</p>\n<ul>\n<li>用空格隔开每一项</li>\n<li>用反斜杠放在shell特定的字符前面（发现表达式运行错误时，可以试试转义）</li>\n<li>对包含空格和其他特殊字符的字符串要用引号括起来</li>\n<li>expr会在stdout中输出结果。如果为逻辑关系表达式，则结果为真，stdout为1，否则为0。</li>\n<li>expr的exit code：如果为逻辑关系表达式，则结果为真，exit code为0，否则为1。</li>\n</ul>\n<h4 id=\"4-1-字符串表达式\"><a href=\"#4-1-字符串表达式\" class=\"headerlink\" title=\"4.1 字符串表达式\"></a>4.1 字符串表达式</h4><ul>\n<li>length string 返回string长度</li>\n<li>index string charset    charset中任意单个字符在string中最前面的字符位置，下标从1开始。如果在string中完全不存在charset中的字符，则返回0。</li>\n<li>substr string position length    返回STRING字符串中从POSITION开始，长度最大为LENGTH的子串。如果POSITION或LENGTH为负数，0或非数值，则返回空字符串。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str=&quot;hello world!&quot;</span><br><span class=\"line\">echo `expr length &quot;$str&quot;`  # 输出12</span><br><span class=\"line\">echo `expr` index &quot;$str&quot; awd`  # 输出 7</span><br><span class=\"line\">echo `expr substr &quot;$&#123;str&#125;&quot; 2 3`  # 输出 ell</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-数学表达式\"><a href=\"#4-2-数学表达式\" class=\"headerlink\" title=\"4.2 数学表达式\"></a>4.2 数学表达式</h4><p>expr支持普通的算术操作，算术表达式优先级低于字符串表达式，高于逻辑关系表达式。</p>\n<ul>\n<li>{+  -} 加减运算。两端参数会转换为整数，如果转换失败则报错。</li>\n<li>{* / %} 乘，除，取模运算。两端参数会转换为整数，如果转换失败则报错。</li>\n<li>() 可以该表优先级，但需要用反斜杠转义</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=3</span><br><span class=\"line\">b=4</span><br><span class=\"line\"></span><br><span class=\"line\">echo `expr $&#123;a&#125; + $&#123;b&#125;` # 7</span><br><span class=\"line\">echo `expr $&#123;a&#125; - $&#123;b&#125;` # -1</span><br><span class=\"line\">echo `expr $&#123;a&#125; \\* $&#123;b&#125;` # 12</span><br><span class=\"line\">echo `expr $&#123;a&#125; / $&#123;b&#125;` # 0</span><br><span class=\"line\">echo `expr $&#123;a&#125; % $&#123;b&#125;` # 3</span><br><span class=\"line\">echo `expr \\( $a + 1 \\) \\* \\( $b + 1 \\)` # 20</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-3-逻辑关系表达式\"><a href=\"#4-3-逻辑关系表达式\" class=\"headerlink\" title=\"4.3 逻辑关系表达式\"></a>4.3 逻辑关系表达式</h4><ul>\n<li>| 如果第一个参数非空且非0，则返回第一个参数的值，否则返回第二个参数的值，但要求第二个参数的值也是非空或非0，否则返回0。如果第一个参数是非空或非0时，不会计算第二个参数</li>\n<li> &amp; 如果两个参数都非空且非0，则返回第一个参数，否则返回0。如果第一个参为0或为空，则不会计算第二个参数。</li>\n<li>&lt; &lt;= = == != &gt;= &gt;  比较两端的参数，如果为true，则返回1，否则返回0。”==”是”=”的同义词。”expr”首先尝试将两端参数转换为整数，并做算术比较，如果转换失败，则按字符集排序规则做字符比较。</li>\n<li>() 可以该表优先级，但需要用反斜杠转义</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=3</span><br><span class=\"line\">b=4</span><br><span class=\"line\"></span><br><span class=\"line\">echo `expr $a \\&gt; $b`  # 输出0，&gt;需要转义</span><br><span class=\"line\">echo `expr $a &#x27;&lt;&#x27; $b`  # 输出1，也可以将特殊字符用引号引起来</span><br><span class=\"line\">echo `expr $a &#x27;&gt;=&#x27; $b`  # 输出0</span><br><span class=\"line\">echo `expr $a \\&lt;\\= $b`  # 输出1</span><br><span class=\"line\"></span><br><span class=\"line\">c=0</span><br><span class=\"line\">d=5</span><br><span class=\"line\"></span><br><span class=\"line\">echo `expr $c \\&amp; $d`  # 输出0</span><br><span class=\"line\">echo `expr $a \\&amp; $b`  # 输出3</span><br><span class=\"line\">echo `expr $c \\| $d`  # 输出5</span><br><span class=\"line\">echo `expr $a \\| $b`  # 输出3</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-read\"><a href=\"#5-read\" class=\"headerlink\" title=\"5 read\"></a>5 read</h3><p>read命令用于从标准输入中读取单行数据。当读到文件结束符时，exit code为1，否则为0</p>\n<p>参数说明</p>\n<ul>\n<li>-p: 后面可以接提示信息</li>\n<li>-t：后面跟秒数，定义输入字符的等待时间，超过等待时间后会自动忽略此命令</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">read name</span><br><span class=\"line\">mzc</span><br><span class=\"line\">echo $name </span><br><span class=\"line\">mzc</span><br><span class=\"line\"></span><br><span class=\"line\">read -p &quot;Please input your name：&quot; -t 5 name</span><br><span class=\"line\">Please input your name：mzc</span><br><span class=\"line\">echo $name</span><br><span class=\"line\">mzc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-echo\"><a href=\"#6-echo\" class=\"headerlink\" title=\"6 echo\"></a>6 echo</h3><p>输出格式：echo string</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 普通字符串</span></span><br><span class=\"line\">echo &quot;Hello World&quot;</span><br><span class=\"line\">echo Hello World</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示变量</span></span><br><span class=\"line\">name=mzc</span><br><span class=\"line\">echo &quot;My name is $name&quot;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示换行</span></span><br><span class=\"line\">echo -e &quot;Hi\\n&quot;</span><br><span class=\"line\">echo &quot;acwing&quot;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示不换行</span></span><br><span class=\"line\">echo -e &quot;Hi \\c&quot;</span><br><span class=\"line\">echo acwing</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示结果定向至文件</span></span><br><span class=\"line\">echo &quot;Hello World&quot; &gt; out.txt</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示时间</span></span><br><span class=\"line\">echo `date`</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-print\"><a href=\"#7-print\" class=\"headerlink\" title=\"7 print\"></a>7 print</h3><p>printf命令用于格式化输出，类似于C/C++中的printf函数。</p>\n<p>默认不会在字符串末尾添加换行符。</p>\n<p>命令格式：printf format string</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printf &quot;%10d.\\n&quot; 123</span><br><span class=\"line\">printf &quot;%-10.2f.\\n&quot; 123.123123</span><br><span class=\"line\">printf &quot;My name is %s\\n&quot; &quot;mzc&quot;</span><br><span class=\"line\">printf &quot;%d + %d = %d\\n&quot; 2 3 `expr 2 \\* 3`</span><br><span class=\"line\"></span><br><span class=\"line\">       123.</span><br><span class=\"line\">123.12    .</span><br><span class=\"line\">My name is yxc</span><br><span class=\"line\">2 * 3 = 6</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-test\"><a href=\"#8-test\" class=\"headerlink\" title=\"8 test\"></a>8 test</h3><h4 id=\"8-1-逻辑运算符-amp-amp-和\"><a href=\"#8-1-逻辑运算符-amp-amp-和\" class=\"headerlink\" title=\"8.1 逻辑运算符&amp;&amp;和||\"></a>8.1 逻辑运算符&amp;&amp;和||</h4><ul>\n<li>&amp;&amp; 表示与，|| 表示或</li>\n<li>二者具有短路原则：<br>expr1 &amp;&amp; expr2：当expr1为假时，直接忽略expr2<br>expr1 || expr2：当expr1为真时，直接忽略expr2</li>\n<li>表达式的exit code为0，表示真；为非零，表示假。（与C/C++中的定义相反）</li>\n</ul>\n<h4 id=\"8-2-test命令\"><a href=\"#8-2-test命令\" class=\"headerlink\" title=\"8.2 test命令\"></a>8.2 test命令</h4><p>在命令行中输入man test，可以查看test命令的用法。</p>\n<p>test命令用于判断文件类型，以及对变量做比较。</p>\n<p>test命令用exit code返回结果，而不是使用stdout。0表示真，非0表示假。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test 2 -lt 3 # 为真 0</span><br><span class=\"line\">echo $? # 输出0</span><br><span class=\"line\"></span><br><span class=\"line\">ls  # 列出当前目录下的所有文件</span><br><span class=\"line\">homework  output.txt  test.sh  tmp</span><br><span class=\"line\">test -e test.sh &amp;&amp; echo &quot;exist&quot; || echo &quot;Not exist&quot;</span><br><span class=\"line\">exist  # test.sh 文件存在</span><br><span class=\"line\">test -e test2.sh &amp;&amp; echo &quot;exist&quot; || echo &quot;Not exist&quot;</span><br><span class=\"line\">Not exist  # testh2.sh 文件不存在</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-3-文件类型判断\"><a href=\"#8-3-文件类型判断\" class=\"headerlink\" title=\"8.3 文件类型判断\"></a>8.3 文件类型判断</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test -e filename # 判断文件是否存在</span><br></pre></td></tr></table></figure>\n\n<p>-e 文件是否存在</p>\n<p>-f 是否为文件</p>\n<p>-d 是否为目录</p>\n<h4 id=\"8-4-文件权限判断\"><a href=\"#8-4-文件权限判断\" class=\"headerlink\" title=\"8.4 文件权限判断\"></a>8.4 文件权限判断</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test -r filename # 判断文件是否可读</span><br></pre></td></tr></table></figure>\n\n<p>-r 是否可读</p>\n<p>-w 是否可写</p>\n<p>-x 是否可执行</p>\n<p>-s 是否为非null文件</p>\n<h4 id=\"8-5-整数间的比较\"><a href=\"#8-5-整数间的比较\" class=\"headerlink\" title=\"8.5 整数间的比较\"></a>8.5 整数间的比较</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test $a -eq $b # a 是否等于 b </span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>代表意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-eq</td>\n<td>等于</td>\n</tr>\n<tr>\n<td>-ne</td>\n<td>不等于</td>\n</tr>\n<tr>\n<td>-gt</td>\n<td>大于</td>\n</tr>\n<tr>\n<td>-lt</td>\n<td>小于</td>\n</tr>\n<tr>\n<td>-ge</td>\n<td>大于等于</td>\n</tr>\n<tr>\n<td>-le</td>\n<td>小于等于</td>\n</tr>\n</tbody></table>\n<h4 id=\"8-6-字符串比较\"><a href=\"#8-6-字符串比较\" class=\"headerlink\" title=\"8.6 字符串比较\"></a>8.6 字符串比较</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>代表意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>test -z string</td>\n<td>是否为null，为null，返回true</td>\n</tr>\n<tr>\n<td>test -n string</td>\n<td>是否为非null，非null，返回true</td>\n</tr>\n<tr>\n<td>test str1 == str2</td>\n<td>是否相等</td>\n</tr>\n<tr>\n<td>test str1 != str2</td>\n<td>是否不相等</td>\n</tr>\n</tbody></table>\n<h4 id=\"8-7-多重条件判定\"><a href=\"#8-7-多重条件判定\" class=\"headerlink\" title=\"8.7 多重条件判定\"></a>8.7 多重条件判定</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test -r filename -a -x filename</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>代表意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-a</td>\n<td>两个条件同时成立</td>\n</tr>\n<tr>\n<td>-o</td>\n<td>两个条件至少成立一个</td>\n</tr>\n<tr>\n<td>!</td>\n<td>取反</td>\n</tr>\n</tbody></table>\n<h4 id=\"8-8-判断符号\"><a href=\"#8-8-判断符号\" class=\"headerlink\" title=\"8.8 判断符号[]\"></a>8.8 判断符号[]</h4><p>[]与test用法几乎一模一样，更常用于if语句中。另外[[]]是[]的加强版，支持的特性更多。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ a -lt 3 ] # 为真，返回 0</span><br><span class=\"line\">echo $? # 输出0</span><br><span class=\"line\"></span><br><span class=\"line\">ls</span><br><span class=\"line\">homework  output.txt  test.sh  tmp</span><br><span class=\"line\">[ -e test.sh ] &amp;&amp; echo &quot;exit&quot; || echo &quot;not exit&quot; </span><br><span class=\"line\">exit</span><br><span class=\"line\">[ -e test.sh ] &amp;&amp; echo &quot;exit&quot; || echo &quot;not exit&quot; </span><br><span class=\"line\">not exit</span><br></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<ul>\n<li>[]内的每一项都要用空格隔开</li>\n<li>中括号内的变量，最好用双引号括起来</li>\n<li>中括号内的常数，最好用单或双引号括起来</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=&quot;acwing yxc&quot;</span><br><span class=\"line\">[ $name == &quot;acwing yxc&quot; ]  # 错误，等价于 [ acwing yxc == &quot;acwing yxc&quot; ]，参数太多</span><br><span class=\"line\">[ &quot;$name&quot; == &quot;acwing yxc&quot; ]  # 正确</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-判断语句\"><a href=\"#9-判断语句\" class=\"headerlink\" title=\"9 判断语句\"></a>9 判断语句</h3><h4 id=\"9-1-单层if\"><a href=\"#9-1-单层if\" class=\"headerlink\" title=\"9.1 单层if\"></a>9.1 单层if</h4><p>格式</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if condition</span><br><span class=\"line\">then </span><br><span class=\"line\">\t语句1</span><br><span class=\"line\">\t语句2</span><br><span class=\"line\">\t....</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">a=3</span><br><span class=\"line\">b=4</span><br><span class=\"line\">if [ $a -lt $b ] </span><br><span class=\"line\">then </span><br><span class=\"line\">\techo $a</span><br><span class=\"line\">fi\t</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-2-单层if-else\"><a href=\"#9-2-单层if-else\" class=\"headerlink\" title=\"9.2 单层if-else\"></a>9.2 单层if-else</h4><p>格式</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if condition</span><br><span class=\"line\">then</span><br><span class=\"line\">\t语句1</span><br><span class=\"line\">\t语句2</span><br><span class=\"line\">\t...</span><br><span class=\"line\">else </span><br><span class=\"line\">\t语句1</span><br><span class=\"line\">\t语句2</span><br><span class=\"line\">\t...</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">a=3</span><br><span class=\"line\">b=4</span><br><span class=\"line\">if ! [ &quot;$a&quot; -lt &quot;$b&quot; ]</span><br><span class=\"line\">then </span><br><span class=\"line\">\techo $a</span><br><span class=\"line\">else </span><br><span class=\"line\">\techo $b</span><br><span class=\"line\">fi\t</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-3-多层if-elif-elif-else\"><a href=\"#9-3-多层if-elif-elif-else\" class=\"headerlink\" title=\"9.3 多层if-elif-elif-else\"></a>9.3 多层if-elif-elif-else</h4><p>格式</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if condition</span><br><span class=\"line\">then</span><br><span class=\"line\">\t语句1</span><br><span class=\"line\">\t语句2</span><br><span class=\"line\">\t...</span><br><span class=\"line\">elif condition</span><br><span class=\"line\">then</span><br><span class=\"line\">\t语句1</span><br><span class=\"line\">\t语句2</span><br><span class=\"line\">\t...</span><br><span class=\"line\">elif condition</span><br><span class=\"line\">then</span><br><span class=\"line\">\t语句1</span><br><span class=\"line\">\t语句2</span><br><span class=\"line\">\t...</span><br><span class=\"line\">else</span><br><span class=\"line\">\t语句1</span><br><span class=\"line\">\t语句2</span><br><span class=\"line\">\t...</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">a=4</span><br><span class=\"line\">if [ $a -eq 1 ]</span><br><span class=\"line\">then </span><br><span class=\"line\">\techo $a</span><br><span class=\"line\">elif [ $a -eq 2 ]\t</span><br><span class=\"line\">then </span><br><span class=\"line\">\techo $a</span><br><span class=\"line\">elif [ $a -eq 3 ]\t</span><br><span class=\"line\">then</span><br><span class=\"line\">\techo $a</span><br><span class=\"line\">else </span><br><span class=\"line\">\techo $a</span><br><span class=\"line\">fi\t</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-4-case…esac形式\"><a href=\"#9-4-case…esac形式\" class=\"headerlink\" title=\"9.4 case…esac形式\"></a>9.4 case…esac形式</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case $变量名称 in</span><br><span class=\"line\">\t值1)</span><br><span class=\"line\">\t\t语句1</span><br><span class=\"line\">\t\t语句2</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\">\t值2)\t</span><br><span class=\"line\">\t\t语句1</span><br><span class=\"line\">\t\t语句2</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\">\t*)\t\t</span><br><span class=\"line\">\t\t语句1</span><br><span class=\"line\">\t\t语句2</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\">esac\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">a=4</span><br><span class=\"line\">case $a in</span><br><span class=\"line\">\t1)</span><br><span class=\"line\">\t\techo $a</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\">\t2)</span><br><span class=\"line\">    \techo $a</span><br><span class=\"line\">    \t;;</span><br><span class=\"line\">    3)\t</span><br><span class=\"line\">    \techo $a</span><br><span class=\"line\">    \t;;</span><br><span class=\"line\">    *)\t</span><br><span class=\"line\">    \techo $a</span><br><span class=\"line\">    \t;;</span><br><span class=\"line\">esac    \t</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-循环语句\"><a href=\"#10-循环语句\" class=\"headerlink\" title=\"10 循环语句\"></a>10 循环语句</h3><h4 id=\"10-1-for…in…do…done\"><a href=\"#10-1-for…in…do…done\" class=\"headerlink\" title=\"10.1 for…in…do…done\"></a>10.1 for…in…do…done</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for var in val1 val2 val3</span><br><span class=\"line\">do</span><br><span class=\"line\">\t语句1</span><br><span class=\"line\">\t语句2</span><br><span class=\"line\">\t...</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 输出遍历元素</span></span><br><span class=\"line\">for i in a 22 cc</span><br><span class=\"line\">do</span><br><span class=\"line\">\techo $i</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 输出当前路劲下的所有文件名</span></span><br><span class=\"line\">for i in `ls`</span><br><span class=\"line\">do</span><br><span class=\"line\">\techo $i</span><br><span class=\"line\">done </span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 输出1-10</span></span><br><span class=\"line\">for i in $(seq 1 10)</span><br><span class=\"line\">do</span><br><span class=\"line\">\techo $i</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> &#123;1..10&#125; &#123;a..z&#125;</span></span><br><span class=\"line\">for i in &#123;a..z&#125;</span><br><span class=\"line\">do</span><br><span class=\"line\">\techo $i</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-2-for-…-…-…-do…done\"><a href=\"#10-2-for-…-…-…-do…done\" class=\"headerlink\" title=\"10.2 for ((…;…;…)) do…done\"></a>10.2 for ((…;…;…)) do…done</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for((expression;condition;expression))</span><br><span class=\"line\">do</span><br><span class=\"line\">\t语句1</span><br><span class=\"line\">\t语句2</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">for((i = 0; i &lt;= 10; i++))</span><br><span class=\"line\">do</span><br><span class=\"line\">\techo $i</span><br><span class=\"line\">done\t</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-3-until…do…done循环\"><a href=\"#10-3-until…do…done循环\" class=\"headerlink\" title=\"10.3 until…do…done循环\"></a>10.3 until…do…done循环</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">until condition </span><br><span class=\"line\">do</span><br><span class=\"line\">\t语句1</span><br><span class=\"line\">\t语句2</span><br><span class=\"line\">\t..</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">until [ &quot;$&#123;word&#125;&quot; == &quot;yes ] || [ &quot;$&#123;word&#125;&quot; == &quot;YES&quot;]</span><br><span class=\"line\">do</span><br><span class=\"line\">\tread -p &quot;Please input yes/YES to stop this program&quot; word</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-函数\"><a href=\"#11-函数\" class=\"headerlink\" title=\"11 函数\"></a>11 函数</h3><p>bash中的函数类似于C/C++中的函数，但return的返回值与C/C++不同，返回的是exit code，取值为0-255，0表示正常结束。</p>\n<p>如果想获取函数的输出结果，可以通过echo输出到stdout中，然后通过$(function_name)来获取stdout中的结果。</p>\n<p>函数的return值可以通过$?来获取。</p>\n<p>格式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[function] function_name()&#123; # function可以省略</span><br><span class=\"line\">\t语句1</span><br><span class=\"line\">\t语句2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func()&#123;</span><br><span class=\"line\">\tname=mzc</span><br><span class=\"line\">\techo &quot;Hello $name&quot; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func</span><br><span class=\"line\"></span><br><span class=\"line\">func()&#123;</span><br><span class=\"line\">\tname=mzc</span><br><span class=\"line\">\techo &quot;Hello $name&quot;</span><br><span class=\"line\">\treturn 123</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output=$(func)</span><br><span class=\"line\">ret=$?</span><br><span class=\"line\"></span><br><span class=\"line\">echo\t&quot;output=$(output)&quot;</span><br><span class=\"line\">echo\t&quot;return=$(ret)&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"11-1-函数的输入参数\"><a href=\"#11-1-函数的输入参数\" class=\"headerlink\" title=\"11.1 函数的输入参数\"></a>11.1 函数的输入参数</h4><p>在函数内，$1表示第一个输入参数，$2表示第二个输入参数，依次类推</p>\n<p>注意：$0表示文件名</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func()&#123;</span><br><span class=\"line\">\tword=&quot;&quot;</span><br><span class=\"line\">\twhile [ &quot;$word&quot; != &#x27;y&#x27; ] &amp;&amp; [ &quot;$word&quot; != &#x27;n&#x27; ]</span><br><span class=\"line\">\tdo</span><br><span class=\"line\">\t\tread -p &quot;&quot;要进入func($1)函数吗？请输入y/n：&quot; word</span><br><span class=\"line\">\tdone</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tif [ &quot;word&quot; == &#x27;n&#x27; ]</span><br><span class=\"line\">\tthen</span><br><span class=\"line\">\t\techo 0</span><br><span class=\"line\">\t\treturn 0</span><br><span class=\"line\">\tfi</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tif [ $1 -le 0 ]</span><br><span class=\"line\">\tthen </span><br><span class=\"line\">\t\techo 0</span><br><span class=\"line\">\t\treturn 0</span><br><span class=\"line\">\tfi</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tsum=$(func $(expr $1 - 1))</span><br><span class=\"line\">\techo $(expr $sum + $1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">echo $(func 10)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"11-练习\"><a href=\"#11-练习\" class=\"headerlink\" title=\"11 练习\"></a>11 练习</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">! /bin/bash</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ***************  homework_0  *****************</span></span><br><span class=\"line\">dir0=/home/acs/homework/lesson_1/homework_0</span><br><span class=\"line\"></span><br><span class=\"line\">homework 1 create 0</span><br><span class=\"line\"></span><br><span class=\"line\">for i in dir_a dir_b dir_c</span><br><span class=\"line\">do</span><br><span class=\"line\">    mkdir &quot;$&#123;dir0&#125;/$i&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ***************  homework_1  *****************</span></span><br><span class=\"line\">dir1=/home/acs/homework/lesson_1/homework_1</span><br><span class=\"line\"></span><br><span class=\"line\">homework 1 create 1</span><br><span class=\"line\"></span><br><span class=\"line\">for i in a.txt b.txt c.txt </span><br><span class=\"line\">do</span><br><span class=\"line\">    cp &quot;$&#123;dir1&#125;/$&#123;i&#125;&quot; &quot;$&#123;dir1&#125;/$&#123;i&#125;.bak&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ***************  homework_2  *****************</span></span><br><span class=\"line\">dir2=/home/acs/homework/lesson_1/homework_2</span><br><span class=\"line\"></span><br><span class=\"line\">homework 1 create 2</span><br><span class=\"line\"></span><br><span class=\"line\">for i in a b c</span><br><span class=\"line\">do</span><br><span class=\"line\">    mv &quot;$&#123;dir2&#125;/$&#123;i&#125;.txt&quot; &quot;$&#123;dir2&#125;/$&#123;i&#125;_new.txt&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ***************  homework_3  *****************</span></span><br><span class=\"line\">dir3=/home/acs/homework/lesson_1/homework_3</span><br><span class=\"line\"></span><br><span class=\"line\">homework 1 create 3</span><br><span class=\"line\"></span><br><span class=\"line\">for i in a.txt b.txt c.txt</span><br><span class=\"line\">do</span><br><span class=\"line\">    mv &quot;$&#123;dir3&#125;/dir_a/$&#123;i&#125;&quot; &quot;$&#123;dir3&#125;/dir_b&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ***************  homework_4  *****************</span></span><br><span class=\"line\"></span><br><span class=\"line\">dir4=/home/acs/homework/lesson_1/homework_4</span><br><span class=\"line\"></span><br><span class=\"line\">homework 1 create 4</span><br><span class=\"line\"></span><br><span class=\"line\">rm $&#123;dir4&#125;/*</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ***************  homework_5  *****************</span></span><br><span class=\"line\"></span><br><span class=\"line\">dir5=/home/acs/homework/lesson_1/homework_5</span><br><span class=\"line\">homework 1 create 5</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf $&#123;dir5&#125;/*</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ***************  homework_6  *****************</span></span><br><span class=\"line\"></span><br><span class=\"line\">dir6=/home/acs/homework/lesson_1/homework_6</span><br><span class=\"line\"></span><br><span class=\"line\">homework 1 create 6</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir &quot;$&#123;dir6&#125;/dir_a&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">mv &quot;$&#123;dir6&#125;/task.txt&quot; &quot;$&#123;dir6&#125;/dir_a/done.txt&quot;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ***************  homework_7  *****************</span></span><br><span class=\"line\">dir7=/home/acs/homework/lesson_1/homework_7</span><br><span class=\"line\"></span><br><span class=\"line\">homework 1 create 7</span><br><span class=\"line\"></span><br><span class=\"line\">for((i = 0; i &lt; 3; i++))</span><br><span class=\"line\">do</span><br><span class=\"line\">    mkdir $&#123;dir7&#125;/dir_$&#123;i&#125;</span><br><span class=\"line\">    for j in a b c</span><br><span class=\"line\">    do</span><br><span class=\"line\">        cp $&#123;dir7&#125;/$&#123;j&#125;.txt $&#123;dir7&#125;/dir_$&#123;i&#125;/$&#123;j&#125;$&#123;i&#125;.txt</span><br><span class=\"line\">    done</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ***************  homework_8  *****************</span></span><br><span class=\"line\">dir8=/home/acs/homework/lesson_1/homework_8</span><br><span class=\"line\"></span><br><span class=\"line\">homework 1 create 8</span><br><span class=\"line\">rm $&#123;dir8&#125;/dir_a/a.txt</span><br><span class=\"line\">mv $&#123;dir8&#125;/dir_b/b.txt $&#123;dir8&#125;/dir_b/b_new.txt</span><br><span class=\"line\">cp $&#123;dir8&#125;/dir_c/c.txt $&#123;dir8&#125;/dir_c/c.txt.bak</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ***************  homework_9  *****************</span></span><br><span class=\"line\"></span><br><span class=\"line\">dir9=/home/acs/homework/lesson_1/homework_9</span><br><span class=\"line\"></span><br><span class=\"line\">homework 1 create 9</span><br><span class=\"line\"></span><br><span class=\"line\">rm $&#123;dir9&#125;/*.txt</span><br><span class=\"line\">homework 1 test</span><br></pre></td></tr></table></figure>\n\n"},{"title":"hexo-electric-clock","date":"2021-12-22T16:00:00.000Z","description":"hexo-electric-clock 电子时钟插件配置","cover":"https://raw.githubusercontent.com/13068098071/picode/main/img/8.jpg","_content":"## hexo-electric-clock 电子时钟插件\n\n### 效果图\n\n![时钟](https://raw.githubusercontent.com/13068098071/picode/main/img/image-20211223195858557.png)\n\n### 插件安装\n\n```shell\nnpm i hexo-electric-clock --save\n```\n\n### 在主_config配置\n\n```yaml\nelectric_clock:\n  priority: 5\n  enable: true\n  enable_page: all\n  layout:\n    type: class\n    name: sticky_layout\n    index: 0\n  temple_html: '<div class=\"card-widget card-clock\"><div class=\"card-glass\"><div class=\"card-background\"><div class=\"card-content\"><div id=\"hexo_electric_clock\"><img id=\"card-clock-loading\" src=\"https://cdn.jsdelivr.net/gh/Zfour/Butterfly-clock/clock/images/weather/loading.gif\" style=\"height: 120px; width: 100%;\" data-ll-status=\"loading\" class=\"entered loading\"></div></div></div></div></div>'\n```\n\n### 参数说明\n\n>enbale\n\n```shell\n# 是否开启插件\nenable: true\n```\n\n> enable_page\n\n```shell\n# 路由地址，all 代表全局开启。如 / 代表主页。\nenable_page: all\n```\n\n> priority\n\n```shell\n# 插件的叠放顺序，数字越大，叠放约靠前。\npriority: 5 # 这里是参数\n```\n\n> layout\n\n```shell\n# 参数：type; （class&id）\n# 参数：name;\n# 参数：index；（数字）\n# 含义：如果说 electric_clock 是一幅画，那么这个 layout 就是指定了哪面墙来挂画\n# 而在 HTML 的是世界里有两种墙分别 type 为 id 和 class。\n# 其中在定义 class 的时候会出现多个 class 的情况，这时就需要使用 index，确定是哪一个。\n# 最后墙的名字即是 name;\n\nlayout:\n    type: class\n    name: sticky_layout\n    index: 0\n```\n\n> temple_html\n\n```html\n<div class=\"card-widget card-clock\">\n  <!-- 挂载容器 -->\n  <div class=\"card-glass\">\n    <div class=\"card-background\">\n      <div class=\"card-content\">\n        <div id=\"hexo_electric_clock\">\n          <img\n            id=\"card-clock-loading\"\n            src=\"https://cdn.jsdelivr.net/gh/Zfour/Butterfly-clock/clock/images/weather/loading.gif\"\n            style=\"height: 120px; width: 100%;\"\n            data-ll-status=\"loading\"\n            class=\"entered loading\"\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n","source":"_posts/hexo-electric-clock.md","raw":"---\ntitle: hexo-electric-clock\ndate: 2021-12-23\ndescription: hexo-electric-clock 电子时钟插件配置\ncover: https://raw.githubusercontent.com/13068098071/picode/main/img/8.jpg\ntags: butterfly\ncategories: hexo\n---\n## hexo-electric-clock 电子时钟插件\n\n### 效果图\n\n![时钟](https://raw.githubusercontent.com/13068098071/picode/main/img/image-20211223195858557.png)\n\n### 插件安装\n\n```shell\nnpm i hexo-electric-clock --save\n```\n\n### 在主_config配置\n\n```yaml\nelectric_clock:\n  priority: 5\n  enable: true\n  enable_page: all\n  layout:\n    type: class\n    name: sticky_layout\n    index: 0\n  temple_html: '<div class=\"card-widget card-clock\"><div class=\"card-glass\"><div class=\"card-background\"><div class=\"card-content\"><div id=\"hexo_electric_clock\"><img id=\"card-clock-loading\" src=\"https://cdn.jsdelivr.net/gh/Zfour/Butterfly-clock/clock/images/weather/loading.gif\" style=\"height: 120px; width: 100%;\" data-ll-status=\"loading\" class=\"entered loading\"></div></div></div></div></div>'\n```\n\n### 参数说明\n\n>enbale\n\n```shell\n# 是否开启插件\nenable: true\n```\n\n> enable_page\n\n```shell\n# 路由地址，all 代表全局开启。如 / 代表主页。\nenable_page: all\n```\n\n> priority\n\n```shell\n# 插件的叠放顺序，数字越大，叠放约靠前。\npriority: 5 # 这里是参数\n```\n\n> layout\n\n```shell\n# 参数：type; （class&id）\n# 参数：name;\n# 参数：index；（数字）\n# 含义：如果说 electric_clock 是一幅画，那么这个 layout 就是指定了哪面墙来挂画\n# 而在 HTML 的是世界里有两种墙分别 type 为 id 和 class。\n# 其中在定义 class 的时候会出现多个 class 的情况，这时就需要使用 index，确定是哪一个。\n# 最后墙的名字即是 name;\n\nlayout:\n    type: class\n    name: sticky_layout\n    index: 0\n```\n\n> temple_html\n\n```html\n<div class=\"card-widget card-clock\">\n  <!-- 挂载容器 -->\n  <div class=\"card-glass\">\n    <div class=\"card-background\">\n      <div class=\"card-content\">\n        <div id=\"hexo_electric_clock\">\n          <img\n            id=\"card-clock-loading\"\n            src=\"https://cdn.jsdelivr.net/gh/Zfour/Butterfly-clock/clock/images/weather/loading.gif\"\n            style=\"height: 120px; width: 100%;\"\n            data-ll-status=\"loading\"\n            class=\"entered loading\"\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n","slug":"hexo-electric-clock","published":1,"updated":"2021-12-24T10:08:18.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxk8uw0q0009virj8j3f20ri","content":"<h2 id=\"hexo-electric-clock-电子时钟插件\"><a href=\"#hexo-electric-clock-电子时钟插件\" class=\"headerlink\" title=\"hexo-electric-clock 电子时钟插件\"></a>hexo-electric-clock 电子时钟插件</h2><h3 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><p><img src=\"https://raw.githubusercontent.com/13068098071/picode/main/img/image-20211223195858557.png\" alt=\"时钟\"></p>\n<h3 id=\"插件安装\"><a href=\"#插件安装\" class=\"headerlink\" title=\"插件安装\"></a>插件安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-electric-clock --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在主-config配置\"><a href=\"#在主-config配置\" class=\"headerlink\" title=\"在主_config配置\"></a>在主_config配置</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">electric_clock:</span></span><br><span class=\"line\">  <span class=\"attr\">priority:</span> <span class=\"number\">5</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">enable_page:</span> <span class=\"string\">all</span></span><br><span class=\"line\">  <span class=\"attr\">layout:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">class</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">sticky_layout</span></span><br><span class=\"line\">    <span class=\"attr\">index:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">temple_html:</span> <span class=\"string\">&#x27;&lt;div class=&quot;card-widget card-clock&quot;&gt;&lt;div class=&quot;card-glass&quot;&gt;&lt;div class=&quot;card-background&quot;&gt;&lt;div class=&quot;card-content&quot;&gt;&lt;div id=&quot;hexo_electric_clock&quot;&gt;&lt;img id=&quot;card-clock-loading&quot; src=&quot;https://cdn.jsdelivr.net/gh/Zfour/Butterfly-clock/clock/images/weather/loading.gif&quot; style=&quot;height: 120px; width: 100%;&quot; data-ll-status=&quot;loading&quot; class=&quot;entered loading&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h3><blockquote>\n<p>enbale</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 是否开启插件</span></span><br><span class=\"line\">enable: true</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>enable_page</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 路由地址，all 代表全局开启。如 / 代表主页。</span></span><br><span class=\"line\">enable_page: all</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>priority</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 插件的叠放顺序，数字越大，叠放约靠前。</span></span><br><span class=\"line\">priority: 5 # 这里是参数</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>layout</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 参数：<span class=\"built_in\">type</span>; （class&amp;id）</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 参数：name;</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 参数：index；（数字）</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 含义：如果说 electric_clock 是一幅画，那么这个 layout 就是指定了哪面墙来挂画</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 而在 HTML 的是世界里有两种墙分别 <span class=\"built_in\">type</span> 为 id 和 class。</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 其中在定义 class 的时候会出现多个 class 的情况，这时就需要使用 index，确定是哪一个。</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 最后墙的名字即是 name;</span></span><br><span class=\"line\"></span><br><span class=\"line\">layout:</span><br><span class=\"line\">    type: class</span><br><span class=\"line\">    name: sticky_layout</span><br><span class=\"line\">    index: 0</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>temple_html</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card-widget card-clock&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 挂载容器 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card-glass&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card-background&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card-content&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;hexo_electric_clock&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">img</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">id</span>=<span class=\"string\">&quot;card-clock-loading&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/Zfour/Butterfly-clock/clock/images/weather/loading.gif&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">style</span>=<span class=\"string\">&quot;height: 120px; width: 100%;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">data-ll-status</span>=<span class=\"string\">&quot;loading&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">class</span>=<span class=\"string\">&quot;entered loading&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h2 id=\"hexo-electric-clock-电子时钟插件\"><a href=\"#hexo-electric-clock-电子时钟插件\" class=\"headerlink\" title=\"hexo-electric-clock 电子时钟插件\"></a>hexo-electric-clock 电子时钟插件</h2><h3 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><p><img src=\"https://raw.githubusercontent.com/13068098071/picode/main/img/image-20211223195858557.png\" alt=\"时钟\"></p>\n<h3 id=\"插件安装\"><a href=\"#插件安装\" class=\"headerlink\" title=\"插件安装\"></a>插件安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-electric-clock --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在主-config配置\"><a href=\"#在主-config配置\" class=\"headerlink\" title=\"在主_config配置\"></a>在主_config配置</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">electric_clock:</span></span><br><span class=\"line\">  <span class=\"attr\">priority:</span> <span class=\"number\">5</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">enable_page:</span> <span class=\"string\">all</span></span><br><span class=\"line\">  <span class=\"attr\">layout:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">class</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">sticky_layout</span></span><br><span class=\"line\">    <span class=\"attr\">index:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">temple_html:</span> <span class=\"string\">&#x27;&lt;div class=&quot;card-widget card-clock&quot;&gt;&lt;div class=&quot;card-glass&quot;&gt;&lt;div class=&quot;card-background&quot;&gt;&lt;div class=&quot;card-content&quot;&gt;&lt;div id=&quot;hexo_electric_clock&quot;&gt;&lt;img id=&quot;card-clock-loading&quot; src=&quot;https://cdn.jsdelivr.net/gh/Zfour/Butterfly-clock/clock/images/weather/loading.gif&quot; style=&quot;height: 120px; width: 100%;&quot; data-ll-status=&quot;loading&quot; class=&quot;entered loading&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h3><blockquote>\n<p>enbale</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 是否开启插件</span></span><br><span class=\"line\">enable: true</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>enable_page</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 路由地址，all 代表全局开启。如 / 代表主页。</span></span><br><span class=\"line\">enable_page: all</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>priority</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 插件的叠放顺序，数字越大，叠放约靠前。</span></span><br><span class=\"line\">priority: 5 # 这里是参数</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>layout</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 参数：<span class=\"built_in\">type</span>; （class&amp;id）</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 参数：name;</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 参数：index；（数字）</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 含义：如果说 electric_clock 是一幅画，那么这个 layout 就是指定了哪面墙来挂画</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 而在 HTML 的是世界里有两种墙分别 <span class=\"built_in\">type</span> 为 id 和 class。</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 其中在定义 class 的时候会出现多个 class 的情况，这时就需要使用 index，确定是哪一个。</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 最后墙的名字即是 name;</span></span><br><span class=\"line\"></span><br><span class=\"line\">layout:</span><br><span class=\"line\">    type: class</span><br><span class=\"line\">    name: sticky_layout</span><br><span class=\"line\">    index: 0</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>temple_html</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card-widget card-clock&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 挂载容器 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card-glass&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card-background&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card-content&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;hexo_electric_clock&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">img</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">id</span>=<span class=\"string\">&quot;card-clock-loading&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/Zfour/Butterfly-clock/clock/images/weather/loading.gif&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">style</span>=<span class=\"string\">&quot;height: 120px; width: 100%;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">data-ll-status</span>=<span class=\"string\">&quot;loading&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">class</span>=<span class=\"string\">&quot;entered loading&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckxk8uw020001virj061e2ap3","category_id":"ckxk8uw0f0004virjhdwgcq1v","_id":"ckxk8uw0y000evirj5ocle7wi"},{"post_id":"ckxk8uw0b0003virj18kqaip2","category_id":"ckxk8uw0f0004virjhdwgcq1v","_id":"ckxk8uw11000ivirjg7nf1js0"},{"post_id":"ckxk8uw0m0007virjd3wr8o3w","category_id":"ckxk8uw0f0004virjhdwgcq1v","_id":"ckxk8uw13000lvirj3p59gi6l"},{"post_id":"ckxk8uw0o0008virj3ua1cr87","category_id":"ckxk8uw10000hvirjduf23yfl","_id":"ckxk8uw15000pvirj9nqce9jv"},{"post_id":"ckxk8uw0q0009virj8j3f20ri","category_id":"ckxk8uw13000mvirj6k1c5aur","_id":"ckxk8uw15000rvirj8ulk4qgk"}],"PostTag":[{"post_id":"ckxk8uw020001virj061e2ap3","tag_id":"ckxk8uw0i0005virjazh297sa","_id":"ckxk8uw0w000cvirjhpzi9l8n"},{"post_id":"ckxk8uw0b0003virj18kqaip2","tag_id":"ckxk8uw0s000bvirjfezzht2q","_id":"ckxk8uw10000gvirjffsp267k"},{"post_id":"ckxk8uw0m0007virjd3wr8o3w","tag_id":"ckxk8uw0i0005virjazh297sa","_id":"ckxk8uw12000kvirjb68y4k3e"},{"post_id":"ckxk8uw0o0008virj3ua1cr87","tag_id":"ckxk8uw11000jvirj3c2h15xw","_id":"ckxk8uw14000ovirjdpj86xrx"},{"post_id":"ckxk8uw0q0009virj8j3f20ri","tag_id":"ckxk8uw14000nvirjgeb52or5","_id":"ckxk8uw15000qvirj82zlhh8t"}],"Tag":[{"name":"List","_id":"ckxk8uw0i0005virjazh297sa"},{"name":"Map","_id":"ckxk8uw0s000bvirjfezzht2q"},{"name":"linux","_id":"ckxk8uw11000jvirj3c2h15xw"},{"name":"butterfly","_id":"ckxk8uw14000nvirjgeb52or5"}]}}